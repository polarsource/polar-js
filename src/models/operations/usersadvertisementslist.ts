/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UsersAdvertisementsListRequest = {
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
  /**
   * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
   */
  sorting?: Array<components.UserAdvertisementSortProperty> | null | undefined;
};

export type UsersAdvertisementsListResponse = {
  result: components.ListResourceUserAdvertisementCampaign;
};

/** @internal */
export const UsersAdvertisementsListRequest$inboundSchema: z.ZodType<
  UsersAdvertisementsListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(
    z.array(components.UserAdvertisementSortProperty$inboundSchema),
  ).optional(),
});

/** @internal */
export type UsersAdvertisementsListRequest$Outbound = {
  page: number;
  limit: number;
  sorting?: Array<string> | null | undefined;
};

/** @internal */
export const UsersAdvertisementsListRequest$outboundSchema: z.ZodType<
  UsersAdvertisementsListRequest$Outbound,
  z.ZodTypeDef,
  UsersAdvertisementsListRequest
> = z.object({
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(
    z.array(components.UserAdvertisementSortProperty$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAdvertisementsListRequest$ {
  /** @deprecated use `UsersAdvertisementsListRequest$inboundSchema` instead. */
  export const inboundSchema = UsersAdvertisementsListRequest$inboundSchema;
  /** @deprecated use `UsersAdvertisementsListRequest$outboundSchema` instead. */
  export const outboundSchema = UsersAdvertisementsListRequest$outboundSchema;
  /** @deprecated use `UsersAdvertisementsListRequest$Outbound` instead. */
  export type Outbound = UsersAdvertisementsListRequest$Outbound;
}

export function usersAdvertisementsListRequestToJSON(
  usersAdvertisementsListRequest: UsersAdvertisementsListRequest,
): string {
  return JSON.stringify(
    UsersAdvertisementsListRequest$outboundSchema.parse(
      usersAdvertisementsListRequest,
    ),
  );
}

export function usersAdvertisementsListRequestFromJSON(
  jsonString: string,
): SafeParseResult<UsersAdvertisementsListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAdvertisementsListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAdvertisementsListRequest' from JSON`,
  );
}

/** @internal */
export const UsersAdvertisementsListResponse$inboundSchema: z.ZodType<
  UsersAdvertisementsListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.ListResourceUserAdvertisementCampaign$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type UsersAdvertisementsListResponse$Outbound = {
  Result: components.ListResourceUserAdvertisementCampaign$Outbound;
};

/** @internal */
export const UsersAdvertisementsListResponse$outboundSchema: z.ZodType<
  UsersAdvertisementsListResponse$Outbound,
  z.ZodTypeDef,
  UsersAdvertisementsListResponse
> = z.object({
  result: components.ListResourceUserAdvertisementCampaign$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAdvertisementsListResponse$ {
  /** @deprecated use `UsersAdvertisementsListResponse$inboundSchema` instead. */
  export const inboundSchema = UsersAdvertisementsListResponse$inboundSchema;
  /** @deprecated use `UsersAdvertisementsListResponse$outboundSchema` instead. */
  export const outboundSchema = UsersAdvertisementsListResponse$outboundSchema;
  /** @deprecated use `UsersAdvertisementsListResponse$Outbound` instead. */
  export type Outbound = UsersAdvertisementsListResponse$Outbound;
}

export function usersAdvertisementsListResponseToJSON(
  usersAdvertisementsListResponse: UsersAdvertisementsListResponse,
): string {
  return JSON.stringify(
    UsersAdvertisementsListResponse$outboundSchema.parse(
      usersAdvertisementsListResponse,
    ),
  );
}

export function usersAdvertisementsListResponseFromJSON(
  jsonString: string,
): SafeParseResult<UsersAdvertisementsListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAdvertisementsListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAdvertisementsListResponse' from JSON`,
  );
}
