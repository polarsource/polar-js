/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Oauth2IntrospectTokenTokenTypeHint = {
  AccessToken: "access_token",
  RefreshToken: "refresh_token",
} as const;
export type Oauth2IntrospectTokenTokenTypeHint = ClosedEnum<
  typeof Oauth2IntrospectTokenTokenTypeHint
>;

export type Oauth2IntrospectTokenIntrospectTokenRequest = {
  token: string;
  tokenTypeHint?: Oauth2IntrospectTokenTokenTypeHint | null | undefined;
  clientId: string;
  clientSecret: string;
};

/** @internal */
export const Oauth2IntrospectTokenTokenTypeHint$inboundSchema: z.ZodNativeEnum<
  typeof Oauth2IntrospectTokenTokenTypeHint
> = z.nativeEnum(Oauth2IntrospectTokenTokenTypeHint);

/** @internal */
export const Oauth2IntrospectTokenTokenTypeHint$outboundSchema: z.ZodNativeEnum<
  typeof Oauth2IntrospectTokenTokenTypeHint
> = Oauth2IntrospectTokenTokenTypeHint$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Oauth2IntrospectTokenTokenTypeHint$ {
  /** @deprecated use `Oauth2IntrospectTokenTokenTypeHint$inboundSchema` instead. */
  export const inboundSchema = Oauth2IntrospectTokenTokenTypeHint$inboundSchema;
  /** @deprecated use `Oauth2IntrospectTokenTokenTypeHint$outboundSchema` instead. */
  export const outboundSchema =
    Oauth2IntrospectTokenTokenTypeHint$outboundSchema;
}

/** @internal */
export const Oauth2IntrospectTokenIntrospectTokenRequest$inboundSchema:
  z.ZodType<
    Oauth2IntrospectTokenIntrospectTokenRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    token: z.string(),
    token_type_hint: z.nullable(
      Oauth2IntrospectTokenTokenTypeHint$inboundSchema,
    ).optional(),
    client_id: z.string(),
    client_secret: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "token_type_hint": "tokenTypeHint",
      "client_id": "clientId",
      "client_secret": "clientSecret",
    });
  });

/** @internal */
export type Oauth2IntrospectTokenIntrospectTokenRequest$Outbound = {
  token: string;
  token_type_hint?: string | null | undefined;
  client_id: string;
  client_secret: string;
};

/** @internal */
export const Oauth2IntrospectTokenIntrospectTokenRequest$outboundSchema:
  z.ZodType<
    Oauth2IntrospectTokenIntrospectTokenRequest$Outbound,
    z.ZodTypeDef,
    Oauth2IntrospectTokenIntrospectTokenRequest
  > = z.object({
    token: z.string(),
    tokenTypeHint: z.nullable(Oauth2IntrospectTokenTokenTypeHint$outboundSchema)
      .optional(),
    clientId: z.string(),
    clientSecret: z.string(),
  }).transform((v) => {
    return remap$(v, {
      tokenTypeHint: "token_type_hint",
      clientId: "client_id",
      clientSecret: "client_secret",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Oauth2IntrospectTokenIntrospectTokenRequest$ {
  /** @deprecated use `Oauth2IntrospectTokenIntrospectTokenRequest$inboundSchema` instead. */
  export const inboundSchema =
    Oauth2IntrospectTokenIntrospectTokenRequest$inboundSchema;
  /** @deprecated use `Oauth2IntrospectTokenIntrospectTokenRequest$outboundSchema` instead. */
  export const outboundSchema =
    Oauth2IntrospectTokenIntrospectTokenRequest$outboundSchema;
  /** @deprecated use `Oauth2IntrospectTokenIntrospectTokenRequest$Outbound` instead. */
  export type Outbound = Oauth2IntrospectTokenIntrospectTokenRequest$Outbound;
}

export function oauth2IntrospectTokenIntrospectTokenRequestToJSON(
  oauth2IntrospectTokenIntrospectTokenRequest:
    Oauth2IntrospectTokenIntrospectTokenRequest,
): string {
  return JSON.stringify(
    Oauth2IntrospectTokenIntrospectTokenRequest$outboundSchema.parse(
      oauth2IntrospectTokenIntrospectTokenRequest,
    ),
  );
}

export function oauth2IntrospectTokenIntrospectTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  Oauth2IntrospectTokenIntrospectTokenRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      Oauth2IntrospectTokenIntrospectTokenRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'Oauth2IntrospectTokenIntrospectTokenRequest' from JSON`,
  );
}
