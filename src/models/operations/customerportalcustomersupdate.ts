/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerPortalCustomersUpdateSecurity = {
  customerSession: string;
};

/** @internal */
export const CustomerPortalCustomersUpdateSecurity$inboundSchema: z.ZodType<
  CustomerPortalCustomersUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_session: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_session": "customerSession",
  });
});

/** @internal */
export type CustomerPortalCustomersUpdateSecurity$Outbound = {
  customer_session: string;
};

/** @internal */
export const CustomerPortalCustomersUpdateSecurity$outboundSchema: z.ZodType<
  CustomerPortalCustomersUpdateSecurity$Outbound,
  z.ZodTypeDef,
  CustomerPortalCustomersUpdateSecurity
> = z.object({
  customerSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerSession: "customer_session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalCustomersUpdateSecurity$ {
  /** @deprecated use `CustomerPortalCustomersUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalCustomersUpdateSecurity$inboundSchema;
  /** @deprecated use `CustomerPortalCustomersUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalCustomersUpdateSecurity$outboundSchema;
  /** @deprecated use `CustomerPortalCustomersUpdateSecurity$Outbound` instead. */
  export type Outbound = CustomerPortalCustomersUpdateSecurity$Outbound;
}

export function customerPortalCustomersUpdateSecurityToJSON(
  customerPortalCustomersUpdateSecurity: CustomerPortalCustomersUpdateSecurity,
): string {
  return JSON.stringify(
    CustomerPortalCustomersUpdateSecurity$outboundSchema.parse(
      customerPortalCustomersUpdateSecurity,
    ),
  );
}

export function customerPortalCustomersUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CustomerPortalCustomersUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalCustomersUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerPortalCustomersUpdateSecurity' from JSON`,
  );
}
