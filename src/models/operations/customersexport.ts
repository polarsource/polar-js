/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by organization ID.
 */
export type CustomersExportQueryParamOrganizationId = string | Array<string>;

export type CustomersExportRequest = {
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
};

/** @internal */
export const CustomersExportQueryParamOrganizationId$inboundSchema: z.ZodType<
  CustomersExportQueryParamOrganizationId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type CustomersExportQueryParamOrganizationId$Outbound =
  | string
  | Array<string>;

/** @internal */
export const CustomersExportQueryParamOrganizationId$outboundSchema: z.ZodType<
  CustomersExportQueryParamOrganizationId$Outbound,
  z.ZodTypeDef,
  CustomersExportQueryParamOrganizationId
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersExportQueryParamOrganizationId$ {
  /** @deprecated use `CustomersExportQueryParamOrganizationId$inboundSchema` instead. */
  export const inboundSchema =
    CustomersExportQueryParamOrganizationId$inboundSchema;
  /** @deprecated use `CustomersExportQueryParamOrganizationId$outboundSchema` instead. */
  export const outboundSchema =
    CustomersExportQueryParamOrganizationId$outboundSchema;
  /** @deprecated use `CustomersExportQueryParamOrganizationId$Outbound` instead. */
  export type Outbound = CustomersExportQueryParamOrganizationId$Outbound;
}

export function customersExportQueryParamOrganizationIdToJSON(
  customersExportQueryParamOrganizationId:
    CustomersExportQueryParamOrganizationId,
): string {
  return JSON.stringify(
    CustomersExportQueryParamOrganizationId$outboundSchema.parse(
      customersExportQueryParamOrganizationId,
    ),
  );
}

export function customersExportQueryParamOrganizationIdFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomersExportQueryParamOrganizationId,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomersExportQueryParamOrganizationId$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomersExportQueryParamOrganizationId' from JSON`,
  );
}

/** @internal */
export const CustomersExportRequest$inboundSchema: z.ZodType<
  CustomersExportRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
  });
});

/** @internal */
export type CustomersExportRequest$Outbound = {
  organization_id?: string | Array<string> | null | undefined;
};

/** @internal */
export const CustomersExportRequest$outboundSchema: z.ZodType<
  CustomersExportRequest$Outbound,
  z.ZodTypeDef,
  CustomersExportRequest
> = z.object({
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersExportRequest$ {
  /** @deprecated use `CustomersExportRequest$inboundSchema` instead. */
  export const inboundSchema = CustomersExportRequest$inboundSchema;
  /** @deprecated use `CustomersExportRequest$outboundSchema` instead. */
  export const outboundSchema = CustomersExportRequest$outboundSchema;
  /** @deprecated use `CustomersExportRequest$Outbound` instead. */
  export type Outbound = CustomersExportRequest$Outbound;
}

export function customersExportRequestToJSON(
  customersExportRequest: CustomersExportRequest,
): string {
  return JSON.stringify(
    CustomersExportRequest$outboundSchema.parse(customersExportRequest),
  );
}

export function customersExportRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomersExportRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomersExportRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomersExportRequest' from JSON`,
  );
}
