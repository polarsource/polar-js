/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import {
  ProductPriceType,
  ProductPriceType$inboundSchema,
  ProductPriceType$outboundSchema,
} from "../components/productpricetype.js";
import {
  TimeInterval,
  TimeInterval$inboundSchema,
  TimeInterval$outboundSchema,
} from "../components/timeinterval.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by organization ID.
 */
export type MetricsGetQueryParamOrganizationIDFilter = string | Array<string>;

/**
 * Filter by product ID.
 */
export type MetricsGetQueryParamProductIDFilter = string | Array<string>;

/**
 * Filter by product price type. `recurring` will filter data corresponding to subscriptions creations or renewals. `one_time` will filter data corresponding to one-time purchases.
 */
export type QueryParamProductPriceTypeFilter =
  | ProductPriceType
  | Array<ProductPriceType>;

/**
 * Filter by customer ID.
 */
export type MetricsGetQueryParamCustomerIDFilter = string | Array<string>;

export type MetricsGetRequest = {
  /**
   * Start date.
   */
  startDate: RFCDate;
  /**
   * End date.
   */
  endDate: RFCDate;
  /**
   * Interval between two timestamps.
   */
  interval: TimeInterval;
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
  /**
   * Filter by product ID.
   */
  productId?: string | Array<string> | null | undefined;
  /**
   * Filter by product price type. `recurring` will filter data corresponding to subscriptions creations or renewals. `one_time` will filter data corresponding to one-time purchases.
   */
  productPriceType?:
    | ProductPriceType
    | Array<ProductPriceType>
    | null
    | undefined;
  /**
   * Filter by customer ID.
   */
  customerId?: string | Array<string> | null | undefined;
};

/** @internal */
export const MetricsGetQueryParamOrganizationIDFilter$inboundSchema: z.ZodType<
  MetricsGetQueryParamOrganizationIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type MetricsGetQueryParamOrganizationIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const MetricsGetQueryParamOrganizationIDFilter$outboundSchema: z.ZodType<
  MetricsGetQueryParamOrganizationIDFilter$Outbound,
  z.ZodTypeDef,
  MetricsGetQueryParamOrganizationIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsGetQueryParamOrganizationIDFilter$ {
  /** @deprecated use `MetricsGetQueryParamOrganizationIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    MetricsGetQueryParamOrganizationIDFilter$inboundSchema;
  /** @deprecated use `MetricsGetQueryParamOrganizationIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    MetricsGetQueryParamOrganizationIDFilter$outboundSchema;
  /** @deprecated use `MetricsGetQueryParamOrganizationIDFilter$Outbound` instead. */
  export type Outbound = MetricsGetQueryParamOrganizationIDFilter$Outbound;
}

export function metricsGetQueryParamOrganizationIDFilterToJSON(
  metricsGetQueryParamOrganizationIDFilter:
    MetricsGetQueryParamOrganizationIDFilter,
): string {
  return JSON.stringify(
    MetricsGetQueryParamOrganizationIDFilter$outboundSchema.parse(
      metricsGetQueryParamOrganizationIDFilter,
    ),
  );
}

export function metricsGetQueryParamOrganizationIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  MetricsGetQueryParamOrganizationIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsGetQueryParamOrganizationIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MetricsGetQueryParamOrganizationIDFilter' from JSON`,
  );
}

/** @internal */
export const MetricsGetQueryParamProductIDFilter$inboundSchema: z.ZodType<
  MetricsGetQueryParamProductIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type MetricsGetQueryParamProductIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const MetricsGetQueryParamProductIDFilter$outboundSchema: z.ZodType<
  MetricsGetQueryParamProductIDFilter$Outbound,
  z.ZodTypeDef,
  MetricsGetQueryParamProductIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsGetQueryParamProductIDFilter$ {
  /** @deprecated use `MetricsGetQueryParamProductIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    MetricsGetQueryParamProductIDFilter$inboundSchema;
  /** @deprecated use `MetricsGetQueryParamProductIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    MetricsGetQueryParamProductIDFilter$outboundSchema;
  /** @deprecated use `MetricsGetQueryParamProductIDFilter$Outbound` instead. */
  export type Outbound = MetricsGetQueryParamProductIDFilter$Outbound;
}

export function metricsGetQueryParamProductIDFilterToJSON(
  metricsGetQueryParamProductIDFilter: MetricsGetQueryParamProductIDFilter,
): string {
  return JSON.stringify(
    MetricsGetQueryParamProductIDFilter$outboundSchema.parse(
      metricsGetQueryParamProductIDFilter,
    ),
  );
}

export function metricsGetQueryParamProductIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<MetricsGetQueryParamProductIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsGetQueryParamProductIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsGetQueryParamProductIDFilter' from JSON`,
  );
}

/** @internal */
export const QueryParamProductPriceTypeFilter$inboundSchema: z.ZodType<
  QueryParamProductPriceTypeFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  ProductPriceType$inboundSchema,
  z.array(ProductPriceType$inboundSchema),
]);

/** @internal */
export type QueryParamProductPriceTypeFilter$Outbound = string | Array<string>;

/** @internal */
export const QueryParamProductPriceTypeFilter$outboundSchema: z.ZodType<
  QueryParamProductPriceTypeFilter$Outbound,
  z.ZodTypeDef,
  QueryParamProductPriceTypeFilter
> = z.union([
  ProductPriceType$outboundSchema,
  z.array(ProductPriceType$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamProductPriceTypeFilter$ {
  /** @deprecated use `QueryParamProductPriceTypeFilter$inboundSchema` instead. */
  export const inboundSchema = QueryParamProductPriceTypeFilter$inboundSchema;
  /** @deprecated use `QueryParamProductPriceTypeFilter$outboundSchema` instead. */
  export const outboundSchema = QueryParamProductPriceTypeFilter$outboundSchema;
  /** @deprecated use `QueryParamProductPriceTypeFilter$Outbound` instead. */
  export type Outbound = QueryParamProductPriceTypeFilter$Outbound;
}

export function queryParamProductPriceTypeFilterToJSON(
  queryParamProductPriceTypeFilter: QueryParamProductPriceTypeFilter,
): string {
  return JSON.stringify(
    QueryParamProductPriceTypeFilter$outboundSchema.parse(
      queryParamProductPriceTypeFilter,
    ),
  );
}

export function queryParamProductPriceTypeFilterFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamProductPriceTypeFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamProductPriceTypeFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamProductPriceTypeFilter' from JSON`,
  );
}

/** @internal */
export const MetricsGetQueryParamCustomerIDFilter$inboundSchema: z.ZodType<
  MetricsGetQueryParamCustomerIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type MetricsGetQueryParamCustomerIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const MetricsGetQueryParamCustomerIDFilter$outboundSchema: z.ZodType<
  MetricsGetQueryParamCustomerIDFilter$Outbound,
  z.ZodTypeDef,
  MetricsGetQueryParamCustomerIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsGetQueryParamCustomerIDFilter$ {
  /** @deprecated use `MetricsGetQueryParamCustomerIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    MetricsGetQueryParamCustomerIDFilter$inboundSchema;
  /** @deprecated use `MetricsGetQueryParamCustomerIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    MetricsGetQueryParamCustomerIDFilter$outboundSchema;
  /** @deprecated use `MetricsGetQueryParamCustomerIDFilter$Outbound` instead. */
  export type Outbound = MetricsGetQueryParamCustomerIDFilter$Outbound;
}

export function metricsGetQueryParamCustomerIDFilterToJSON(
  metricsGetQueryParamCustomerIDFilter: MetricsGetQueryParamCustomerIDFilter,
): string {
  return JSON.stringify(
    MetricsGetQueryParamCustomerIDFilter$outboundSchema.parse(
      metricsGetQueryParamCustomerIDFilter,
    ),
  );
}

export function metricsGetQueryParamCustomerIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<MetricsGetQueryParamCustomerIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsGetQueryParamCustomerIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsGetQueryParamCustomerIDFilter' from JSON`,
  );
}

/** @internal */
export const MetricsGetRequest$inboundSchema: z.ZodType<
  MetricsGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date: z.string().transform(v => new RFCDate(v)),
  end_date: z.string().transform(v => new RFCDate(v)),
  interval: TimeInterval$inboundSchema,
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  product_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  product_price_type: z.nullable(
    z.union([
      ProductPriceType$inboundSchema,
      z.array(ProductPriceType$inboundSchema),
    ]),
  ).optional(),
  customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
    "organization_id": "organizationId",
    "product_id": "productId",
    "product_price_type": "productPriceType",
    "customer_id": "customerId",
  });
});

/** @internal */
export type MetricsGetRequest$Outbound = {
  start_date: string;
  end_date: string;
  interval: string;
  organization_id?: string | Array<string> | null | undefined;
  product_id?: string | Array<string> | null | undefined;
  product_price_type?: string | Array<string> | null | undefined;
  customer_id?: string | Array<string> | null | undefined;
};

/** @internal */
export const MetricsGetRequest$outboundSchema: z.ZodType<
  MetricsGetRequest$Outbound,
  z.ZodTypeDef,
  MetricsGetRequest
> = z.object({
  startDate: z.instanceof(RFCDate).transform(v => v.toString()),
  endDate: z.instanceof(RFCDate).transform(v => v.toString()),
  interval: TimeInterval$outboundSchema,
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  productId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  productPriceType: z.nullable(
    z.union([
      ProductPriceType$outboundSchema,
      z.array(ProductPriceType$outboundSchema),
    ]),
  ).optional(),
  customerId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
    organizationId: "organization_id",
    productId: "product_id",
    productPriceType: "product_price_type",
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsGetRequest$ {
  /** @deprecated use `MetricsGetRequest$inboundSchema` instead. */
  export const inboundSchema = MetricsGetRequest$inboundSchema;
  /** @deprecated use `MetricsGetRequest$outboundSchema` instead. */
  export const outboundSchema = MetricsGetRequest$outboundSchema;
  /** @deprecated use `MetricsGetRequest$Outbound` instead. */
  export type Outbound = MetricsGetRequest$Outbound;
}

export function metricsGetRequestToJSON(
  metricsGetRequest: MetricsGetRequest,
): string {
  return JSON.stringify(
    MetricsGetRequest$outboundSchema.parse(metricsGetRequest),
  );
}

export function metricsGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<MetricsGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricsGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsGetRequest' from JSON`,
  );
}
