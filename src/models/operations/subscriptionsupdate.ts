/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  SubscriptionUpdate,
  SubscriptionUpdate$inboundSchema,
  SubscriptionUpdate$Outbound,
  SubscriptionUpdate$outboundSchema,
} from "../components/subscriptionupdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscriptionsUpdateRequest = {
  /**
   * The subscription ID.
   */
  id: string;
  subscriptionUpdate: SubscriptionUpdate;
};

/** @internal */
export const SubscriptionsUpdateRequest$inboundSchema: z.ZodType<
  SubscriptionsUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  SubscriptionUpdate: SubscriptionUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "SubscriptionUpdate": "subscriptionUpdate",
  });
});

/** @internal */
export type SubscriptionsUpdateRequest$Outbound = {
  id: string;
  SubscriptionUpdate: SubscriptionUpdate$Outbound;
};

/** @internal */
export const SubscriptionsUpdateRequest$outboundSchema: z.ZodType<
  SubscriptionsUpdateRequest$Outbound,
  z.ZodTypeDef,
  SubscriptionsUpdateRequest
> = z.object({
  id: z.string(),
  subscriptionUpdate: SubscriptionUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    subscriptionUpdate: "SubscriptionUpdate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionsUpdateRequest$ {
  /** @deprecated use `SubscriptionsUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = SubscriptionsUpdateRequest$inboundSchema;
  /** @deprecated use `SubscriptionsUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = SubscriptionsUpdateRequest$outboundSchema;
  /** @deprecated use `SubscriptionsUpdateRequest$Outbound` instead. */
  export type Outbound = SubscriptionsUpdateRequest$Outbound;
}

export function subscriptionsUpdateRequestToJSON(
  subscriptionsUpdateRequest: SubscriptionsUpdateRequest,
): string {
  return JSON.stringify(
    SubscriptionsUpdateRequest$outboundSchema.parse(subscriptionsUpdateRequest),
  );
}

export function subscriptionsUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionsUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionsUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionsUpdateRequest' from JSON`,
  );
}
