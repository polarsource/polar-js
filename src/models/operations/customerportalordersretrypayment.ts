/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerPortalOrdersRetryPaymentSecurity = {
  customerSession: string;
};

export type CustomerPortalOrdersRetryPaymentRequest = {
  /**
   * The order ID.
   */
  id: string;
};

/** @internal */
export const CustomerPortalOrdersRetryPaymentSecurity$inboundSchema: z.ZodType<
  CustomerPortalOrdersRetryPaymentSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_session: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_session": "customerSession",
  });
});

/** @internal */
export type CustomerPortalOrdersRetryPaymentSecurity$Outbound = {
  customer_session: string;
};

/** @internal */
export const CustomerPortalOrdersRetryPaymentSecurity$outboundSchema: z.ZodType<
  CustomerPortalOrdersRetryPaymentSecurity$Outbound,
  z.ZodTypeDef,
  CustomerPortalOrdersRetryPaymentSecurity
> = z.object({
  customerSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerSession: "customer_session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalOrdersRetryPaymentSecurity$ {
  /** @deprecated use `CustomerPortalOrdersRetryPaymentSecurity$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalOrdersRetryPaymentSecurity$inboundSchema;
  /** @deprecated use `CustomerPortalOrdersRetryPaymentSecurity$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalOrdersRetryPaymentSecurity$outboundSchema;
  /** @deprecated use `CustomerPortalOrdersRetryPaymentSecurity$Outbound` instead. */
  export type Outbound = CustomerPortalOrdersRetryPaymentSecurity$Outbound;
}

export function customerPortalOrdersRetryPaymentSecurityToJSON(
  customerPortalOrdersRetryPaymentSecurity:
    CustomerPortalOrdersRetryPaymentSecurity,
): string {
  return JSON.stringify(
    CustomerPortalOrdersRetryPaymentSecurity$outboundSchema.parse(
      customerPortalOrdersRetryPaymentSecurity,
    ),
  );
}

export function customerPortalOrdersRetryPaymentSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerPortalOrdersRetryPaymentSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalOrdersRetryPaymentSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomerPortalOrdersRetryPaymentSecurity' from JSON`,
  );
}

/** @internal */
export const CustomerPortalOrdersRetryPaymentRequest$inboundSchema: z.ZodType<
  CustomerPortalOrdersRetryPaymentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CustomerPortalOrdersRetryPaymentRequest$Outbound = {
  id: string;
};

/** @internal */
export const CustomerPortalOrdersRetryPaymentRequest$outboundSchema: z.ZodType<
  CustomerPortalOrdersRetryPaymentRequest$Outbound,
  z.ZodTypeDef,
  CustomerPortalOrdersRetryPaymentRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalOrdersRetryPaymentRequest$ {
  /** @deprecated use `CustomerPortalOrdersRetryPaymentRequest$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalOrdersRetryPaymentRequest$inboundSchema;
  /** @deprecated use `CustomerPortalOrdersRetryPaymentRequest$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalOrdersRetryPaymentRequest$outboundSchema;
  /** @deprecated use `CustomerPortalOrdersRetryPaymentRequest$Outbound` instead. */
  export type Outbound = CustomerPortalOrdersRetryPaymentRequest$Outbound;
}

export function customerPortalOrdersRetryPaymentRequestToJSON(
  customerPortalOrdersRetryPaymentRequest:
    CustomerPortalOrdersRetryPaymentRequest,
): string {
  return JSON.stringify(
    CustomerPortalOrdersRetryPaymentRequest$outboundSchema.parse(
      customerPortalOrdersRetryPaymentRequest,
    ),
  );
}

export function customerPortalOrdersRetryPaymentRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerPortalOrdersRetryPaymentRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalOrdersRetryPaymentRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomerPortalOrdersRetryPaymentRequest' from JSON`,
  );
}
