/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  CustomerUpdate,
  CustomerUpdate$inboundSchema,
  CustomerUpdate$Outbound,
  CustomerUpdate$outboundSchema,
} from "../components/customerupdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomersUpdateExternalRequest = {
  /**
   * The customer external ID.
   */
  externalId: string;
  customerUpdate: CustomerUpdate;
};

/** @internal */
export const CustomersUpdateExternalRequest$inboundSchema: z.ZodType<
  CustomersUpdateExternalRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.string(),
  CustomerUpdate: CustomerUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
    "CustomerUpdate": "customerUpdate",
  });
});

/** @internal */
export type CustomersUpdateExternalRequest$Outbound = {
  external_id: string;
  CustomerUpdate: CustomerUpdate$Outbound;
};

/** @internal */
export const CustomersUpdateExternalRequest$outboundSchema: z.ZodType<
  CustomersUpdateExternalRequest$Outbound,
  z.ZodTypeDef,
  CustomersUpdateExternalRequest
> = z.object({
  externalId: z.string(),
  customerUpdate: CustomerUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
    customerUpdate: "CustomerUpdate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersUpdateExternalRequest$ {
  /** @deprecated use `CustomersUpdateExternalRequest$inboundSchema` instead. */
  export const inboundSchema = CustomersUpdateExternalRequest$inboundSchema;
  /** @deprecated use `CustomersUpdateExternalRequest$outboundSchema` instead. */
  export const outboundSchema = CustomersUpdateExternalRequest$outboundSchema;
  /** @deprecated use `CustomersUpdateExternalRequest$Outbound` instead. */
  export type Outbound = CustomersUpdateExternalRequest$Outbound;
}

export function customersUpdateExternalRequestToJSON(
  customersUpdateExternalRequest: CustomersUpdateExternalRequest,
): string {
  return JSON.stringify(
    CustomersUpdateExternalRequest$outboundSchema.parse(
      customersUpdateExternalRequest,
    ),
  );
}

export function customersUpdateExternalRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomersUpdateExternalRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomersUpdateExternalRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomersUpdateExternalRequest' from JSON`,
  );
}
