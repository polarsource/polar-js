/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  CustomerMeterSortProperty,
  CustomerMeterSortProperty$inboundSchema,
  CustomerMeterSortProperty$outboundSchema,
} from "../components/customermetersortproperty.js";
import {
  ListResourceCustomerMeter,
  ListResourceCustomerMeter$inboundSchema,
  ListResourceCustomerMeter$Outbound,
  ListResourceCustomerMeter$outboundSchema,
} from "../components/listresourcecustomermeter.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by organization ID.
 */
export type CustomerMetersListQueryParamOrganizationIDFilter =
  | string
  | Array<string>;

/**
 * Filter by customer ID.
 */
export type CustomerMetersListQueryParamCustomerIDFilter =
  | string
  | Array<string>;

/**
 * Filter by external customer ID.
 */
export type CustomerMetersListQueryParamExternalCustomerIDFilter =
  | string
  | Array<string>;

/**
 * Filter by meter ID.
 */
export type QueryParamMeterIDFilter = string | Array<string>;

export type CustomerMetersListRequest = {
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
  /**
   * Filter by customer ID.
   */
  customerId?: string | Array<string> | null | undefined;
  /**
   * Filter by external customer ID.
   */
  externalCustomerId?: string | Array<string> | null | undefined;
  /**
   * Filter by meter ID.
   */
  meterId?: string | Array<string> | null | undefined;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
  /**
   * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
   */
  sorting?: Array<CustomerMeterSortProperty> | null | undefined;
};

export type CustomerMetersListResponse = {
  result: ListResourceCustomerMeter;
};

/** @internal */
export const CustomerMetersListQueryParamOrganizationIDFilter$inboundSchema:
  z.ZodType<
    CustomerMetersListQueryParamOrganizationIDFilter,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type CustomerMetersListQueryParamOrganizationIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const CustomerMetersListQueryParamOrganizationIDFilter$outboundSchema:
  z.ZodType<
    CustomerMetersListQueryParamOrganizationIDFilter$Outbound,
    z.ZodTypeDef,
    CustomerMetersListQueryParamOrganizationIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerMetersListQueryParamOrganizationIDFilter$ {
  /** @deprecated use `CustomerMetersListQueryParamOrganizationIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    CustomerMetersListQueryParamOrganizationIDFilter$inboundSchema;
  /** @deprecated use `CustomerMetersListQueryParamOrganizationIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    CustomerMetersListQueryParamOrganizationIDFilter$outboundSchema;
  /** @deprecated use `CustomerMetersListQueryParamOrganizationIDFilter$Outbound` instead. */
  export type Outbound =
    CustomerMetersListQueryParamOrganizationIDFilter$Outbound;
}

export function customerMetersListQueryParamOrganizationIDFilterToJSON(
  customerMetersListQueryParamOrganizationIDFilter:
    CustomerMetersListQueryParamOrganizationIDFilter,
): string {
  return JSON.stringify(
    CustomerMetersListQueryParamOrganizationIDFilter$outboundSchema.parse(
      customerMetersListQueryParamOrganizationIDFilter,
    ),
  );
}

export function customerMetersListQueryParamOrganizationIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerMetersListQueryParamOrganizationIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerMetersListQueryParamOrganizationIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomerMetersListQueryParamOrganizationIDFilter' from JSON`,
  );
}

/** @internal */
export const CustomerMetersListQueryParamCustomerIDFilter$inboundSchema:
  z.ZodType<
    CustomerMetersListQueryParamCustomerIDFilter,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type CustomerMetersListQueryParamCustomerIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const CustomerMetersListQueryParamCustomerIDFilter$outboundSchema:
  z.ZodType<
    CustomerMetersListQueryParamCustomerIDFilter$Outbound,
    z.ZodTypeDef,
    CustomerMetersListQueryParamCustomerIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerMetersListQueryParamCustomerIDFilter$ {
  /** @deprecated use `CustomerMetersListQueryParamCustomerIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    CustomerMetersListQueryParamCustomerIDFilter$inboundSchema;
  /** @deprecated use `CustomerMetersListQueryParamCustomerIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    CustomerMetersListQueryParamCustomerIDFilter$outboundSchema;
  /** @deprecated use `CustomerMetersListQueryParamCustomerIDFilter$Outbound` instead. */
  export type Outbound = CustomerMetersListQueryParamCustomerIDFilter$Outbound;
}

export function customerMetersListQueryParamCustomerIDFilterToJSON(
  customerMetersListQueryParamCustomerIDFilter:
    CustomerMetersListQueryParamCustomerIDFilter,
): string {
  return JSON.stringify(
    CustomerMetersListQueryParamCustomerIDFilter$outboundSchema.parse(
      customerMetersListQueryParamCustomerIDFilter,
    ),
  );
}

export function customerMetersListQueryParamCustomerIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerMetersListQueryParamCustomerIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerMetersListQueryParamCustomerIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomerMetersListQueryParamCustomerIDFilter' from JSON`,
  );
}

/** @internal */
export const CustomerMetersListQueryParamExternalCustomerIDFilter$inboundSchema:
  z.ZodType<
    CustomerMetersListQueryParamExternalCustomerIDFilter,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type CustomerMetersListQueryParamExternalCustomerIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const CustomerMetersListQueryParamExternalCustomerIDFilter$outboundSchema:
  z.ZodType<
    CustomerMetersListQueryParamExternalCustomerIDFilter$Outbound,
    z.ZodTypeDef,
    CustomerMetersListQueryParamExternalCustomerIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerMetersListQueryParamExternalCustomerIDFilter$ {
  /** @deprecated use `CustomerMetersListQueryParamExternalCustomerIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    CustomerMetersListQueryParamExternalCustomerIDFilter$inboundSchema;
  /** @deprecated use `CustomerMetersListQueryParamExternalCustomerIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    CustomerMetersListQueryParamExternalCustomerIDFilter$outboundSchema;
  /** @deprecated use `CustomerMetersListQueryParamExternalCustomerIDFilter$Outbound` instead. */
  export type Outbound =
    CustomerMetersListQueryParamExternalCustomerIDFilter$Outbound;
}

export function customerMetersListQueryParamExternalCustomerIDFilterToJSON(
  customerMetersListQueryParamExternalCustomerIDFilter:
    CustomerMetersListQueryParamExternalCustomerIDFilter,
): string {
  return JSON.stringify(
    CustomerMetersListQueryParamExternalCustomerIDFilter$outboundSchema.parse(
      customerMetersListQueryParamExternalCustomerIDFilter,
    ),
  );
}

export function customerMetersListQueryParamExternalCustomerIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerMetersListQueryParamExternalCustomerIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerMetersListQueryParamExternalCustomerIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomerMetersListQueryParamExternalCustomerIDFilter' from JSON`,
  );
}

/** @internal */
export const QueryParamMeterIDFilter$inboundSchema: z.ZodType<
  QueryParamMeterIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type QueryParamMeterIDFilter$Outbound = string | Array<string>;

/** @internal */
export const QueryParamMeterIDFilter$outboundSchema: z.ZodType<
  QueryParamMeterIDFilter$Outbound,
  z.ZodTypeDef,
  QueryParamMeterIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamMeterIDFilter$ {
  /** @deprecated use `QueryParamMeterIDFilter$inboundSchema` instead. */
  export const inboundSchema = QueryParamMeterIDFilter$inboundSchema;
  /** @deprecated use `QueryParamMeterIDFilter$outboundSchema` instead. */
  export const outboundSchema = QueryParamMeterIDFilter$outboundSchema;
  /** @deprecated use `QueryParamMeterIDFilter$Outbound` instead. */
  export type Outbound = QueryParamMeterIDFilter$Outbound;
}

export function queryParamMeterIDFilterToJSON(
  queryParamMeterIDFilter: QueryParamMeterIDFilter,
): string {
  return JSON.stringify(
    QueryParamMeterIDFilter$outboundSchema.parse(queryParamMeterIDFilter),
  );
}

export function queryParamMeterIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamMeterIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamMeterIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamMeterIDFilter' from JSON`,
  );
}

/** @internal */
export const CustomerMetersListRequest$inboundSchema: z.ZodType<
  CustomerMetersListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  external_customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  meter_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(CustomerMeterSortProperty$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "customer_id": "customerId",
    "external_customer_id": "externalCustomerId",
    "meter_id": "meterId",
  });
});

/** @internal */
export type CustomerMetersListRequest$Outbound = {
  organization_id?: string | Array<string> | null | undefined;
  customer_id?: string | Array<string> | null | undefined;
  external_customer_id?: string | Array<string> | null | undefined;
  meter_id?: string | Array<string> | null | undefined;
  page: number;
  limit: number;
  sorting?: Array<string> | null | undefined;
};

/** @internal */
export const CustomerMetersListRequest$outboundSchema: z.ZodType<
  CustomerMetersListRequest$Outbound,
  z.ZodTypeDef,
  CustomerMetersListRequest
> = z.object({
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  customerId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  externalCustomerId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  meterId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(CustomerMeterSortProperty$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    customerId: "customer_id",
    externalCustomerId: "external_customer_id",
    meterId: "meter_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerMetersListRequest$ {
  /** @deprecated use `CustomerMetersListRequest$inboundSchema` instead. */
  export const inboundSchema = CustomerMetersListRequest$inboundSchema;
  /** @deprecated use `CustomerMetersListRequest$outboundSchema` instead. */
  export const outboundSchema = CustomerMetersListRequest$outboundSchema;
  /** @deprecated use `CustomerMetersListRequest$Outbound` instead. */
  export type Outbound = CustomerMetersListRequest$Outbound;
}

export function customerMetersListRequestToJSON(
  customerMetersListRequest: CustomerMetersListRequest,
): string {
  return JSON.stringify(
    CustomerMetersListRequest$outboundSchema.parse(customerMetersListRequest),
  );
}

export function customerMetersListRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomerMetersListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerMetersListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerMetersListRequest' from JSON`,
  );
}

/** @internal */
export const CustomerMetersListResponse$inboundSchema: z.ZodType<
  CustomerMetersListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: ListResourceCustomerMeter$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type CustomerMetersListResponse$Outbound = {
  Result: ListResourceCustomerMeter$Outbound;
};

/** @internal */
export const CustomerMetersListResponse$outboundSchema: z.ZodType<
  CustomerMetersListResponse$Outbound,
  z.ZodTypeDef,
  CustomerMetersListResponse
> = z.object({
  result: ListResourceCustomerMeter$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerMetersListResponse$ {
  /** @deprecated use `CustomerMetersListResponse$inboundSchema` instead. */
  export const inboundSchema = CustomerMetersListResponse$inboundSchema;
  /** @deprecated use `CustomerMetersListResponse$outboundSchema` instead. */
  export const outboundSchema = CustomerMetersListResponse$outboundSchema;
  /** @deprecated use `CustomerMetersListResponse$Outbound` instead. */
  export type Outbound = CustomerMetersListResponse$Outbound;
}

export function customerMetersListResponseToJSON(
  customerMetersListResponse: CustomerMetersListResponse,
): string {
  return JSON.stringify(
    CustomerMetersListResponse$outboundSchema.parse(customerMetersListResponse),
  );
}

export function customerMetersListResponseFromJSON(
  jsonString: string,
): SafeParseResult<CustomerMetersListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerMetersListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerMetersListResponse' from JSON`,
  );
}
