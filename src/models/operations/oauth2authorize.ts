/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  AuthorizeResponseOrganization,
  AuthorizeResponseOrganization$inboundSchema,
  AuthorizeResponseOrganization$Outbound,
  AuthorizeResponseOrganization$outboundSchema,
} from "../components/authorizeresponseorganization.js";
import {
  AuthorizeResponseUser,
  AuthorizeResponseUser$inboundSchema,
  AuthorizeResponseUser$Outbound,
  AuthorizeResponseUser$outboundSchema,
} from "../components/authorizeresponseuser.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Successful Response
 */
export type Oauth2AuthorizeResponseOauth2Authorize =
  | (AuthorizeResponseUser & { subType: "user" })
  | (AuthorizeResponseOrganization & { subType: "organization" });

/** @internal */
export const Oauth2AuthorizeResponseOauth2Authorize$inboundSchema: z.ZodType<
  Oauth2AuthorizeResponseOauth2Authorize,
  z.ZodTypeDef,
  unknown
> = z.union([
  AuthorizeResponseUser$inboundSchema.and(
    z.object({ sub_type: z.literal("user") }).transform((v) => ({
      subType: v.sub_type,
    })),
  ),
  AuthorizeResponseOrganization$inboundSchema.and(
    z.object({ sub_type: z.literal("organization") }).transform((v) => ({
      subType: v.sub_type,
    })),
  ),
]);

/** @internal */
export type Oauth2AuthorizeResponseOauth2Authorize$Outbound =
  | (AuthorizeResponseUser$Outbound & { sub_type: "user" })
  | (AuthorizeResponseOrganization$Outbound & { sub_type: "organization" });

/** @internal */
export const Oauth2AuthorizeResponseOauth2Authorize$outboundSchema: z.ZodType<
  Oauth2AuthorizeResponseOauth2Authorize$Outbound,
  z.ZodTypeDef,
  Oauth2AuthorizeResponseOauth2Authorize
> = z.union([
  AuthorizeResponseUser$outboundSchema.and(
    z.object({ subType: z.literal("user") }).transform((v) => ({
      sub_type: v.subType,
    })),
  ),
  AuthorizeResponseOrganization$outboundSchema.and(
    z.object({ subType: z.literal("organization") }).transform((v) => ({
      sub_type: v.subType,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Oauth2AuthorizeResponseOauth2Authorize$ {
  /** @deprecated use `Oauth2AuthorizeResponseOauth2Authorize$inboundSchema` instead. */
  export const inboundSchema =
    Oauth2AuthorizeResponseOauth2Authorize$inboundSchema;
  /** @deprecated use `Oauth2AuthorizeResponseOauth2Authorize$outboundSchema` instead. */
  export const outboundSchema =
    Oauth2AuthorizeResponseOauth2Authorize$outboundSchema;
  /** @deprecated use `Oauth2AuthorizeResponseOauth2Authorize$Outbound` instead. */
  export type Outbound = Oauth2AuthorizeResponseOauth2Authorize$Outbound;
}

export function oauth2AuthorizeResponseOauth2AuthorizeToJSON(
  oauth2AuthorizeResponseOauth2Authorize:
    Oauth2AuthorizeResponseOauth2Authorize,
): string {
  return JSON.stringify(
    Oauth2AuthorizeResponseOauth2Authorize$outboundSchema.parse(
      oauth2AuthorizeResponseOauth2Authorize,
    ),
  );
}

export function oauth2AuthorizeResponseOauth2AuthorizeFromJSON(
  jsonString: string,
): SafeParseResult<Oauth2AuthorizeResponseOauth2Authorize, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      Oauth2AuthorizeResponseOauth2Authorize$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Oauth2AuthorizeResponseOauth2Authorize' from JSON`,
  );
}
