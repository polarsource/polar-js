/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomersGetRequest = {
  /**
   * The customer ID.
   */
  id: string;
};

/** @internal */
export const CustomersGetRequest$inboundSchema: z.ZodType<
  CustomersGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CustomersGetRequest$Outbound = {
  id: string;
};

/** @internal */
export const CustomersGetRequest$outboundSchema: z.ZodType<
  CustomersGetRequest$Outbound,
  z.ZodTypeDef,
  CustomersGetRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersGetRequest$ {
  /** @deprecated use `CustomersGetRequest$inboundSchema` instead. */
  export const inboundSchema = CustomersGetRequest$inboundSchema;
  /** @deprecated use `CustomersGetRequest$outboundSchema` instead. */
  export const outboundSchema = CustomersGetRequest$outboundSchema;
  /** @deprecated use `CustomersGetRequest$Outbound` instead. */
  export type Outbound = CustomersGetRequest$Outbound;
}

export function customersGetRequestToJSON(
  customersGetRequest: CustomersGetRequest,
): string {
  return JSON.stringify(
    CustomersGetRequest$outboundSchema.parse(customersGetRequest),
  );
}

export function customersGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomersGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomersGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomersGetRequest' from JSON`,
  );
}
