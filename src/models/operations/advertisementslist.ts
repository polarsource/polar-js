/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AdvertisementsListRequest = {
  benefitId: string;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
  /**
   * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
   */
  sorting?: Array<components.AdvertisementSortProperty> | null | undefined;
};

export type AdvertisementsListResponse = {
  result: components.AdvertisementCampaignListResource;
};

/** @internal */
export const AdvertisementsListRequest$inboundSchema: z.ZodType<
  AdvertisementsListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  benefit_id: z.string(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(
    z.array(components.AdvertisementSortProperty$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "benefit_id": "benefitId",
  });
});

/** @internal */
export type AdvertisementsListRequest$Outbound = {
  benefit_id: string;
  page: number;
  limit: number;
  sorting?: Array<string> | null | undefined;
};

/** @internal */
export const AdvertisementsListRequest$outboundSchema: z.ZodType<
  AdvertisementsListRequest$Outbound,
  z.ZodTypeDef,
  AdvertisementsListRequest
> = z.object({
  benefitId: z.string(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(
    z.array(components.AdvertisementSortProperty$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    benefitId: "benefit_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdvertisementsListRequest$ {
  /** @deprecated use `AdvertisementsListRequest$inboundSchema` instead. */
  export const inboundSchema = AdvertisementsListRequest$inboundSchema;
  /** @deprecated use `AdvertisementsListRequest$outboundSchema` instead. */
  export const outboundSchema = AdvertisementsListRequest$outboundSchema;
  /** @deprecated use `AdvertisementsListRequest$Outbound` instead. */
  export type Outbound = AdvertisementsListRequest$Outbound;
}

export function advertisementsListRequestToJSON(
  advertisementsListRequest: AdvertisementsListRequest,
): string {
  return JSON.stringify(
    AdvertisementsListRequest$outboundSchema.parse(advertisementsListRequest),
  );
}

export function advertisementsListRequestFromJSON(
  jsonString: string,
): SafeParseResult<AdvertisementsListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AdvertisementsListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AdvertisementsListRequest' from JSON`,
  );
}

/** @internal */
export const AdvertisementsListResponse$inboundSchema: z.ZodType<
  AdvertisementsListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.AdvertisementCampaignListResource$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type AdvertisementsListResponse$Outbound = {
  Result: components.AdvertisementCampaignListResource$Outbound;
};

/** @internal */
export const AdvertisementsListResponse$outboundSchema: z.ZodType<
  AdvertisementsListResponse$Outbound,
  z.ZodTypeDef,
  AdvertisementsListResponse
> = z.object({
  result: components.AdvertisementCampaignListResource$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdvertisementsListResponse$ {
  /** @deprecated use `AdvertisementsListResponse$inboundSchema` instead. */
  export const inboundSchema = AdvertisementsListResponse$inboundSchema;
  /** @deprecated use `AdvertisementsListResponse$outboundSchema` instead. */
  export const outboundSchema = AdvertisementsListResponse$outboundSchema;
  /** @deprecated use `AdvertisementsListResponse$Outbound` instead. */
  export type Outbound = AdvertisementsListResponse$Outbound;
}

export function advertisementsListResponseToJSON(
  advertisementsListResponse: AdvertisementsListResponse,
): string {
  return JSON.stringify(
    AdvertisementsListResponse$outboundSchema.parse(advertisementsListResponse),
  );
}

export function advertisementsListResponseFromJSON(
  jsonString: string,
): SafeParseResult<AdvertisementsListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AdvertisementsListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AdvertisementsListResponse' from JSON`,
  );
}
