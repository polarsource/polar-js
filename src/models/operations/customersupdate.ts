/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomersUpdateRequest = {
  /**
   * The customer ID.
   */
  id: string;
  customerUpdate: components.CustomerUpdate;
};

/** @internal */
export const CustomersUpdateRequest$inboundSchema: z.ZodType<
  CustomersUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  CustomerUpdate: components.CustomerUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CustomerUpdate": "customerUpdate",
  });
});

/** @internal */
export type CustomersUpdateRequest$Outbound = {
  id: string;
  CustomerUpdate: components.CustomerUpdate$Outbound;
};

/** @internal */
export const CustomersUpdateRequest$outboundSchema: z.ZodType<
  CustomersUpdateRequest$Outbound,
  z.ZodTypeDef,
  CustomersUpdateRequest
> = z.object({
  id: z.string(),
  customerUpdate: components.CustomerUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    customerUpdate: "CustomerUpdate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersUpdateRequest$ {
  /** @deprecated use `CustomersUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = CustomersUpdateRequest$inboundSchema;
  /** @deprecated use `CustomersUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = CustomersUpdateRequest$outboundSchema;
  /** @deprecated use `CustomersUpdateRequest$Outbound` instead. */
  export type Outbound = CustomersUpdateRequest$Outbound;
}

export function customersUpdateRequestToJSON(
  customersUpdateRequest: CustomersUpdateRequest,
): string {
  return JSON.stringify(
    CustomersUpdateRequest$outboundSchema.parse(customersUpdateRequest),
  );
}

export function customersUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomersUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomersUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomersUpdateRequest' from JSON`,
  );
}
