/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  BenefitGrantSortProperty,
  BenefitGrantSortProperty$inboundSchema,
  BenefitGrantSortProperty$outboundSchema,
} from "../components/benefitgrantsortproperty.js";
import {
  ListResourceBenefitGrant,
  ListResourceBenefitGrant$inboundSchema,
  ListResourceBenefitGrant$Outbound,
  ListResourceBenefitGrant$outboundSchema,
} from "../components/listresourcebenefitgrant.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by organization ID.
 */
export type BenefitGrantsListQueryParamOrganizationIDFilter =
  | string
  | Array<string>;

/**
 * Filter by customer ID.
 */
export type BenefitGrantsListQueryParamCustomerIDFilter =
  | string
  | Array<string>;

export type BenefitGrantsListRequest = {
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
  /**
   * Filter by customer ID.
   */
  customerId?: string | Array<string> | null | undefined;
  /**
   * Filter by granted status. If `true`, only granted benefits will be returned. If `false`, only revoked benefits will be returned.
   */
  isGranted?: boolean | null | undefined;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
  /**
   * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
   */
  sorting?: Array<BenefitGrantSortProperty> | null | undefined;
};

export type BenefitGrantsListResponse = {
  result: ListResourceBenefitGrant;
};

/** @internal */
export const BenefitGrantsListQueryParamOrganizationIDFilter$inboundSchema:
  z.ZodType<
    BenefitGrantsListQueryParamOrganizationIDFilter,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type BenefitGrantsListQueryParamOrganizationIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const BenefitGrantsListQueryParamOrganizationIDFilter$outboundSchema:
  z.ZodType<
    BenefitGrantsListQueryParamOrganizationIDFilter$Outbound,
    z.ZodTypeDef,
    BenefitGrantsListQueryParamOrganizationIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitGrantsListQueryParamOrganizationIDFilter$ {
  /** @deprecated use `BenefitGrantsListQueryParamOrganizationIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    BenefitGrantsListQueryParamOrganizationIDFilter$inboundSchema;
  /** @deprecated use `BenefitGrantsListQueryParamOrganizationIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    BenefitGrantsListQueryParamOrganizationIDFilter$outboundSchema;
  /** @deprecated use `BenefitGrantsListQueryParamOrganizationIDFilter$Outbound` instead. */
  export type Outbound =
    BenefitGrantsListQueryParamOrganizationIDFilter$Outbound;
}

export function benefitGrantsListQueryParamOrganizationIDFilterToJSON(
  benefitGrantsListQueryParamOrganizationIDFilter:
    BenefitGrantsListQueryParamOrganizationIDFilter,
): string {
  return JSON.stringify(
    BenefitGrantsListQueryParamOrganizationIDFilter$outboundSchema.parse(
      benefitGrantsListQueryParamOrganizationIDFilter,
    ),
  );
}

export function benefitGrantsListQueryParamOrganizationIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  BenefitGrantsListQueryParamOrganizationIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BenefitGrantsListQueryParamOrganizationIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BenefitGrantsListQueryParamOrganizationIDFilter' from JSON`,
  );
}

/** @internal */
export const BenefitGrantsListQueryParamCustomerIDFilter$inboundSchema:
  z.ZodType<
    BenefitGrantsListQueryParamCustomerIDFilter,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type BenefitGrantsListQueryParamCustomerIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const BenefitGrantsListQueryParamCustomerIDFilter$outboundSchema:
  z.ZodType<
    BenefitGrantsListQueryParamCustomerIDFilter$Outbound,
    z.ZodTypeDef,
    BenefitGrantsListQueryParamCustomerIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitGrantsListQueryParamCustomerIDFilter$ {
  /** @deprecated use `BenefitGrantsListQueryParamCustomerIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    BenefitGrantsListQueryParamCustomerIDFilter$inboundSchema;
  /** @deprecated use `BenefitGrantsListQueryParamCustomerIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    BenefitGrantsListQueryParamCustomerIDFilter$outboundSchema;
  /** @deprecated use `BenefitGrantsListQueryParamCustomerIDFilter$Outbound` instead. */
  export type Outbound = BenefitGrantsListQueryParamCustomerIDFilter$Outbound;
}

export function benefitGrantsListQueryParamCustomerIDFilterToJSON(
  benefitGrantsListQueryParamCustomerIDFilter:
    BenefitGrantsListQueryParamCustomerIDFilter,
): string {
  return JSON.stringify(
    BenefitGrantsListQueryParamCustomerIDFilter$outboundSchema.parse(
      benefitGrantsListQueryParamCustomerIDFilter,
    ),
  );
}

export function benefitGrantsListQueryParamCustomerIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  BenefitGrantsListQueryParamCustomerIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BenefitGrantsListQueryParamCustomerIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BenefitGrantsListQueryParamCustomerIDFilter' from JSON`,
  );
}

/** @internal */
export const BenefitGrantsListRequest$inboundSchema: z.ZodType<
  BenefitGrantsListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  is_granted: z.nullable(z.boolean()).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(BenefitGrantSortProperty$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "customer_id": "customerId",
    "is_granted": "isGranted",
  });
});

/** @internal */
export type BenefitGrantsListRequest$Outbound = {
  organization_id?: string | Array<string> | null | undefined;
  customer_id?: string | Array<string> | null | undefined;
  is_granted?: boolean | null | undefined;
  page: number;
  limit: number;
  sorting?: Array<string> | null | undefined;
};

/** @internal */
export const BenefitGrantsListRequest$outboundSchema: z.ZodType<
  BenefitGrantsListRequest$Outbound,
  z.ZodTypeDef,
  BenefitGrantsListRequest
> = z.object({
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  customerId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  isGranted: z.nullable(z.boolean()).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(BenefitGrantSortProperty$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    customerId: "customer_id",
    isGranted: "is_granted",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitGrantsListRequest$ {
  /** @deprecated use `BenefitGrantsListRequest$inboundSchema` instead. */
  export const inboundSchema = BenefitGrantsListRequest$inboundSchema;
  /** @deprecated use `BenefitGrantsListRequest$outboundSchema` instead. */
  export const outboundSchema = BenefitGrantsListRequest$outboundSchema;
  /** @deprecated use `BenefitGrantsListRequest$Outbound` instead. */
  export type Outbound = BenefitGrantsListRequest$Outbound;
}

export function benefitGrantsListRequestToJSON(
  benefitGrantsListRequest: BenefitGrantsListRequest,
): string {
  return JSON.stringify(
    BenefitGrantsListRequest$outboundSchema.parse(benefitGrantsListRequest),
  );
}

export function benefitGrantsListRequestFromJSON(
  jsonString: string,
): SafeParseResult<BenefitGrantsListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BenefitGrantsListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BenefitGrantsListRequest' from JSON`,
  );
}

/** @internal */
export const BenefitGrantsListResponse$inboundSchema: z.ZodType<
  BenefitGrantsListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: ListResourceBenefitGrant$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type BenefitGrantsListResponse$Outbound = {
  Result: ListResourceBenefitGrant$Outbound;
};

/** @internal */
export const BenefitGrantsListResponse$outboundSchema: z.ZodType<
  BenefitGrantsListResponse$Outbound,
  z.ZodTypeDef,
  BenefitGrantsListResponse
> = z.object({
  result: ListResourceBenefitGrant$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitGrantsListResponse$ {
  /** @deprecated use `BenefitGrantsListResponse$inboundSchema` instead. */
  export const inboundSchema = BenefitGrantsListResponse$inboundSchema;
  /** @deprecated use `BenefitGrantsListResponse$outboundSchema` instead. */
  export const outboundSchema = BenefitGrantsListResponse$outboundSchema;
  /** @deprecated use `BenefitGrantsListResponse$Outbound` instead. */
  export type Outbound = BenefitGrantsListResponse$Outbound;
}

export function benefitGrantsListResponseToJSON(
  benefitGrantsListResponse: BenefitGrantsListResponse,
): string {
  return JSON.stringify(
    BenefitGrantsListResponse$outboundSchema.parse(benefitGrantsListResponse),
  );
}

export function benefitGrantsListResponseFromJSON(
  jsonString: string,
): SafeParseResult<BenefitGrantsListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BenefitGrantsListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BenefitGrantsListResponse' from JSON`,
  );
}
