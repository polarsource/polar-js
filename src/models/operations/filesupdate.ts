/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FilesUpdateRequest = {
  /**
   * The file ID.
   */
  id: string;
  filePatch: components.FilePatch;
};

/**
 * File updated.
 */
export type FilesUpdateResponseFilesUpdate =
  | (components.DownloadableFileRead & { service: "downloadable" })
  | (components.ProductMediaFileRead & { service: "product_media" })
  | (components.OrganizationAvatarFileRead & {
    service: "organization_avatar";
  });

/** @internal */
export const FilesUpdateRequest$inboundSchema: z.ZodType<
  FilesUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  FilePatch: components.FilePatch$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "FilePatch": "filePatch",
  });
});

/** @internal */
export type FilesUpdateRequest$Outbound = {
  id: string;
  FilePatch: components.FilePatch$Outbound;
};

/** @internal */
export const FilesUpdateRequest$outboundSchema: z.ZodType<
  FilesUpdateRequest$Outbound,
  z.ZodTypeDef,
  FilesUpdateRequest
> = z.object({
  id: z.string(),
  filePatch: components.FilePatch$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    filePatch: "FilePatch",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilesUpdateRequest$ {
  /** @deprecated use `FilesUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = FilesUpdateRequest$inboundSchema;
  /** @deprecated use `FilesUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = FilesUpdateRequest$outboundSchema;
  /** @deprecated use `FilesUpdateRequest$Outbound` instead. */
  export type Outbound = FilesUpdateRequest$Outbound;
}

export function filesUpdateRequestToJSON(
  filesUpdateRequest: FilesUpdateRequest,
): string {
  return JSON.stringify(
    FilesUpdateRequest$outboundSchema.parse(filesUpdateRequest),
  );
}

export function filesUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<FilesUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilesUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilesUpdateRequest' from JSON`,
  );
}

/** @internal */
export const FilesUpdateResponseFilesUpdate$inboundSchema: z.ZodType<
  FilesUpdateResponseFilesUpdate,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.DownloadableFileRead$inboundSchema.and(
    z.object({ service: z.literal("downloadable") }).transform((v) => ({
      service: v.service,
    })),
  ),
  components.ProductMediaFileRead$inboundSchema.and(
    z.object({ service: z.literal("product_media") }).transform((v) => ({
      service: v.service,
    })),
  ),
  components.OrganizationAvatarFileRead$inboundSchema.and(
    z.object({ service: z.literal("organization_avatar") }).transform((v) => ({
      service: v.service,
    })),
  ),
]);

/** @internal */
export type FilesUpdateResponseFilesUpdate$Outbound =
  | (components.DownloadableFileRead$Outbound & { service: "downloadable" })
  | (components.ProductMediaFileRead$Outbound & { service: "product_media" })
  | (components.OrganizationAvatarFileRead$Outbound & {
    service: "organization_avatar";
  });

/** @internal */
export const FilesUpdateResponseFilesUpdate$outboundSchema: z.ZodType<
  FilesUpdateResponseFilesUpdate$Outbound,
  z.ZodTypeDef,
  FilesUpdateResponseFilesUpdate
> = z.union([
  components.DownloadableFileRead$outboundSchema.and(
    z.object({ service: z.literal("downloadable") }).transform((v) => ({
      service: v.service,
    })),
  ),
  components.ProductMediaFileRead$outboundSchema.and(
    z.object({ service: z.literal("product_media") }).transform((v) => ({
      service: v.service,
    })),
  ),
  components.OrganizationAvatarFileRead$outboundSchema.and(
    z.object({ service: z.literal("organization_avatar") }).transform((v) => ({
      service: v.service,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilesUpdateResponseFilesUpdate$ {
  /** @deprecated use `FilesUpdateResponseFilesUpdate$inboundSchema` instead. */
  export const inboundSchema = FilesUpdateResponseFilesUpdate$inboundSchema;
  /** @deprecated use `FilesUpdateResponseFilesUpdate$outboundSchema` instead. */
  export const outboundSchema = FilesUpdateResponseFilesUpdate$outboundSchema;
  /** @deprecated use `FilesUpdateResponseFilesUpdate$Outbound` instead. */
  export type Outbound = FilesUpdateResponseFilesUpdate$Outbound;
}

export function filesUpdateResponseFilesUpdateToJSON(
  filesUpdateResponseFilesUpdate: FilesUpdateResponseFilesUpdate,
): string {
  return JSON.stringify(
    FilesUpdateResponseFilesUpdate$outboundSchema.parse(
      filesUpdateResponseFilesUpdate,
    ),
  );
}

export function filesUpdateResponseFilesUpdateFromJSON(
  jsonString: string,
): SafeParseResult<FilesUpdateResponseFilesUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilesUpdateResponseFilesUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilesUpdateResponseFilesUpdate' from JSON`,
  );
}
