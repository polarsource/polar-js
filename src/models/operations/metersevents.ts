/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  ListResourceEvent,
  ListResourceEvent$inboundSchema,
  ListResourceEvent$Outbound,
  ListResourceEvent$outboundSchema,
} from "../components/listresourceevent.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MetersEventsRequest = {
  /**
   * The meter ID.
   */
  id: string;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
};

export type MetersEventsResponse = {
  result: ListResourceEvent;
};

/** @internal */
export const MetersEventsRequest$inboundSchema: z.ZodType<
  MetersEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
});

/** @internal */
export type MetersEventsRequest$Outbound = {
  id: string;
  page: number;
  limit: number;
};

/** @internal */
export const MetersEventsRequest$outboundSchema: z.ZodType<
  MetersEventsRequest$Outbound,
  z.ZodTypeDef,
  MetersEventsRequest
> = z.object({
  id: z.string(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetersEventsRequest$ {
  /** @deprecated use `MetersEventsRequest$inboundSchema` instead. */
  export const inboundSchema = MetersEventsRequest$inboundSchema;
  /** @deprecated use `MetersEventsRequest$outboundSchema` instead. */
  export const outboundSchema = MetersEventsRequest$outboundSchema;
  /** @deprecated use `MetersEventsRequest$Outbound` instead. */
  export type Outbound = MetersEventsRequest$Outbound;
}

export function metersEventsRequestToJSON(
  metersEventsRequest: MetersEventsRequest,
): string {
  return JSON.stringify(
    MetersEventsRequest$outboundSchema.parse(metersEventsRequest),
  );
}

export function metersEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<MetersEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetersEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetersEventsRequest' from JSON`,
  );
}

/** @internal */
export const MetersEventsResponse$inboundSchema: z.ZodType<
  MetersEventsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: ListResourceEvent$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type MetersEventsResponse$Outbound = {
  Result: ListResourceEvent$Outbound;
};

/** @internal */
export const MetersEventsResponse$outboundSchema: z.ZodType<
  MetersEventsResponse$Outbound,
  z.ZodTypeDef,
  MetersEventsResponse
> = z.object({
  result: ListResourceEvent$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetersEventsResponse$ {
  /** @deprecated use `MetersEventsResponse$inboundSchema` instead. */
  export const inboundSchema = MetersEventsResponse$inboundSchema;
  /** @deprecated use `MetersEventsResponse$outboundSchema` instead. */
  export const outboundSchema = MetersEventsResponse$outboundSchema;
  /** @deprecated use `MetersEventsResponse$Outbound` instead. */
  export type Outbound = MetersEventsResponse$Outbound;
}

export function metersEventsResponseToJSON(
  metersEventsResponse: MetersEventsResponse,
): string {
  return JSON.stringify(
    MetersEventsResponse$outboundSchema.parse(metersEventsResponse),
  );
}

export function metersEventsResponseFromJSON(
  jsonString: string,
): SafeParseResult<MetersEventsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetersEventsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetersEventsResponse' from JSON`,
  );
}
