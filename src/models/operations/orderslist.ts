/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by organization ID.
 */
export type OrdersListQueryParamOrganizationIDFilter = string | Array<string>;

/**
 * Filter by product ID.
 */
export type QueryParamProductIDFilter = string | Array<string>;

/**
 * Filter by product price type. `recurring` will return orders corresponding to subscriptions creations or renewals. `one_time` will return orders corresponding to one-time purchases.
 */
export type ProductPriceTypeFilter =
  | components.ProductPriceType
  | Array<components.ProductPriceType>;

/**
 * Filter by discount ID.
 */
export type QueryParamDiscountIDFilter = string | Array<string>;

/**
 * Filter by customer ID.
 */
export type OrdersListQueryParamCustomerIDFilter = string | Array<string>;

export type OrdersListRequest = {
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
  /**
   * Filter by product ID.
   */
  productId?: string | Array<string> | null | undefined;
  /**
   * Filter by product price type. `recurring` will return orders corresponding to subscriptions creations or renewals. `one_time` will return orders corresponding to one-time purchases.
   */
  productPriceType?:
    | components.ProductPriceType
    | Array<components.ProductPriceType>
    | null
    | undefined;
  /**
   * Filter by discount ID.
   */
  discountId?: string | Array<string> | null | undefined;
  /**
   * Filter by customer ID.
   */
  customerId?: string | Array<string> | null | undefined;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
  /**
   * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
   */
  sorting?: Array<components.OrderSortProperty> | null | undefined;
};

export type OrdersListResponse = {
  result: components.ListResourceOrder;
};

/** @internal */
export const OrdersListQueryParamOrganizationIDFilter$inboundSchema: z.ZodType<
  OrdersListQueryParamOrganizationIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type OrdersListQueryParamOrganizationIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const OrdersListQueryParamOrganizationIDFilter$outboundSchema: z.ZodType<
  OrdersListQueryParamOrganizationIDFilter$Outbound,
  z.ZodTypeDef,
  OrdersListQueryParamOrganizationIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrdersListQueryParamOrganizationIDFilter$ {
  /** @deprecated use `OrdersListQueryParamOrganizationIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    OrdersListQueryParamOrganizationIDFilter$inboundSchema;
  /** @deprecated use `OrdersListQueryParamOrganizationIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    OrdersListQueryParamOrganizationIDFilter$outboundSchema;
  /** @deprecated use `OrdersListQueryParamOrganizationIDFilter$Outbound` instead. */
  export type Outbound = OrdersListQueryParamOrganizationIDFilter$Outbound;
}

export function ordersListQueryParamOrganizationIDFilterToJSON(
  ordersListQueryParamOrganizationIDFilter:
    OrdersListQueryParamOrganizationIDFilter,
): string {
  return JSON.stringify(
    OrdersListQueryParamOrganizationIDFilter$outboundSchema.parse(
      ordersListQueryParamOrganizationIDFilter,
    ),
  );
}

export function ordersListQueryParamOrganizationIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  OrdersListQueryParamOrganizationIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      OrdersListQueryParamOrganizationIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'OrdersListQueryParamOrganizationIDFilter' from JSON`,
  );
}

/** @internal */
export const QueryParamProductIDFilter$inboundSchema: z.ZodType<
  QueryParamProductIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type QueryParamProductIDFilter$Outbound = string | Array<string>;

/** @internal */
export const QueryParamProductIDFilter$outboundSchema: z.ZodType<
  QueryParamProductIDFilter$Outbound,
  z.ZodTypeDef,
  QueryParamProductIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamProductIDFilter$ {
  /** @deprecated use `QueryParamProductIDFilter$inboundSchema` instead. */
  export const inboundSchema = QueryParamProductIDFilter$inboundSchema;
  /** @deprecated use `QueryParamProductIDFilter$outboundSchema` instead. */
  export const outboundSchema = QueryParamProductIDFilter$outboundSchema;
  /** @deprecated use `QueryParamProductIDFilter$Outbound` instead. */
  export type Outbound = QueryParamProductIDFilter$Outbound;
}

export function queryParamProductIDFilterToJSON(
  queryParamProductIDFilter: QueryParamProductIDFilter,
): string {
  return JSON.stringify(
    QueryParamProductIDFilter$outboundSchema.parse(queryParamProductIDFilter),
  );
}

export function queryParamProductIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamProductIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamProductIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamProductIDFilter' from JSON`,
  );
}

/** @internal */
export const ProductPriceTypeFilter$inboundSchema: z.ZodType<
  ProductPriceTypeFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.ProductPriceType$inboundSchema,
  z.array(components.ProductPriceType$inboundSchema),
]);

/** @internal */
export type ProductPriceTypeFilter$Outbound = string | Array<string>;

/** @internal */
export const ProductPriceTypeFilter$outboundSchema: z.ZodType<
  ProductPriceTypeFilter$Outbound,
  z.ZodTypeDef,
  ProductPriceTypeFilter
> = z.union([
  components.ProductPriceType$outboundSchema,
  z.array(components.ProductPriceType$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductPriceTypeFilter$ {
  /** @deprecated use `ProductPriceTypeFilter$inboundSchema` instead. */
  export const inboundSchema = ProductPriceTypeFilter$inboundSchema;
  /** @deprecated use `ProductPriceTypeFilter$outboundSchema` instead. */
  export const outboundSchema = ProductPriceTypeFilter$outboundSchema;
  /** @deprecated use `ProductPriceTypeFilter$Outbound` instead. */
  export type Outbound = ProductPriceTypeFilter$Outbound;
}

export function productPriceTypeFilterToJSON(
  productPriceTypeFilter: ProductPriceTypeFilter,
): string {
  return JSON.stringify(
    ProductPriceTypeFilter$outboundSchema.parse(productPriceTypeFilter),
  );
}

export function productPriceTypeFilterFromJSON(
  jsonString: string,
): SafeParseResult<ProductPriceTypeFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductPriceTypeFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductPriceTypeFilter' from JSON`,
  );
}

/** @internal */
export const QueryParamDiscountIDFilter$inboundSchema: z.ZodType<
  QueryParamDiscountIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type QueryParamDiscountIDFilter$Outbound = string | Array<string>;

/** @internal */
export const QueryParamDiscountIDFilter$outboundSchema: z.ZodType<
  QueryParamDiscountIDFilter$Outbound,
  z.ZodTypeDef,
  QueryParamDiscountIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamDiscountIDFilter$ {
  /** @deprecated use `QueryParamDiscountIDFilter$inboundSchema` instead. */
  export const inboundSchema = QueryParamDiscountIDFilter$inboundSchema;
  /** @deprecated use `QueryParamDiscountIDFilter$outboundSchema` instead. */
  export const outboundSchema = QueryParamDiscountIDFilter$outboundSchema;
  /** @deprecated use `QueryParamDiscountIDFilter$Outbound` instead. */
  export type Outbound = QueryParamDiscountIDFilter$Outbound;
}

export function queryParamDiscountIDFilterToJSON(
  queryParamDiscountIDFilter: QueryParamDiscountIDFilter,
): string {
  return JSON.stringify(
    QueryParamDiscountIDFilter$outboundSchema.parse(queryParamDiscountIDFilter),
  );
}

export function queryParamDiscountIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamDiscountIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamDiscountIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamDiscountIDFilter' from JSON`,
  );
}

/** @internal */
export const OrdersListQueryParamCustomerIDFilter$inboundSchema: z.ZodType<
  OrdersListQueryParamCustomerIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type OrdersListQueryParamCustomerIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const OrdersListQueryParamCustomerIDFilter$outboundSchema: z.ZodType<
  OrdersListQueryParamCustomerIDFilter$Outbound,
  z.ZodTypeDef,
  OrdersListQueryParamCustomerIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrdersListQueryParamCustomerIDFilter$ {
  /** @deprecated use `OrdersListQueryParamCustomerIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    OrdersListQueryParamCustomerIDFilter$inboundSchema;
  /** @deprecated use `OrdersListQueryParamCustomerIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    OrdersListQueryParamCustomerIDFilter$outboundSchema;
  /** @deprecated use `OrdersListQueryParamCustomerIDFilter$Outbound` instead. */
  export type Outbound = OrdersListQueryParamCustomerIDFilter$Outbound;
}

export function ordersListQueryParamCustomerIDFilterToJSON(
  ordersListQueryParamCustomerIDFilter: OrdersListQueryParamCustomerIDFilter,
): string {
  return JSON.stringify(
    OrdersListQueryParamCustomerIDFilter$outboundSchema.parse(
      ordersListQueryParamCustomerIDFilter,
    ),
  );
}

export function ordersListQueryParamCustomerIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<OrdersListQueryParamCustomerIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OrdersListQueryParamCustomerIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrdersListQueryParamCustomerIDFilter' from JSON`,
  );
}

/** @internal */
export const OrdersListRequest$inboundSchema: z.ZodType<
  OrdersListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  product_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  product_price_type: z.nullable(
    z.union([
      components.ProductPriceType$inboundSchema,
      z.array(components.ProductPriceType$inboundSchema),
    ]),
  ).optional(),
  discount_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(components.OrderSortProperty$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "product_id": "productId",
    "product_price_type": "productPriceType",
    "discount_id": "discountId",
    "customer_id": "customerId",
  });
});

/** @internal */
export type OrdersListRequest$Outbound = {
  organization_id?: string | Array<string> | null | undefined;
  product_id?: string | Array<string> | null | undefined;
  product_price_type?: string | Array<string> | null | undefined;
  discount_id?: string | Array<string> | null | undefined;
  customer_id?: string | Array<string> | null | undefined;
  page: number;
  limit: number;
  sorting?: Array<string> | null | undefined;
};

/** @internal */
export const OrdersListRequest$outboundSchema: z.ZodType<
  OrdersListRequest$Outbound,
  z.ZodTypeDef,
  OrdersListRequest
> = z.object({
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  productId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  productPriceType: z.nullable(
    z.union([
      components.ProductPriceType$outboundSchema,
      z.array(components.ProductPriceType$outboundSchema),
    ]),
  ).optional(),
  discountId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  customerId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(components.OrderSortProperty$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    productId: "product_id",
    productPriceType: "product_price_type",
    discountId: "discount_id",
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrdersListRequest$ {
  /** @deprecated use `OrdersListRequest$inboundSchema` instead. */
  export const inboundSchema = OrdersListRequest$inboundSchema;
  /** @deprecated use `OrdersListRequest$outboundSchema` instead. */
  export const outboundSchema = OrdersListRequest$outboundSchema;
  /** @deprecated use `OrdersListRequest$Outbound` instead. */
  export type Outbound = OrdersListRequest$Outbound;
}

export function ordersListRequestToJSON(
  ordersListRequest: OrdersListRequest,
): string {
  return JSON.stringify(
    OrdersListRequest$outboundSchema.parse(ordersListRequest),
  );
}

export function ordersListRequestFromJSON(
  jsonString: string,
): SafeParseResult<OrdersListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrdersListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrdersListRequest' from JSON`,
  );
}

/** @internal */
export const OrdersListResponse$inboundSchema: z.ZodType<
  OrdersListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.ListResourceOrder$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type OrdersListResponse$Outbound = {
  Result: components.ListResourceOrder$Outbound;
};

/** @internal */
export const OrdersListResponse$outboundSchema: z.ZodType<
  OrdersListResponse$Outbound,
  z.ZodTypeDef,
  OrdersListResponse
> = z.object({
  result: components.ListResourceOrder$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrdersListResponse$ {
  /** @deprecated use `OrdersListResponse$inboundSchema` instead. */
  export const inboundSchema = OrdersListResponse$inboundSchema;
  /** @deprecated use `OrdersListResponse$outboundSchema` instead. */
  export const outboundSchema = OrdersListResponse$outboundSchema;
  /** @deprecated use `OrdersListResponse$Outbound` instead. */
  export type Outbound = OrdersListResponse$Outbound;
}

export function ordersListResponseToJSON(
  ordersListResponse: OrdersListResponse,
): string {
  return JSON.stringify(
    OrdersListResponse$outboundSchema.parse(ordersListResponse),
  );
}

export function ordersListResponseFromJSON(
  jsonString: string,
): SafeParseResult<OrdersListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrdersListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrdersListResponse' from JSON`,
  );
}
