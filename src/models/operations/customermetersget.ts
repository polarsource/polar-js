/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerMetersGetRequest = {
  /**
   * The customer meter ID.
   */
  id: string;
};

/** @internal */
export const CustomerMetersGetRequest$inboundSchema: z.ZodType<
  CustomerMetersGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CustomerMetersGetRequest$Outbound = {
  id: string;
};

/** @internal */
export const CustomerMetersGetRequest$outboundSchema: z.ZodType<
  CustomerMetersGetRequest$Outbound,
  z.ZodTypeDef,
  CustomerMetersGetRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerMetersGetRequest$ {
  /** @deprecated use `CustomerMetersGetRequest$inboundSchema` instead. */
  export const inboundSchema = CustomerMetersGetRequest$inboundSchema;
  /** @deprecated use `CustomerMetersGetRequest$outboundSchema` instead. */
  export const outboundSchema = CustomerMetersGetRequest$outboundSchema;
  /** @deprecated use `CustomerMetersGetRequest$Outbound` instead. */
  export type Outbound = CustomerMetersGetRequest$Outbound;
}

export function customerMetersGetRequestToJSON(
  customerMetersGetRequest: CustomerMetersGetRequest,
): string {
  return JSON.stringify(
    CustomerMetersGetRequest$outboundSchema.parse(customerMetersGetRequest),
  );
}

export function customerMetersGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomerMetersGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerMetersGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerMetersGetRequest' from JSON`,
  );
}
