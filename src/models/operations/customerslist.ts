/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  MetadataQuery,
  MetadataQuery$inboundSchema,
  MetadataQuery$Outbound,
  MetadataQuery$outboundSchema,
} from "../components/customerslist.js";
import {
  CustomerSortProperty,
  CustomerSortProperty$inboundSchema,
  CustomerSortProperty$outboundSchema,
} from "../components/customersortproperty.js";
import {
  ListResourceCustomer,
  ListResourceCustomer$inboundSchema,
  ListResourceCustomer$Outbound,
  ListResourceCustomer$outboundSchema,
} from "../components/listresourcecustomer.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by organization ID.
 */
export type CustomersListQueryParamOrganizationIDFilter =
  | string
  | Array<string>;

export type CustomersListRequest = {
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
  /**
   * Filter by exact email.
   */
  email?: string | null | undefined;
  /**
   * Filter by name or email.
   */
  query?: string | null | undefined;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
  /**
   * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
   */
  sorting?: Array<CustomerSortProperty> | null | undefined;
  /**
   * Filter by metadata key-value pairs. It uses the `deepObject` style, e.g. `?metadata[key]=value`.
   */
  metadata?: { [k: string]: MetadataQuery } | null | undefined;
};

export type CustomersListResponse = {
  result: ListResourceCustomer;
};

/** @internal */
export const CustomersListQueryParamOrganizationIDFilter$inboundSchema:
  z.ZodType<
    CustomersListQueryParamOrganizationIDFilter,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type CustomersListQueryParamOrganizationIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const CustomersListQueryParamOrganizationIDFilter$outboundSchema:
  z.ZodType<
    CustomersListQueryParamOrganizationIDFilter$Outbound,
    z.ZodTypeDef,
    CustomersListQueryParamOrganizationIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersListQueryParamOrganizationIDFilter$ {
  /** @deprecated use `CustomersListQueryParamOrganizationIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    CustomersListQueryParamOrganizationIDFilter$inboundSchema;
  /** @deprecated use `CustomersListQueryParamOrganizationIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    CustomersListQueryParamOrganizationIDFilter$outboundSchema;
  /** @deprecated use `CustomersListQueryParamOrganizationIDFilter$Outbound` instead. */
  export type Outbound = CustomersListQueryParamOrganizationIDFilter$Outbound;
}

export function customersListQueryParamOrganizationIDFilterToJSON(
  customersListQueryParamOrganizationIDFilter:
    CustomersListQueryParamOrganizationIDFilter,
): string {
  return JSON.stringify(
    CustomersListQueryParamOrganizationIDFilter$outboundSchema.parse(
      customersListQueryParamOrganizationIDFilter,
    ),
  );
}

export function customersListQueryParamOrganizationIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomersListQueryParamOrganizationIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomersListQueryParamOrganizationIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomersListQueryParamOrganizationIDFilter' from JSON`,
  );
}

/** @internal */
export const CustomersListRequest$inboundSchema: z.ZodType<
  CustomersListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  email: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(CustomerSortProperty$inboundSchema)).optional(),
  metadata: z.nullable(z.record(z.lazy(() => MetadataQuery$inboundSchema)))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
  });
});

/** @internal */
export type CustomersListRequest$Outbound = {
  organization_id?: string | Array<string> | null | undefined;
  email?: string | null | undefined;
  query?: string | null | undefined;
  page: number;
  limit: number;
  sorting?: Array<string> | null | undefined;
  metadata?: { [k: string]: MetadataQuery$Outbound } | null | undefined;
};

/** @internal */
export const CustomersListRequest$outboundSchema: z.ZodType<
  CustomersListRequest$Outbound,
  z.ZodTypeDef,
  CustomersListRequest
> = z.object({
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  email: z.nullable(z.string()).optional(),
  query: z.nullable(z.string()).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(CustomerSortProperty$outboundSchema)).optional(),
  metadata: z.nullable(z.record(z.lazy(() => MetadataQuery$outboundSchema)))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersListRequest$ {
  /** @deprecated use `CustomersListRequest$inboundSchema` instead. */
  export const inboundSchema = CustomersListRequest$inboundSchema;
  /** @deprecated use `CustomersListRequest$outboundSchema` instead. */
  export const outboundSchema = CustomersListRequest$outboundSchema;
  /** @deprecated use `CustomersListRequest$Outbound` instead. */
  export type Outbound = CustomersListRequest$Outbound;
}

export function customersListRequestToJSON(
  customersListRequest: CustomersListRequest,
): string {
  return JSON.stringify(
    CustomersListRequest$outboundSchema.parse(customersListRequest),
  );
}

export function customersListRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomersListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomersListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomersListRequest' from JSON`,
  );
}

/** @internal */
export const CustomersListResponse$inboundSchema: z.ZodType<
  CustomersListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: ListResourceCustomer$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type CustomersListResponse$Outbound = {
  Result: ListResourceCustomer$Outbound;
};

/** @internal */
export const CustomersListResponse$outboundSchema: z.ZodType<
  CustomersListResponse$Outbound,
  z.ZodTypeDef,
  CustomersListResponse
> = z.object({
  result: ListResourceCustomer$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersListResponse$ {
  /** @deprecated use `CustomersListResponse$inboundSchema` instead. */
  export const inboundSchema = CustomersListResponse$inboundSchema;
  /** @deprecated use `CustomersListResponse$outboundSchema` instead. */
  export const outboundSchema = CustomersListResponse$outboundSchema;
  /** @deprecated use `CustomersListResponse$Outbound` instead. */
  export type Outbound = CustomersListResponse$Outbound;
}

export function customersListResponseToJSON(
  customersListResponse: CustomersListResponse,
): string {
  return JSON.stringify(
    CustomersListResponse$outboundSchema.parse(customersListResponse),
  );
}

export function customersListResponseFromJSON(
  jsonString: string,
): SafeParseResult<CustomersListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomersListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomersListResponse' from JSON`,
  );
}
