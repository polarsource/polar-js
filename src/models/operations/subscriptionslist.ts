/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  ListResourceSubscription,
  ListResourceSubscription$inboundSchema,
  ListResourceSubscription$Outbound,
  ListResourceSubscription$outboundSchema,
} from "../components/listresourcesubscription.js";
import {
  SubscriptionSortProperty,
  SubscriptionSortProperty$inboundSchema,
  SubscriptionSortProperty$outboundSchema,
} from "../components/subscriptionsortproperty.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by organization ID.
 */
export type SubscriptionsListQueryParamOrganizationIDFilter =
  | string
  | Array<string>;

/**
 * Filter by product ID.
 */
export type ProductIDFilter = string | Array<string>;

/**
 * Filter by customer ID.
 */
export type CustomerIDFilter = string | Array<string>;

/**
 * Filter by discount ID.
 */
export type DiscountIDFilter = string | Array<string>;

export type SubscriptionsListRequest = {
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
  /**
   * Filter by product ID.
   */
  productId?: string | Array<string> | null | undefined;
  /**
   * Filter by customer ID.
   */
  customerId?: string | Array<string> | null | undefined;
  /**
   * Filter by discount ID.
   */
  discountId?: string | Array<string> | null | undefined;
  /**
   * Filter by active or inactive subscription.
   */
  active?: boolean | null | undefined;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
  /**
   * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
   */
  sorting?: Array<SubscriptionSortProperty> | null | undefined;
};

export type SubscriptionsListResponse = {
  result: ListResourceSubscription;
};

/** @internal */
export const SubscriptionsListQueryParamOrganizationIDFilter$inboundSchema:
  z.ZodType<
    SubscriptionsListQueryParamOrganizationIDFilter,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type SubscriptionsListQueryParamOrganizationIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const SubscriptionsListQueryParamOrganizationIDFilter$outboundSchema:
  z.ZodType<
    SubscriptionsListQueryParamOrganizationIDFilter$Outbound,
    z.ZodTypeDef,
    SubscriptionsListQueryParamOrganizationIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionsListQueryParamOrganizationIDFilter$ {
  /** @deprecated use `SubscriptionsListQueryParamOrganizationIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionsListQueryParamOrganizationIDFilter$inboundSchema;
  /** @deprecated use `SubscriptionsListQueryParamOrganizationIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionsListQueryParamOrganizationIDFilter$outboundSchema;
  /** @deprecated use `SubscriptionsListQueryParamOrganizationIDFilter$Outbound` instead. */
  export type Outbound =
    SubscriptionsListQueryParamOrganizationIDFilter$Outbound;
}

export function subscriptionsListQueryParamOrganizationIDFilterToJSON(
  subscriptionsListQueryParamOrganizationIDFilter:
    SubscriptionsListQueryParamOrganizationIDFilter,
): string {
  return JSON.stringify(
    SubscriptionsListQueryParamOrganizationIDFilter$outboundSchema.parse(
      subscriptionsListQueryParamOrganizationIDFilter,
    ),
  );
}

export function subscriptionsListQueryParamOrganizationIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionsListQueryParamOrganizationIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionsListQueryParamOrganizationIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionsListQueryParamOrganizationIDFilter' from JSON`,
  );
}

/** @internal */
export const ProductIDFilter$inboundSchema: z.ZodType<
  ProductIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type ProductIDFilter$Outbound = string | Array<string>;

/** @internal */
export const ProductIDFilter$outboundSchema: z.ZodType<
  ProductIDFilter$Outbound,
  z.ZodTypeDef,
  ProductIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductIDFilter$ {
  /** @deprecated use `ProductIDFilter$inboundSchema` instead. */
  export const inboundSchema = ProductIDFilter$inboundSchema;
  /** @deprecated use `ProductIDFilter$outboundSchema` instead. */
  export const outboundSchema = ProductIDFilter$outboundSchema;
  /** @deprecated use `ProductIDFilter$Outbound` instead. */
  export type Outbound = ProductIDFilter$Outbound;
}

export function productIDFilterToJSON(
  productIDFilter: ProductIDFilter,
): string {
  return JSON.stringify(ProductIDFilter$outboundSchema.parse(productIDFilter));
}

export function productIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<ProductIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductIDFilter' from JSON`,
  );
}

/** @internal */
export const CustomerIDFilter$inboundSchema: z.ZodType<
  CustomerIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type CustomerIDFilter$Outbound = string | Array<string>;

/** @internal */
export const CustomerIDFilter$outboundSchema: z.ZodType<
  CustomerIDFilter$Outbound,
  z.ZodTypeDef,
  CustomerIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerIDFilter$ {
  /** @deprecated use `CustomerIDFilter$inboundSchema` instead. */
  export const inboundSchema = CustomerIDFilter$inboundSchema;
  /** @deprecated use `CustomerIDFilter$outboundSchema` instead. */
  export const outboundSchema = CustomerIDFilter$outboundSchema;
  /** @deprecated use `CustomerIDFilter$Outbound` instead. */
  export type Outbound = CustomerIDFilter$Outbound;
}

export function customerIDFilterToJSON(
  customerIDFilter: CustomerIDFilter,
): string {
  return JSON.stringify(
    CustomerIDFilter$outboundSchema.parse(customerIDFilter),
  );
}

export function customerIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<CustomerIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerIDFilter' from JSON`,
  );
}

/** @internal */
export const DiscountIDFilter$inboundSchema: z.ZodType<
  DiscountIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type DiscountIDFilter$Outbound = string | Array<string>;

/** @internal */
export const DiscountIDFilter$outboundSchema: z.ZodType<
  DiscountIDFilter$Outbound,
  z.ZodTypeDef,
  DiscountIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DiscountIDFilter$ {
  /** @deprecated use `DiscountIDFilter$inboundSchema` instead. */
  export const inboundSchema = DiscountIDFilter$inboundSchema;
  /** @deprecated use `DiscountIDFilter$outboundSchema` instead. */
  export const outboundSchema = DiscountIDFilter$outboundSchema;
  /** @deprecated use `DiscountIDFilter$Outbound` instead. */
  export type Outbound = DiscountIDFilter$Outbound;
}

export function discountIDFilterToJSON(
  discountIDFilter: DiscountIDFilter,
): string {
  return JSON.stringify(
    DiscountIDFilter$outboundSchema.parse(discountIDFilter),
  );
}

export function discountIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<DiscountIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DiscountIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DiscountIDFilter' from JSON`,
  );
}

/** @internal */
export const SubscriptionsListRequest$inboundSchema: z.ZodType<
  SubscriptionsListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  product_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  discount_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  active: z.nullable(z.boolean()).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(SubscriptionSortProperty$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "product_id": "productId",
    "customer_id": "customerId",
    "discount_id": "discountId",
  });
});

/** @internal */
export type SubscriptionsListRequest$Outbound = {
  organization_id?: string | Array<string> | null | undefined;
  product_id?: string | Array<string> | null | undefined;
  customer_id?: string | Array<string> | null | undefined;
  discount_id?: string | Array<string> | null | undefined;
  active?: boolean | null | undefined;
  page: number;
  limit: number;
  sorting?: Array<string> | null | undefined;
};

/** @internal */
export const SubscriptionsListRequest$outboundSchema: z.ZodType<
  SubscriptionsListRequest$Outbound,
  z.ZodTypeDef,
  SubscriptionsListRequest
> = z.object({
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  productId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  customerId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  discountId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  active: z.nullable(z.boolean()).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(SubscriptionSortProperty$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    productId: "product_id",
    customerId: "customer_id",
    discountId: "discount_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionsListRequest$ {
  /** @deprecated use `SubscriptionsListRequest$inboundSchema` instead. */
  export const inboundSchema = SubscriptionsListRequest$inboundSchema;
  /** @deprecated use `SubscriptionsListRequest$outboundSchema` instead. */
  export const outboundSchema = SubscriptionsListRequest$outboundSchema;
  /** @deprecated use `SubscriptionsListRequest$Outbound` instead. */
  export type Outbound = SubscriptionsListRequest$Outbound;
}

export function subscriptionsListRequestToJSON(
  subscriptionsListRequest: SubscriptionsListRequest,
): string {
  return JSON.stringify(
    SubscriptionsListRequest$outboundSchema.parse(subscriptionsListRequest),
  );
}

export function subscriptionsListRequestFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionsListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionsListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionsListRequest' from JSON`,
  );
}

/** @internal */
export const SubscriptionsListResponse$inboundSchema: z.ZodType<
  SubscriptionsListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: ListResourceSubscription$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type SubscriptionsListResponse$Outbound = {
  Result: ListResourceSubscription$Outbound;
};

/** @internal */
export const SubscriptionsListResponse$outboundSchema: z.ZodType<
  SubscriptionsListResponse$Outbound,
  z.ZodTypeDef,
  SubscriptionsListResponse
> = z.object({
  result: ListResourceSubscription$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionsListResponse$ {
  /** @deprecated use `SubscriptionsListResponse$inboundSchema` instead. */
  export const inboundSchema = SubscriptionsListResponse$inboundSchema;
  /** @deprecated use `SubscriptionsListResponse$outboundSchema` instead. */
  export const outboundSchema = SubscriptionsListResponse$outboundSchema;
  /** @deprecated use `SubscriptionsListResponse$Outbound` instead. */
  export type Outbound = SubscriptionsListResponse$Outbound;
}

export function subscriptionsListResponseToJSON(
  subscriptionsListResponse: SubscriptionsListResponse,
): string {
  return JSON.stringify(
    SubscriptionsListResponse$outboundSchema.parse(subscriptionsListResponse),
  );
}

export function subscriptionsListResponseFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionsListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionsListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionsListResponse' from JSON`,
  );
}
