/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  MetadataQuery,
  MetadataQuery$inboundSchema,
  MetadataQuery$Outbound,
  MetadataQuery$outboundSchema,
} from "../components/subscriptionslist.js";
import {
  TimeInterval,
  TimeInterval$inboundSchema,
  TimeInterval$outboundSchema,
} from "../components/timeinterval.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by customer ID.
 */
export type MetersQuantitiesQueryParamCustomerIDFilter = string | Array<string>;

/**
 * Filter by external customer ID.
 */
export type MetersQuantitiesQueryParamExternalCustomerIDFilter =
  | string
  | Array<string>;

export type MetersQuantitiesRequest = {
  /**
   * The meter ID.
   */
  id: string;
  /**
   * Start timestamp.
   */
  startTimestamp: Date;
  /**
   * End timestamp.
   */
  endTimestamp: Date;
  /**
   * Interval between two timestamps.
   */
  interval: TimeInterval;
  /**
   * Filter by customer ID.
   */
  customerId?: string | Array<string> | null | undefined;
  /**
   * Filter by external customer ID.
   */
  externalCustomerId?: string | Array<string> | null | undefined;
  /**
   * Filter by metadata key-value pairs. It uses the `deepObject` style, e.g. `?metadata[key]=value`.
   */
  metadata?: { [k: string]: MetadataQuery } | null | undefined;
};

/** @internal */
export const MetersQuantitiesQueryParamCustomerIDFilter$inboundSchema:
  z.ZodType<MetersQuantitiesQueryParamCustomerIDFilter, z.ZodTypeDef, unknown> =
    z.union([z.string(), z.array(z.string())]);

/** @internal */
export type MetersQuantitiesQueryParamCustomerIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const MetersQuantitiesQueryParamCustomerIDFilter$outboundSchema:
  z.ZodType<
    MetersQuantitiesQueryParamCustomerIDFilter$Outbound,
    z.ZodTypeDef,
    MetersQuantitiesQueryParamCustomerIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetersQuantitiesQueryParamCustomerIDFilter$ {
  /** @deprecated use `MetersQuantitiesQueryParamCustomerIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    MetersQuantitiesQueryParamCustomerIDFilter$inboundSchema;
  /** @deprecated use `MetersQuantitiesQueryParamCustomerIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    MetersQuantitiesQueryParamCustomerIDFilter$outboundSchema;
  /** @deprecated use `MetersQuantitiesQueryParamCustomerIDFilter$Outbound` instead. */
  export type Outbound = MetersQuantitiesQueryParamCustomerIDFilter$Outbound;
}

export function metersQuantitiesQueryParamCustomerIDFilterToJSON(
  metersQuantitiesQueryParamCustomerIDFilter:
    MetersQuantitiesQueryParamCustomerIDFilter,
): string {
  return JSON.stringify(
    MetersQuantitiesQueryParamCustomerIDFilter$outboundSchema.parse(
      metersQuantitiesQueryParamCustomerIDFilter,
    ),
  );
}

export function metersQuantitiesQueryParamCustomerIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  MetersQuantitiesQueryParamCustomerIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MetersQuantitiesQueryParamCustomerIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MetersQuantitiesQueryParamCustomerIDFilter' from JSON`,
  );
}

/** @internal */
export const MetersQuantitiesQueryParamExternalCustomerIDFilter$inboundSchema:
  z.ZodType<
    MetersQuantitiesQueryParamExternalCustomerIDFilter,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type MetersQuantitiesQueryParamExternalCustomerIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const MetersQuantitiesQueryParamExternalCustomerIDFilter$outboundSchema:
  z.ZodType<
    MetersQuantitiesQueryParamExternalCustomerIDFilter$Outbound,
    z.ZodTypeDef,
    MetersQuantitiesQueryParamExternalCustomerIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetersQuantitiesQueryParamExternalCustomerIDFilter$ {
  /** @deprecated use `MetersQuantitiesQueryParamExternalCustomerIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    MetersQuantitiesQueryParamExternalCustomerIDFilter$inboundSchema;
  /** @deprecated use `MetersQuantitiesQueryParamExternalCustomerIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    MetersQuantitiesQueryParamExternalCustomerIDFilter$outboundSchema;
  /** @deprecated use `MetersQuantitiesQueryParamExternalCustomerIDFilter$Outbound` instead. */
  export type Outbound =
    MetersQuantitiesQueryParamExternalCustomerIDFilter$Outbound;
}

export function metersQuantitiesQueryParamExternalCustomerIDFilterToJSON(
  metersQuantitiesQueryParamExternalCustomerIDFilter:
    MetersQuantitiesQueryParamExternalCustomerIDFilter,
): string {
  return JSON.stringify(
    MetersQuantitiesQueryParamExternalCustomerIDFilter$outboundSchema.parse(
      metersQuantitiesQueryParamExternalCustomerIDFilter,
    ),
  );
}

export function metersQuantitiesQueryParamExternalCustomerIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  MetersQuantitiesQueryParamExternalCustomerIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MetersQuantitiesQueryParamExternalCustomerIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MetersQuantitiesQueryParamExternalCustomerIDFilter' from JSON`,
  );
}

/** @internal */
export const MetersQuantitiesRequest$inboundSchema: z.ZodType<
  MetersQuantitiesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  start_timestamp: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  end_timestamp: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  interval: TimeInterval$inboundSchema,
  customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  external_customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  metadata: z.nullable(z.record(MetadataQuery$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_timestamp": "startTimestamp",
    "end_timestamp": "endTimestamp",
    "customer_id": "customerId",
    "external_customer_id": "externalCustomerId",
  });
});

/** @internal */
export type MetersQuantitiesRequest$Outbound = {
  id: string;
  start_timestamp: string;
  end_timestamp: string;
  interval: string;
  customer_id?: string | Array<string> | null | undefined;
  external_customer_id?: string | Array<string> | null | undefined;
  metadata?: { [k: string]: MetadataQuery$Outbound } | null | undefined;
};

/** @internal */
export const MetersQuantitiesRequest$outboundSchema: z.ZodType<
  MetersQuantitiesRequest$Outbound,
  z.ZodTypeDef,
  MetersQuantitiesRequest
> = z.object({
  id: z.string(),
  startTimestamp: z.date().transform(v => v.toISOString()),
  endTimestamp: z.date().transform(v => v.toISOString()),
  interval: TimeInterval$outboundSchema,
  customerId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  externalCustomerId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  metadata: z.nullable(z.record(MetadataQuery$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    startTimestamp: "start_timestamp",
    endTimestamp: "end_timestamp",
    customerId: "customer_id",
    externalCustomerId: "external_customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetersQuantitiesRequest$ {
  /** @deprecated use `MetersQuantitiesRequest$inboundSchema` instead. */
  export const inboundSchema = MetersQuantitiesRequest$inboundSchema;
  /** @deprecated use `MetersQuantitiesRequest$outboundSchema` instead. */
  export const outboundSchema = MetersQuantitiesRequest$outboundSchema;
  /** @deprecated use `MetersQuantitiesRequest$Outbound` instead. */
  export type Outbound = MetersQuantitiesRequest$Outbound;
}

export function metersQuantitiesRequestToJSON(
  metersQuantitiesRequest: MetersQuantitiesRequest,
): string {
  return JSON.stringify(
    MetersQuantitiesRequest$outboundSchema.parse(metersQuantitiesRequest),
  );
}

export function metersQuantitiesRequestFromJSON(
  jsonString: string,
): SafeParseResult<MetersQuantitiesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetersQuantitiesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetersQuantitiesRequest' from JSON`,
  );
}
