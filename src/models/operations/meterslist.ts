/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  MetadataQuery,
  MetadataQuery$inboundSchema,
  MetadataQuery$Outbound,
  MetadataQuery$outboundSchema,
} from "../components/customerslist.js";
import {
  ListResourceMeter,
  ListResourceMeter$inboundSchema,
  ListResourceMeter$Outbound,
  ListResourceMeter$outboundSchema,
} from "../components/listresourcemeter.js";
import {
  MeterSortProperty,
  MeterSortProperty$inboundSchema,
  MeterSortProperty$outboundSchema,
} from "../components/metersortproperty.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by organization ID.
 */
export type MetersListQueryParamOrganizationIDFilter = string | Array<string>;

export type MetersListRequest = {
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
  /**
   * Filter by name.
   */
  query?: string | null | undefined;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
  /**
   * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
   */
  sorting?: Array<MeterSortProperty> | null | undefined;
  /**
   * Filter by metadata key-value pairs. It uses the `deepObject` style, e.g. `?metadata[key]=value`.
   */
  metadata?: { [k: string]: MetadataQuery } | null | undefined;
};

export type MetersListResponse = {
  result: ListResourceMeter;
};

/** @internal */
export const MetersListQueryParamOrganizationIDFilter$inboundSchema: z.ZodType<
  MetersListQueryParamOrganizationIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type MetersListQueryParamOrganizationIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const MetersListQueryParamOrganizationIDFilter$outboundSchema: z.ZodType<
  MetersListQueryParamOrganizationIDFilter$Outbound,
  z.ZodTypeDef,
  MetersListQueryParamOrganizationIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetersListQueryParamOrganizationIDFilter$ {
  /** @deprecated use `MetersListQueryParamOrganizationIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    MetersListQueryParamOrganizationIDFilter$inboundSchema;
  /** @deprecated use `MetersListQueryParamOrganizationIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    MetersListQueryParamOrganizationIDFilter$outboundSchema;
  /** @deprecated use `MetersListQueryParamOrganizationIDFilter$Outbound` instead. */
  export type Outbound = MetersListQueryParamOrganizationIDFilter$Outbound;
}

export function metersListQueryParamOrganizationIDFilterToJSON(
  metersListQueryParamOrganizationIDFilter:
    MetersListQueryParamOrganizationIDFilter,
): string {
  return JSON.stringify(
    MetersListQueryParamOrganizationIDFilter$outboundSchema.parse(
      metersListQueryParamOrganizationIDFilter,
    ),
  );
}

export function metersListQueryParamOrganizationIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  MetersListQueryParamOrganizationIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MetersListQueryParamOrganizationIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MetersListQueryParamOrganizationIDFilter' from JSON`,
  );
}

/** @internal */
export const MetersListRequest$inboundSchema: z.ZodType<
  MetersListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  query: z.nullable(z.string()).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(MeterSortProperty$inboundSchema)).optional(),
  metadata: z.nullable(z.record(MetadataQuery$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
  });
});

/** @internal */
export type MetersListRequest$Outbound = {
  organization_id?: string | Array<string> | null | undefined;
  query?: string | null | undefined;
  page: number;
  limit: number;
  sorting?: Array<string> | null | undefined;
  metadata?: { [k: string]: MetadataQuery$Outbound } | null | undefined;
};

/** @internal */
export const MetersListRequest$outboundSchema: z.ZodType<
  MetersListRequest$Outbound,
  z.ZodTypeDef,
  MetersListRequest
> = z.object({
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  query: z.nullable(z.string()).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(MeterSortProperty$outboundSchema)).optional(),
  metadata: z.nullable(z.record(MetadataQuery$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetersListRequest$ {
  /** @deprecated use `MetersListRequest$inboundSchema` instead. */
  export const inboundSchema = MetersListRequest$inboundSchema;
  /** @deprecated use `MetersListRequest$outboundSchema` instead. */
  export const outboundSchema = MetersListRequest$outboundSchema;
  /** @deprecated use `MetersListRequest$Outbound` instead. */
  export type Outbound = MetersListRequest$Outbound;
}

export function metersListRequestToJSON(
  metersListRequest: MetersListRequest,
): string {
  return JSON.stringify(
    MetersListRequest$outboundSchema.parse(metersListRequest),
  );
}

export function metersListRequestFromJSON(
  jsonString: string,
): SafeParseResult<MetersListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetersListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetersListRequest' from JSON`,
  );
}

/** @internal */
export const MetersListResponse$inboundSchema: z.ZodType<
  MetersListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: ListResourceMeter$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type MetersListResponse$Outbound = {
  Result: ListResourceMeter$Outbound;
};

/** @internal */
export const MetersListResponse$outboundSchema: z.ZodType<
  MetersListResponse$Outbound,
  z.ZodTypeDef,
  MetersListResponse
> = z.object({
  result: ListResourceMeter$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetersListResponse$ {
  /** @deprecated use `MetersListResponse$inboundSchema` instead. */
  export const inboundSchema = MetersListResponse$inboundSchema;
  /** @deprecated use `MetersListResponse$outboundSchema` instead. */
  export const outboundSchema = MetersListResponse$outboundSchema;
  /** @deprecated use `MetersListResponse$Outbound` instead. */
  export type Outbound = MetersListResponse$Outbound;
}

export function metersListResponseToJSON(
  metersListResponse: MetersListResponse,
): string {
  return JSON.stringify(
    MetersListResponse$outboundSchema.parse(metersListResponse),
  );
}

export function metersListResponseFromJSON(
  jsonString: string,
): SafeParseResult<MetersListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetersListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetersListResponse' from JSON`,
  );
}
