/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  ListResourceCustomerPaymentMethod,
  ListResourceCustomerPaymentMethod$inboundSchema,
  ListResourceCustomerPaymentMethod$Outbound,
  ListResourceCustomerPaymentMethod$outboundSchema,
} from "../components/listresourcecustomerpaymentmethod.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerPortalCustomersListPaymentMethodsSecurity = {
  customerSession: string;
};

export type CustomerPortalCustomersListPaymentMethodsRequest = {
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
};

export type CustomerPortalCustomersListPaymentMethodsResponse = {
  result: ListResourceCustomerPaymentMethod;
};

/** @internal */
export const CustomerPortalCustomersListPaymentMethodsSecurity$inboundSchema:
  z.ZodType<
    CustomerPortalCustomersListPaymentMethodsSecurity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    customer_session: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "customer_session": "customerSession",
    });
  });

/** @internal */
export type CustomerPortalCustomersListPaymentMethodsSecurity$Outbound = {
  customer_session: string;
};

/** @internal */
export const CustomerPortalCustomersListPaymentMethodsSecurity$outboundSchema:
  z.ZodType<
    CustomerPortalCustomersListPaymentMethodsSecurity$Outbound,
    z.ZodTypeDef,
    CustomerPortalCustomersListPaymentMethodsSecurity
  > = z.object({
    customerSession: z.string(),
  }).transform((v) => {
    return remap$(v, {
      customerSession: "customer_session",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalCustomersListPaymentMethodsSecurity$ {
  /** @deprecated use `CustomerPortalCustomersListPaymentMethodsSecurity$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalCustomersListPaymentMethodsSecurity$inboundSchema;
  /** @deprecated use `CustomerPortalCustomersListPaymentMethodsSecurity$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalCustomersListPaymentMethodsSecurity$outboundSchema;
  /** @deprecated use `CustomerPortalCustomersListPaymentMethodsSecurity$Outbound` instead. */
  export type Outbound =
    CustomerPortalCustomersListPaymentMethodsSecurity$Outbound;
}

export function customerPortalCustomersListPaymentMethodsSecurityToJSON(
  customerPortalCustomersListPaymentMethodsSecurity:
    CustomerPortalCustomersListPaymentMethodsSecurity,
): string {
  return JSON.stringify(
    CustomerPortalCustomersListPaymentMethodsSecurity$outboundSchema.parse(
      customerPortalCustomersListPaymentMethodsSecurity,
    ),
  );
}

export function customerPortalCustomersListPaymentMethodsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerPortalCustomersListPaymentMethodsSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalCustomersListPaymentMethodsSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomerPortalCustomersListPaymentMethodsSecurity' from JSON`,
  );
}

/** @internal */
export const CustomerPortalCustomersListPaymentMethodsRequest$inboundSchema:
  z.ZodType<
    CustomerPortalCustomersListPaymentMethodsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
  });

/** @internal */
export type CustomerPortalCustomersListPaymentMethodsRequest$Outbound = {
  page: number;
  limit: number;
};

/** @internal */
export const CustomerPortalCustomersListPaymentMethodsRequest$outboundSchema:
  z.ZodType<
    CustomerPortalCustomersListPaymentMethodsRequest$Outbound,
    z.ZodTypeDef,
    CustomerPortalCustomersListPaymentMethodsRequest
  > = z.object({
    page: z.number().int().default(1),
    limit: z.number().int().default(10),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalCustomersListPaymentMethodsRequest$ {
  /** @deprecated use `CustomerPortalCustomersListPaymentMethodsRequest$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalCustomersListPaymentMethodsRequest$inboundSchema;
  /** @deprecated use `CustomerPortalCustomersListPaymentMethodsRequest$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalCustomersListPaymentMethodsRequest$outboundSchema;
  /** @deprecated use `CustomerPortalCustomersListPaymentMethodsRequest$Outbound` instead. */
  export type Outbound =
    CustomerPortalCustomersListPaymentMethodsRequest$Outbound;
}

export function customerPortalCustomersListPaymentMethodsRequestToJSON(
  customerPortalCustomersListPaymentMethodsRequest:
    CustomerPortalCustomersListPaymentMethodsRequest,
): string {
  return JSON.stringify(
    CustomerPortalCustomersListPaymentMethodsRequest$outboundSchema.parse(
      customerPortalCustomersListPaymentMethodsRequest,
    ),
  );
}

export function customerPortalCustomersListPaymentMethodsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerPortalCustomersListPaymentMethodsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalCustomersListPaymentMethodsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomerPortalCustomersListPaymentMethodsRequest' from JSON`,
  );
}

/** @internal */
export const CustomerPortalCustomersListPaymentMethodsResponse$inboundSchema:
  z.ZodType<
    CustomerPortalCustomersListPaymentMethodsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Result: ListResourceCustomerPaymentMethod$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "Result": "result",
    });
  });

/** @internal */
export type CustomerPortalCustomersListPaymentMethodsResponse$Outbound = {
  Result: ListResourceCustomerPaymentMethod$Outbound;
};

/** @internal */
export const CustomerPortalCustomersListPaymentMethodsResponse$outboundSchema:
  z.ZodType<
    CustomerPortalCustomersListPaymentMethodsResponse$Outbound,
    z.ZodTypeDef,
    CustomerPortalCustomersListPaymentMethodsResponse
  > = z.object({
    result: ListResourceCustomerPaymentMethod$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalCustomersListPaymentMethodsResponse$ {
  /** @deprecated use `CustomerPortalCustomersListPaymentMethodsResponse$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalCustomersListPaymentMethodsResponse$inboundSchema;
  /** @deprecated use `CustomerPortalCustomersListPaymentMethodsResponse$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalCustomersListPaymentMethodsResponse$outboundSchema;
  /** @deprecated use `CustomerPortalCustomersListPaymentMethodsResponse$Outbound` instead. */
  export type Outbound =
    CustomerPortalCustomersListPaymentMethodsResponse$Outbound;
}

export function customerPortalCustomersListPaymentMethodsResponseToJSON(
  customerPortalCustomersListPaymentMethodsResponse:
    CustomerPortalCustomersListPaymentMethodsResponse,
): string {
  return JSON.stringify(
    CustomerPortalCustomersListPaymentMethodsResponse$outboundSchema.parse(
      customerPortalCustomersListPaymentMethodsResponse,
    ),
  );
}

export function customerPortalCustomersListPaymentMethodsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerPortalCustomersListPaymentMethodsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalCustomersListPaymentMethodsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomerPortalCustomersListPaymentMethodsResponse' from JSON`,
  );
}
