/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  CheckoutSortProperty,
  CheckoutSortProperty$inboundSchema,
  CheckoutSortProperty$outboundSchema,
} from "../components/checkoutsortproperty.js";
import {
  ListResourceCheckout,
  ListResourceCheckout$inboundSchema,
  ListResourceCheckout$Outbound,
  ListResourceCheckout$outboundSchema,
} from "../components/listresourcecheckout.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by organization ID.
 */
export type CheckoutsListQueryParamOrganizationIDFilter =
  | string
  | Array<string>;

/**
 * Filter by product ID.
 */
export type CheckoutsListQueryParamProductIDFilter = string | Array<string>;

export type CheckoutsListRequest = {
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
  /**
   * Filter by product ID.
   */
  productId?: string | Array<string> | null | undefined;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
  /**
   * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
   */
  sorting?: Array<CheckoutSortProperty> | null | undefined;
};

export type CheckoutsListResponse = {
  result: ListResourceCheckout;
};

/** @internal */
export const CheckoutsListQueryParamOrganizationIDFilter$inboundSchema:
  z.ZodType<
    CheckoutsListQueryParamOrganizationIDFilter,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type CheckoutsListQueryParamOrganizationIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const CheckoutsListQueryParamOrganizationIDFilter$outboundSchema:
  z.ZodType<
    CheckoutsListQueryParamOrganizationIDFilter$Outbound,
    z.ZodTypeDef,
    CheckoutsListQueryParamOrganizationIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutsListQueryParamOrganizationIDFilter$ {
  /** @deprecated use `CheckoutsListQueryParamOrganizationIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    CheckoutsListQueryParamOrganizationIDFilter$inboundSchema;
  /** @deprecated use `CheckoutsListQueryParamOrganizationIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    CheckoutsListQueryParamOrganizationIDFilter$outboundSchema;
  /** @deprecated use `CheckoutsListQueryParamOrganizationIDFilter$Outbound` instead. */
  export type Outbound = CheckoutsListQueryParamOrganizationIDFilter$Outbound;
}

export function checkoutsListQueryParamOrganizationIDFilterToJSON(
  checkoutsListQueryParamOrganizationIDFilter:
    CheckoutsListQueryParamOrganizationIDFilter,
): string {
  return JSON.stringify(
    CheckoutsListQueryParamOrganizationIDFilter$outboundSchema.parse(
      checkoutsListQueryParamOrganizationIDFilter,
    ),
  );
}

export function checkoutsListQueryParamOrganizationIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  CheckoutsListQueryParamOrganizationIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CheckoutsListQueryParamOrganizationIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CheckoutsListQueryParamOrganizationIDFilter' from JSON`,
  );
}

/** @internal */
export const CheckoutsListQueryParamProductIDFilter$inboundSchema: z.ZodType<
  CheckoutsListQueryParamProductIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type CheckoutsListQueryParamProductIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const CheckoutsListQueryParamProductIDFilter$outboundSchema: z.ZodType<
  CheckoutsListQueryParamProductIDFilter$Outbound,
  z.ZodTypeDef,
  CheckoutsListQueryParamProductIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutsListQueryParamProductIDFilter$ {
  /** @deprecated use `CheckoutsListQueryParamProductIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    CheckoutsListQueryParamProductIDFilter$inboundSchema;
  /** @deprecated use `CheckoutsListQueryParamProductIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    CheckoutsListQueryParamProductIDFilter$outboundSchema;
  /** @deprecated use `CheckoutsListQueryParamProductIDFilter$Outbound` instead. */
  export type Outbound = CheckoutsListQueryParamProductIDFilter$Outbound;
}

export function checkoutsListQueryParamProductIDFilterToJSON(
  checkoutsListQueryParamProductIDFilter:
    CheckoutsListQueryParamProductIDFilter,
): string {
  return JSON.stringify(
    CheckoutsListQueryParamProductIDFilter$outboundSchema.parse(
      checkoutsListQueryParamProductIDFilter,
    ),
  );
}

export function checkoutsListQueryParamProductIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutsListQueryParamProductIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CheckoutsListQueryParamProductIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutsListQueryParamProductIDFilter' from JSON`,
  );
}

/** @internal */
export const CheckoutsListRequest$inboundSchema: z.ZodType<
  CheckoutsListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  product_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(CheckoutSortProperty$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "product_id": "productId",
  });
});

/** @internal */
export type CheckoutsListRequest$Outbound = {
  organization_id?: string | Array<string> | null | undefined;
  product_id?: string | Array<string> | null | undefined;
  page: number;
  limit: number;
  sorting?: Array<string> | null | undefined;
};

/** @internal */
export const CheckoutsListRequest$outboundSchema: z.ZodType<
  CheckoutsListRequest$Outbound,
  z.ZodTypeDef,
  CheckoutsListRequest
> = z.object({
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  productId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(CheckoutSortProperty$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    productId: "product_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutsListRequest$ {
  /** @deprecated use `CheckoutsListRequest$inboundSchema` instead. */
  export const inboundSchema = CheckoutsListRequest$inboundSchema;
  /** @deprecated use `CheckoutsListRequest$outboundSchema` instead. */
  export const outboundSchema = CheckoutsListRequest$outboundSchema;
  /** @deprecated use `CheckoutsListRequest$Outbound` instead. */
  export type Outbound = CheckoutsListRequest$Outbound;
}

export function checkoutsListRequestToJSON(
  checkoutsListRequest: CheckoutsListRequest,
): string {
  return JSON.stringify(
    CheckoutsListRequest$outboundSchema.parse(checkoutsListRequest),
  );
}

export function checkoutsListRequestFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutsListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckoutsListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutsListRequest' from JSON`,
  );
}

/** @internal */
export const CheckoutsListResponse$inboundSchema: z.ZodType<
  CheckoutsListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: ListResourceCheckout$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type CheckoutsListResponse$Outbound = {
  Result: ListResourceCheckout$Outbound;
};

/** @internal */
export const CheckoutsListResponse$outboundSchema: z.ZodType<
  CheckoutsListResponse$Outbound,
  z.ZodTypeDef,
  CheckoutsListResponse
> = z.object({
  result: ListResourceCheckout$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutsListResponse$ {
  /** @deprecated use `CheckoutsListResponse$inboundSchema` instead. */
  export const inboundSchema = CheckoutsListResponse$inboundSchema;
  /** @deprecated use `CheckoutsListResponse$outboundSchema` instead. */
  export const outboundSchema = CheckoutsListResponse$outboundSchema;
  /** @deprecated use `CheckoutsListResponse$Outbound` instead. */
  export type Outbound = CheckoutsListResponse$Outbound;
}

export function checkoutsListResponseToJSON(
  checkoutsListResponse: CheckoutsListResponse,
): string {
  return JSON.stringify(
    CheckoutsListResponse$outboundSchema.parse(checkoutsListResponse),
  );
}

export function checkoutsListResponseFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutsListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckoutsListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutsListResponse' from JSON`,
  );
}
