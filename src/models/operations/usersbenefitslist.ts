/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by benefit type.
 */
export type BenefitTypeFilter =
  | components.BenefitType
  | Array<components.BenefitType>;

/**
 * Filter by organization ID.
 */
export type OrganizationIDFilter = string | Array<string>;

/**
 * Filter by order ID.
 */
export type OrderIDFilter = string | Array<string>;

/**
 * Filter by subscription ID.
 */
export type SubscriptionIDFilter = string | Array<string>;

export type UsersBenefitsListRequest = {
  /**
   * Filter by benefit type.
   */
  typeFilter?:
    | components.BenefitType
    | Array<components.BenefitType>
    | null
    | undefined;
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
  /**
   * Filter by order ID.
   */
  orderId?: string | Array<string> | null | undefined;
  /**
   * Filter by subscription ID.
   */
  subscriptionId?: string | Array<string> | null | undefined;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
  /**
   * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
   */
  sorting?: Array<components.UserBenefitSortProperty> | null | undefined;
};

export type UsersBenefitsListResponse = {
  result: components.ListResourceUserBenefit;
};

/** @internal */
export const BenefitTypeFilter$inboundSchema: z.ZodType<
  BenefitTypeFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.BenefitType$inboundSchema,
  z.array(components.BenefitType$inboundSchema),
]);

/** @internal */
export type BenefitTypeFilter$Outbound = string | Array<string>;

/** @internal */
export const BenefitTypeFilter$outboundSchema: z.ZodType<
  BenefitTypeFilter$Outbound,
  z.ZodTypeDef,
  BenefitTypeFilter
> = z.union([
  components.BenefitType$outboundSchema,
  z.array(components.BenefitType$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitTypeFilter$ {
  /** @deprecated use `BenefitTypeFilter$inboundSchema` instead. */
  export const inboundSchema = BenefitTypeFilter$inboundSchema;
  /** @deprecated use `BenefitTypeFilter$outboundSchema` instead. */
  export const outboundSchema = BenefitTypeFilter$outboundSchema;
  /** @deprecated use `BenefitTypeFilter$Outbound` instead. */
  export type Outbound = BenefitTypeFilter$Outbound;
}

export function benefitTypeFilterToJSON(
  benefitTypeFilter: BenefitTypeFilter,
): string {
  return JSON.stringify(
    BenefitTypeFilter$outboundSchema.parse(benefitTypeFilter),
  );
}

export function benefitTypeFilterFromJSON(
  jsonString: string,
): SafeParseResult<BenefitTypeFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BenefitTypeFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BenefitTypeFilter' from JSON`,
  );
}

/** @internal */
export const OrganizationIDFilter$inboundSchema: z.ZodType<
  OrganizationIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type OrganizationIDFilter$Outbound = string | Array<string>;

/** @internal */
export const OrganizationIDFilter$outboundSchema: z.ZodType<
  OrganizationIDFilter$Outbound,
  z.ZodTypeDef,
  OrganizationIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationIDFilter$ {
  /** @deprecated use `OrganizationIDFilter$inboundSchema` instead. */
  export const inboundSchema = OrganizationIDFilter$inboundSchema;
  /** @deprecated use `OrganizationIDFilter$outboundSchema` instead. */
  export const outboundSchema = OrganizationIDFilter$outboundSchema;
  /** @deprecated use `OrganizationIDFilter$Outbound` instead. */
  export type Outbound = OrganizationIDFilter$Outbound;
}

export function organizationIDFilterToJSON(
  organizationIDFilter: OrganizationIDFilter,
): string {
  return JSON.stringify(
    OrganizationIDFilter$outboundSchema.parse(organizationIDFilter),
  );
}

export function organizationIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationIDFilter' from JSON`,
  );
}

/** @internal */
export const OrderIDFilter$inboundSchema: z.ZodType<
  OrderIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type OrderIDFilter$Outbound = string | Array<string>;

/** @internal */
export const OrderIDFilter$outboundSchema: z.ZodType<
  OrderIDFilter$Outbound,
  z.ZodTypeDef,
  OrderIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderIDFilter$ {
  /** @deprecated use `OrderIDFilter$inboundSchema` instead. */
  export const inboundSchema = OrderIDFilter$inboundSchema;
  /** @deprecated use `OrderIDFilter$outboundSchema` instead. */
  export const outboundSchema = OrderIDFilter$outboundSchema;
  /** @deprecated use `OrderIDFilter$Outbound` instead. */
  export type Outbound = OrderIDFilter$Outbound;
}

export function orderIDFilterToJSON(orderIDFilter: OrderIDFilter): string {
  return JSON.stringify(OrderIDFilter$outboundSchema.parse(orderIDFilter));
}

export function orderIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<OrderIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderIDFilter' from JSON`,
  );
}

/** @internal */
export const SubscriptionIDFilter$inboundSchema: z.ZodType<
  SubscriptionIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type SubscriptionIDFilter$Outbound = string | Array<string>;

/** @internal */
export const SubscriptionIDFilter$outboundSchema: z.ZodType<
  SubscriptionIDFilter$Outbound,
  z.ZodTypeDef,
  SubscriptionIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionIDFilter$ {
  /** @deprecated use `SubscriptionIDFilter$inboundSchema` instead. */
  export const inboundSchema = SubscriptionIDFilter$inboundSchema;
  /** @deprecated use `SubscriptionIDFilter$outboundSchema` instead. */
  export const outboundSchema = SubscriptionIDFilter$outboundSchema;
  /** @deprecated use `SubscriptionIDFilter$Outbound` instead. */
  export type Outbound = SubscriptionIDFilter$Outbound;
}

export function subscriptionIDFilterToJSON(
  subscriptionIDFilter: SubscriptionIDFilter,
): string {
  return JSON.stringify(
    SubscriptionIDFilter$outboundSchema.parse(subscriptionIDFilter),
  );
}

export function subscriptionIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionIDFilter' from JSON`,
  );
}

/** @internal */
export const UsersBenefitsListRequest$inboundSchema: z.ZodType<
  UsersBenefitsListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type_filter: z.nullable(
    z.union([
      components.BenefitType$inboundSchema,
      z.array(components.BenefitType$inboundSchema),
    ]),
  ).optional(),
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  order_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  subscription_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(components.UserBenefitSortProperty$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "type_filter": "typeFilter",
    "organization_id": "organizationId",
    "order_id": "orderId",
    "subscription_id": "subscriptionId",
  });
});

/** @internal */
export type UsersBenefitsListRequest$Outbound = {
  type_filter?: string | Array<string> | null | undefined;
  organization_id?: string | Array<string> | null | undefined;
  order_id?: string | Array<string> | null | undefined;
  subscription_id?: string | Array<string> | null | undefined;
  page: number;
  limit: number;
  sorting?: Array<string> | null | undefined;
};

/** @internal */
export const UsersBenefitsListRequest$outboundSchema: z.ZodType<
  UsersBenefitsListRequest$Outbound,
  z.ZodTypeDef,
  UsersBenefitsListRequest
> = z.object({
  typeFilter: z.nullable(
    z.union([
      components.BenefitType$outboundSchema,
      z.array(components.BenefitType$outboundSchema),
    ]),
  ).optional(),
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  orderId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  subscriptionId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(
    z.array(components.UserBenefitSortProperty$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    typeFilter: "type_filter",
    organizationId: "organization_id",
    orderId: "order_id",
    subscriptionId: "subscription_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersBenefitsListRequest$ {
  /** @deprecated use `UsersBenefitsListRequest$inboundSchema` instead. */
  export const inboundSchema = UsersBenefitsListRequest$inboundSchema;
  /** @deprecated use `UsersBenefitsListRequest$outboundSchema` instead. */
  export const outboundSchema = UsersBenefitsListRequest$outboundSchema;
  /** @deprecated use `UsersBenefitsListRequest$Outbound` instead. */
  export type Outbound = UsersBenefitsListRequest$Outbound;
}

export function usersBenefitsListRequestToJSON(
  usersBenefitsListRequest: UsersBenefitsListRequest,
): string {
  return JSON.stringify(
    UsersBenefitsListRequest$outboundSchema.parse(usersBenefitsListRequest),
  );
}

export function usersBenefitsListRequestFromJSON(
  jsonString: string,
): SafeParseResult<UsersBenefitsListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersBenefitsListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersBenefitsListRequest' from JSON`,
  );
}

/** @internal */
export const UsersBenefitsListResponse$inboundSchema: z.ZodType<
  UsersBenefitsListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.ListResourceUserBenefit$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type UsersBenefitsListResponse$Outbound = {
  Result: components.ListResourceUserBenefit$Outbound;
};

/** @internal */
export const UsersBenefitsListResponse$outboundSchema: z.ZodType<
  UsersBenefitsListResponse$Outbound,
  z.ZodTypeDef,
  UsersBenefitsListResponse
> = z.object({
  result: components.ListResourceUserBenefit$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersBenefitsListResponse$ {
  /** @deprecated use `UsersBenefitsListResponse$inboundSchema` instead. */
  export const inboundSchema = UsersBenefitsListResponse$inboundSchema;
  /** @deprecated use `UsersBenefitsListResponse$outboundSchema` instead. */
  export const outboundSchema = UsersBenefitsListResponse$outboundSchema;
  /** @deprecated use `UsersBenefitsListResponse$Outbound` instead. */
  export type Outbound = UsersBenefitsListResponse$Outbound;
}

export function usersBenefitsListResponseToJSON(
  usersBenefitsListResponse: UsersBenefitsListResponse,
): string {
  return JSON.stringify(
    UsersBenefitsListResponse$outboundSchema.parse(usersBenefitsListResponse),
  );
}

export function usersBenefitsListResponseFromJSON(
  jsonString: string,
): SafeParseResult<UsersBenefitsListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersBenefitsListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersBenefitsListResponse' from JSON`,
  );
}
