/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FilesUploadedRequest = {
  /**
   * The file ID.
   */
  id: string;
  fileUploadCompleted: components.FileUploadCompleted;
};

/**
 * File upload completed.
 */
export type FilesUploadedResponseFilesUploaded =
  | (components.DownloadableFileRead & { service: "downloadable" })
  | (components.ProductMediaFileRead & { service: "product_media" })
  | (components.OrganizationAvatarFileRead & {
    service: "organization_avatar";
  });

/** @internal */
export const FilesUploadedRequest$inboundSchema: z.ZodType<
  FilesUploadedRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  FileUploadCompleted: components.FileUploadCompleted$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "FileUploadCompleted": "fileUploadCompleted",
  });
});

/** @internal */
export type FilesUploadedRequest$Outbound = {
  id: string;
  FileUploadCompleted: components.FileUploadCompleted$Outbound;
};

/** @internal */
export const FilesUploadedRequest$outboundSchema: z.ZodType<
  FilesUploadedRequest$Outbound,
  z.ZodTypeDef,
  FilesUploadedRequest
> = z.object({
  id: z.string(),
  fileUploadCompleted: components.FileUploadCompleted$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    fileUploadCompleted: "FileUploadCompleted",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilesUploadedRequest$ {
  /** @deprecated use `FilesUploadedRequest$inboundSchema` instead. */
  export const inboundSchema = FilesUploadedRequest$inboundSchema;
  /** @deprecated use `FilesUploadedRequest$outboundSchema` instead. */
  export const outboundSchema = FilesUploadedRequest$outboundSchema;
  /** @deprecated use `FilesUploadedRequest$Outbound` instead. */
  export type Outbound = FilesUploadedRequest$Outbound;
}

export function filesUploadedRequestToJSON(
  filesUploadedRequest: FilesUploadedRequest,
): string {
  return JSON.stringify(
    FilesUploadedRequest$outboundSchema.parse(filesUploadedRequest),
  );
}

export function filesUploadedRequestFromJSON(
  jsonString: string,
): SafeParseResult<FilesUploadedRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilesUploadedRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilesUploadedRequest' from JSON`,
  );
}

/** @internal */
export const FilesUploadedResponseFilesUploaded$inboundSchema: z.ZodType<
  FilesUploadedResponseFilesUploaded,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.DownloadableFileRead$inboundSchema.and(
    z.object({ service: z.literal("downloadable") }).transform((v) => ({
      service: v.service,
    })),
  ),
  components.ProductMediaFileRead$inboundSchema.and(
    z.object({ service: z.literal("product_media") }).transform((v) => ({
      service: v.service,
    })),
  ),
  components.OrganizationAvatarFileRead$inboundSchema.and(
    z.object({ service: z.literal("organization_avatar") }).transform((v) => ({
      service: v.service,
    })),
  ),
]);

/** @internal */
export type FilesUploadedResponseFilesUploaded$Outbound =
  | (components.DownloadableFileRead$Outbound & { service: "downloadable" })
  | (components.ProductMediaFileRead$Outbound & { service: "product_media" })
  | (components.OrganizationAvatarFileRead$Outbound & {
    service: "organization_avatar";
  });

/** @internal */
export const FilesUploadedResponseFilesUploaded$outboundSchema: z.ZodType<
  FilesUploadedResponseFilesUploaded$Outbound,
  z.ZodTypeDef,
  FilesUploadedResponseFilesUploaded
> = z.union([
  components.DownloadableFileRead$outboundSchema.and(
    z.object({ service: z.literal("downloadable") }).transform((v) => ({
      service: v.service,
    })),
  ),
  components.ProductMediaFileRead$outboundSchema.and(
    z.object({ service: z.literal("product_media") }).transform((v) => ({
      service: v.service,
    })),
  ),
  components.OrganizationAvatarFileRead$outboundSchema.and(
    z.object({ service: z.literal("organization_avatar") }).transform((v) => ({
      service: v.service,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilesUploadedResponseFilesUploaded$ {
  /** @deprecated use `FilesUploadedResponseFilesUploaded$inboundSchema` instead. */
  export const inboundSchema = FilesUploadedResponseFilesUploaded$inboundSchema;
  /** @deprecated use `FilesUploadedResponseFilesUploaded$outboundSchema` instead. */
  export const outboundSchema =
    FilesUploadedResponseFilesUploaded$outboundSchema;
  /** @deprecated use `FilesUploadedResponseFilesUploaded$Outbound` instead. */
  export type Outbound = FilesUploadedResponseFilesUploaded$Outbound;
}

export function filesUploadedResponseFilesUploadedToJSON(
  filesUploadedResponseFilesUploaded: FilesUploadedResponseFilesUploaded,
): string {
  return JSON.stringify(
    FilesUploadedResponseFilesUploaded$outboundSchema.parse(
      filesUploadedResponseFilesUploaded,
    ),
  );
}

export function filesUploadedResponseFilesUploadedFromJSON(
  jsonString: string,
): SafeParseResult<FilesUploadedResponseFilesUploaded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FilesUploadedResponseFilesUploaded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilesUploadedResponseFilesUploaded' from JSON`,
  );
}
