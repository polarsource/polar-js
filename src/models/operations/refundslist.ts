/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  ListResourceRefund,
  ListResourceRefund$inboundSchema,
  ListResourceRefund$Outbound,
  ListResourceRefund$outboundSchema,
} from "../components/listresourcerefund.js";
import {
  RefundSortProperty,
  RefundSortProperty$inboundSchema,
  RefundSortProperty$outboundSchema,
} from "../components/refundsortproperty.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by refund ID.
 */
export type RefundIDFilter = string | Array<string>;

/**
 * Filter by organization ID.
 */
export type RefundsListQueryParamOrganizationIDFilter = string | Array<string>;

/**
 * Filter by order ID.
 */
export type OrderIDFilter = string | Array<string>;

/**
 * Filter by subscription ID.
 */
export type SubscriptionIDFilter = string | Array<string>;

/**
 * Filter by customer ID.
 */
export type RefundsListQueryParamCustomerIDFilter = string | Array<string>;

export type RefundsListRequest = {
  /**
   * Filter by refund ID.
   */
  id?: string | Array<string> | null | undefined;
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
  /**
   * Filter by order ID.
   */
  orderId?: string | Array<string> | null | undefined;
  /**
   * Filter by subscription ID.
   */
  subscriptionId?: string | Array<string> | null | undefined;
  /**
   * Filter by customer ID.
   */
  customerId?: string | Array<string> | null | undefined;
  /**
   * Filter by `succeeded`.
   */
  succeeded?: boolean | null | undefined;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
  /**
   * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
   */
  sorting?: Array<RefundSortProperty> | null | undefined;
};

export type RefundsListResponse = {
  result: ListResourceRefund;
};

/** @internal */
export const RefundIDFilter$inboundSchema: z.ZodType<
  RefundIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type RefundIDFilter$Outbound = string | Array<string>;

/** @internal */
export const RefundIDFilter$outboundSchema: z.ZodType<
  RefundIDFilter$Outbound,
  z.ZodTypeDef,
  RefundIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundIDFilter$ {
  /** @deprecated use `RefundIDFilter$inboundSchema` instead. */
  export const inboundSchema = RefundIDFilter$inboundSchema;
  /** @deprecated use `RefundIDFilter$outboundSchema` instead. */
  export const outboundSchema = RefundIDFilter$outboundSchema;
  /** @deprecated use `RefundIDFilter$Outbound` instead. */
  export type Outbound = RefundIDFilter$Outbound;
}

export function refundIDFilterToJSON(refundIDFilter: RefundIDFilter): string {
  return JSON.stringify(RefundIDFilter$outboundSchema.parse(refundIDFilter));
}

export function refundIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<RefundIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefundIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundIDFilter' from JSON`,
  );
}

/** @internal */
export const RefundsListQueryParamOrganizationIDFilter$inboundSchema: z.ZodType<
  RefundsListQueryParamOrganizationIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type RefundsListQueryParamOrganizationIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const RefundsListQueryParamOrganizationIDFilter$outboundSchema:
  z.ZodType<
    RefundsListQueryParamOrganizationIDFilter$Outbound,
    z.ZodTypeDef,
    RefundsListQueryParamOrganizationIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsListQueryParamOrganizationIDFilter$ {
  /** @deprecated use `RefundsListQueryParamOrganizationIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    RefundsListQueryParamOrganizationIDFilter$inboundSchema;
  /** @deprecated use `RefundsListQueryParamOrganizationIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    RefundsListQueryParamOrganizationIDFilter$outboundSchema;
  /** @deprecated use `RefundsListQueryParamOrganizationIDFilter$Outbound` instead. */
  export type Outbound = RefundsListQueryParamOrganizationIDFilter$Outbound;
}

export function refundsListQueryParamOrganizationIDFilterToJSON(
  refundsListQueryParamOrganizationIDFilter:
    RefundsListQueryParamOrganizationIDFilter,
): string {
  return JSON.stringify(
    RefundsListQueryParamOrganizationIDFilter$outboundSchema.parse(
      refundsListQueryParamOrganizationIDFilter,
    ),
  );
}

export function refundsListQueryParamOrganizationIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  RefundsListQueryParamOrganizationIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RefundsListQueryParamOrganizationIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RefundsListQueryParamOrganizationIDFilter' from JSON`,
  );
}

/** @internal */
export const OrderIDFilter$inboundSchema: z.ZodType<
  OrderIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type OrderIDFilter$Outbound = string | Array<string>;

/** @internal */
export const OrderIDFilter$outboundSchema: z.ZodType<
  OrderIDFilter$Outbound,
  z.ZodTypeDef,
  OrderIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderIDFilter$ {
  /** @deprecated use `OrderIDFilter$inboundSchema` instead. */
  export const inboundSchema = OrderIDFilter$inboundSchema;
  /** @deprecated use `OrderIDFilter$outboundSchema` instead. */
  export const outboundSchema = OrderIDFilter$outboundSchema;
  /** @deprecated use `OrderIDFilter$Outbound` instead. */
  export type Outbound = OrderIDFilter$Outbound;
}

export function orderIDFilterToJSON(orderIDFilter: OrderIDFilter): string {
  return JSON.stringify(OrderIDFilter$outboundSchema.parse(orderIDFilter));
}

export function orderIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<OrderIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderIDFilter' from JSON`,
  );
}

/** @internal */
export const SubscriptionIDFilter$inboundSchema: z.ZodType<
  SubscriptionIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type SubscriptionIDFilter$Outbound = string | Array<string>;

/** @internal */
export const SubscriptionIDFilter$outboundSchema: z.ZodType<
  SubscriptionIDFilter$Outbound,
  z.ZodTypeDef,
  SubscriptionIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionIDFilter$ {
  /** @deprecated use `SubscriptionIDFilter$inboundSchema` instead. */
  export const inboundSchema = SubscriptionIDFilter$inboundSchema;
  /** @deprecated use `SubscriptionIDFilter$outboundSchema` instead. */
  export const outboundSchema = SubscriptionIDFilter$outboundSchema;
  /** @deprecated use `SubscriptionIDFilter$Outbound` instead. */
  export type Outbound = SubscriptionIDFilter$Outbound;
}

export function subscriptionIDFilterToJSON(
  subscriptionIDFilter: SubscriptionIDFilter,
): string {
  return JSON.stringify(
    SubscriptionIDFilter$outboundSchema.parse(subscriptionIDFilter),
  );
}

export function subscriptionIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionIDFilter' from JSON`,
  );
}

/** @internal */
export const RefundsListQueryParamCustomerIDFilter$inboundSchema: z.ZodType<
  RefundsListQueryParamCustomerIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type RefundsListQueryParamCustomerIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const RefundsListQueryParamCustomerIDFilter$outboundSchema: z.ZodType<
  RefundsListQueryParamCustomerIDFilter$Outbound,
  z.ZodTypeDef,
  RefundsListQueryParamCustomerIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsListQueryParamCustomerIDFilter$ {
  /** @deprecated use `RefundsListQueryParamCustomerIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    RefundsListQueryParamCustomerIDFilter$inboundSchema;
  /** @deprecated use `RefundsListQueryParamCustomerIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    RefundsListQueryParamCustomerIDFilter$outboundSchema;
  /** @deprecated use `RefundsListQueryParamCustomerIDFilter$Outbound` instead. */
  export type Outbound = RefundsListQueryParamCustomerIDFilter$Outbound;
}

export function refundsListQueryParamCustomerIDFilterToJSON(
  refundsListQueryParamCustomerIDFilter: RefundsListQueryParamCustomerIDFilter,
): string {
  return JSON.stringify(
    RefundsListQueryParamCustomerIDFilter$outboundSchema.parse(
      refundsListQueryParamCustomerIDFilter,
    ),
  );
}

export function refundsListQueryParamCustomerIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<RefundsListQueryParamCustomerIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RefundsListQueryParamCustomerIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundsListQueryParamCustomerIDFilter' from JSON`,
  );
}

/** @internal */
export const RefundsListRequest$inboundSchema: z.ZodType<
  RefundsListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  order_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  subscription_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  succeeded: z.nullable(z.boolean()).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(RefundSortProperty$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "order_id": "orderId",
    "subscription_id": "subscriptionId",
    "customer_id": "customerId",
  });
});

/** @internal */
export type RefundsListRequest$Outbound = {
  id?: string | Array<string> | null | undefined;
  organization_id?: string | Array<string> | null | undefined;
  order_id?: string | Array<string> | null | undefined;
  subscription_id?: string | Array<string> | null | undefined;
  customer_id?: string | Array<string> | null | undefined;
  succeeded?: boolean | null | undefined;
  page: number;
  limit: number;
  sorting?: Array<string> | null | undefined;
};

/** @internal */
export const RefundsListRequest$outboundSchema: z.ZodType<
  RefundsListRequest$Outbound,
  z.ZodTypeDef,
  RefundsListRequest
> = z.object({
  id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  orderId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  subscriptionId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  customerId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  succeeded: z.nullable(z.boolean()).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(RefundSortProperty$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    orderId: "order_id",
    subscriptionId: "subscription_id",
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsListRequest$ {
  /** @deprecated use `RefundsListRequest$inboundSchema` instead. */
  export const inboundSchema = RefundsListRequest$inboundSchema;
  /** @deprecated use `RefundsListRequest$outboundSchema` instead. */
  export const outboundSchema = RefundsListRequest$outboundSchema;
  /** @deprecated use `RefundsListRequest$Outbound` instead. */
  export type Outbound = RefundsListRequest$Outbound;
}

export function refundsListRequestToJSON(
  refundsListRequest: RefundsListRequest,
): string {
  return JSON.stringify(
    RefundsListRequest$outboundSchema.parse(refundsListRequest),
  );
}

export function refundsListRequestFromJSON(
  jsonString: string,
): SafeParseResult<RefundsListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefundsListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundsListRequest' from JSON`,
  );
}

/** @internal */
export const RefundsListResponse$inboundSchema: z.ZodType<
  RefundsListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: ListResourceRefund$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type RefundsListResponse$Outbound = {
  Result: ListResourceRefund$Outbound;
};

/** @internal */
export const RefundsListResponse$outboundSchema: z.ZodType<
  RefundsListResponse$Outbound,
  z.ZodTypeDef,
  RefundsListResponse
> = z.object({
  result: ListResourceRefund$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundsListResponse$ {
  /** @deprecated use `RefundsListResponse$inboundSchema` instead. */
  export const inboundSchema = RefundsListResponse$inboundSchema;
  /** @deprecated use `RefundsListResponse$outboundSchema` instead. */
  export const outboundSchema = RefundsListResponse$outboundSchema;
  /** @deprecated use `RefundsListResponse$Outbound` instead. */
  export type Outbound = RefundsListResponse$Outbound;
}

export function refundsListResponseToJSON(
  refundsListResponse: RefundsListResponse,
): string {
  return JSON.stringify(
    RefundsListResponse$outboundSchema.parse(refundsListResponse),
  );
}

export function refundsListResponseFromJSON(
  jsonString: string,
): SafeParseResult<RefundsListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefundsListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundsListResponse' from JSON`,
  );
}
