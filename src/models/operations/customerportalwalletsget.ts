/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerPortalWalletsGetSecurity = {
  customerSession: string;
};

export type CustomerPortalWalletsGetRequest = {
  /**
   * The wallet ID.
   */
  id: string;
};

/** @internal */
export const CustomerPortalWalletsGetSecurity$inboundSchema: z.ZodType<
  CustomerPortalWalletsGetSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_session: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_session": "customerSession",
  });
});

/** @internal */
export type CustomerPortalWalletsGetSecurity$Outbound = {
  customer_session: string;
};

/** @internal */
export const CustomerPortalWalletsGetSecurity$outboundSchema: z.ZodType<
  CustomerPortalWalletsGetSecurity$Outbound,
  z.ZodTypeDef,
  CustomerPortalWalletsGetSecurity
> = z.object({
  customerSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerSession: "customer_session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalWalletsGetSecurity$ {
  /** @deprecated use `CustomerPortalWalletsGetSecurity$inboundSchema` instead. */
  export const inboundSchema = CustomerPortalWalletsGetSecurity$inboundSchema;
  /** @deprecated use `CustomerPortalWalletsGetSecurity$outboundSchema` instead. */
  export const outboundSchema = CustomerPortalWalletsGetSecurity$outboundSchema;
  /** @deprecated use `CustomerPortalWalletsGetSecurity$Outbound` instead. */
  export type Outbound = CustomerPortalWalletsGetSecurity$Outbound;
}

export function customerPortalWalletsGetSecurityToJSON(
  customerPortalWalletsGetSecurity: CustomerPortalWalletsGetSecurity,
): string {
  return JSON.stringify(
    CustomerPortalWalletsGetSecurity$outboundSchema.parse(
      customerPortalWalletsGetSecurity,
    ),
  );
}

export function customerPortalWalletsGetSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CustomerPortalWalletsGetSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerPortalWalletsGetSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerPortalWalletsGetSecurity' from JSON`,
  );
}

/** @internal */
export const CustomerPortalWalletsGetRequest$inboundSchema: z.ZodType<
  CustomerPortalWalletsGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CustomerPortalWalletsGetRequest$Outbound = {
  id: string;
};

/** @internal */
export const CustomerPortalWalletsGetRequest$outboundSchema: z.ZodType<
  CustomerPortalWalletsGetRequest$Outbound,
  z.ZodTypeDef,
  CustomerPortalWalletsGetRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalWalletsGetRequest$ {
  /** @deprecated use `CustomerPortalWalletsGetRequest$inboundSchema` instead. */
  export const inboundSchema = CustomerPortalWalletsGetRequest$inboundSchema;
  /** @deprecated use `CustomerPortalWalletsGetRequest$outboundSchema` instead. */
  export const outboundSchema = CustomerPortalWalletsGetRequest$outboundSchema;
  /** @deprecated use `CustomerPortalWalletsGetRequest$Outbound` instead. */
  export type Outbound = CustomerPortalWalletsGetRequest$Outbound;
}

export function customerPortalWalletsGetRequestToJSON(
  customerPortalWalletsGetRequest: CustomerPortalWalletsGetRequest,
): string {
  return JSON.stringify(
    CustomerPortalWalletsGetRequest$outboundSchema.parse(
      customerPortalWalletsGetRequest,
    ),
  );
}

export function customerPortalWalletsGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomerPortalWalletsGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerPortalWalletsGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerPortalWalletsGetRequest' from JSON`,
  );
}
