/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  PaymentMethodCard,
  PaymentMethodCard$inboundSchema,
  PaymentMethodCard$Outbound,
  PaymentMethodCard$outboundSchema,
} from "../components/paymentmethodcard.js";
import {
  PaymentMethodGeneric,
  PaymentMethodGeneric$inboundSchema,
  PaymentMethodGeneric$Outbound,
  PaymentMethodGeneric$outboundSchema,
} from "../components/paymentmethodgeneric.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerPortalCustomersAddPaymentMethodSecurity = {
  customerSession: string;
};

/**
 * Payment method created.
 */
export type CustomerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethod =
  | PaymentMethodGeneric
  | PaymentMethodCard;

/** @internal */
export const CustomerPortalCustomersAddPaymentMethodSecurity$inboundSchema:
  z.ZodType<
    CustomerPortalCustomersAddPaymentMethodSecurity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    customer_session: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "customer_session": "customerSession",
    });
  });

/** @internal */
export type CustomerPortalCustomersAddPaymentMethodSecurity$Outbound = {
  customer_session: string;
};

/** @internal */
export const CustomerPortalCustomersAddPaymentMethodSecurity$outboundSchema:
  z.ZodType<
    CustomerPortalCustomersAddPaymentMethodSecurity$Outbound,
    z.ZodTypeDef,
    CustomerPortalCustomersAddPaymentMethodSecurity
  > = z.object({
    customerSession: z.string(),
  }).transform((v) => {
    return remap$(v, {
      customerSession: "customer_session",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalCustomersAddPaymentMethodSecurity$ {
  /** @deprecated use `CustomerPortalCustomersAddPaymentMethodSecurity$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalCustomersAddPaymentMethodSecurity$inboundSchema;
  /** @deprecated use `CustomerPortalCustomersAddPaymentMethodSecurity$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalCustomersAddPaymentMethodSecurity$outboundSchema;
  /** @deprecated use `CustomerPortalCustomersAddPaymentMethodSecurity$Outbound` instead. */
  export type Outbound =
    CustomerPortalCustomersAddPaymentMethodSecurity$Outbound;
}

export function customerPortalCustomersAddPaymentMethodSecurityToJSON(
  customerPortalCustomersAddPaymentMethodSecurity:
    CustomerPortalCustomersAddPaymentMethodSecurity,
): string {
  return JSON.stringify(
    CustomerPortalCustomersAddPaymentMethodSecurity$outboundSchema.parse(
      customerPortalCustomersAddPaymentMethodSecurity,
    ),
  );
}

export function customerPortalCustomersAddPaymentMethodSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerPortalCustomersAddPaymentMethodSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalCustomersAddPaymentMethodSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomerPortalCustomersAddPaymentMethodSecurity' from JSON`,
  );
}

/** @internal */
export const CustomerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethod$inboundSchema:
  z.ZodType<
    CustomerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethod,
    z.ZodTypeDef,
    unknown
  > = z.union([
    PaymentMethodGeneric$inboundSchema,
    PaymentMethodCard$inboundSchema,
  ]);

/** @internal */
export type CustomerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethod$Outbound =
  | PaymentMethodGeneric$Outbound
  | PaymentMethodCard$Outbound;

/** @internal */
export const CustomerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethod$outboundSchema:
  z.ZodType<
    CustomerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethod$Outbound,
    z.ZodTypeDef,
    CustomerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethod
  > = z.union([
    PaymentMethodGeneric$outboundSchema,
    PaymentMethodCard$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethod$ {
  /** @deprecated use `CustomerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethod$inboundSchema;
  /** @deprecated use `CustomerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethod$outboundSchema;
  /** @deprecated use `CustomerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethod$Outbound` instead. */
  export type Outbound =
    CustomerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethod$Outbound;
}

export function customerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethodToJSON(
  customerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethod:
    CustomerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethod,
): string {
  return JSON.stringify(
    CustomerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethod$outboundSchema
      .parse(
        customerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethod,
      ),
  );
}

export function customerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethodFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethod,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethod$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CustomerPortalCustomersAddPaymentMethodResponseCustomerPortalCustomersAddPaymentMethod' from JSON`,
  );
}
