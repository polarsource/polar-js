/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  CustomerOrderUpdate,
  CustomerOrderUpdate$inboundSchema,
  CustomerOrderUpdate$Outbound,
  CustomerOrderUpdate$outboundSchema,
} from "../components/customerorderupdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerPortalOrdersUpdateSecurity = {
  customerSession: string;
};

export type CustomerPortalOrdersUpdateRequest = {
  /**
   * The order ID.
   */
  id: string;
  customerOrderUpdate: CustomerOrderUpdate;
};

/** @internal */
export const CustomerPortalOrdersUpdateSecurity$inboundSchema: z.ZodType<
  CustomerPortalOrdersUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_session: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_session": "customerSession",
  });
});

/** @internal */
export type CustomerPortalOrdersUpdateSecurity$Outbound = {
  customer_session: string;
};

/** @internal */
export const CustomerPortalOrdersUpdateSecurity$outboundSchema: z.ZodType<
  CustomerPortalOrdersUpdateSecurity$Outbound,
  z.ZodTypeDef,
  CustomerPortalOrdersUpdateSecurity
> = z.object({
  customerSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerSession: "customer_session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalOrdersUpdateSecurity$ {
  /** @deprecated use `CustomerPortalOrdersUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema = CustomerPortalOrdersUpdateSecurity$inboundSchema;
  /** @deprecated use `CustomerPortalOrdersUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalOrdersUpdateSecurity$outboundSchema;
  /** @deprecated use `CustomerPortalOrdersUpdateSecurity$Outbound` instead. */
  export type Outbound = CustomerPortalOrdersUpdateSecurity$Outbound;
}

export function customerPortalOrdersUpdateSecurityToJSON(
  customerPortalOrdersUpdateSecurity: CustomerPortalOrdersUpdateSecurity,
): string {
  return JSON.stringify(
    CustomerPortalOrdersUpdateSecurity$outboundSchema.parse(
      customerPortalOrdersUpdateSecurity,
    ),
  );
}

export function customerPortalOrdersUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CustomerPortalOrdersUpdateSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalOrdersUpdateSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerPortalOrdersUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const CustomerPortalOrdersUpdateRequest$inboundSchema: z.ZodType<
  CustomerPortalOrdersUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  CustomerOrderUpdate: CustomerOrderUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CustomerOrderUpdate": "customerOrderUpdate",
  });
});

/** @internal */
export type CustomerPortalOrdersUpdateRequest$Outbound = {
  id: string;
  CustomerOrderUpdate: CustomerOrderUpdate$Outbound;
};

/** @internal */
export const CustomerPortalOrdersUpdateRequest$outboundSchema: z.ZodType<
  CustomerPortalOrdersUpdateRequest$Outbound,
  z.ZodTypeDef,
  CustomerPortalOrdersUpdateRequest
> = z.object({
  id: z.string(),
  customerOrderUpdate: CustomerOrderUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    customerOrderUpdate: "CustomerOrderUpdate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalOrdersUpdateRequest$ {
  /** @deprecated use `CustomerPortalOrdersUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = CustomerPortalOrdersUpdateRequest$inboundSchema;
  /** @deprecated use `CustomerPortalOrdersUpdateRequest$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalOrdersUpdateRequest$outboundSchema;
  /** @deprecated use `CustomerPortalOrdersUpdateRequest$Outbound` instead. */
  export type Outbound = CustomerPortalOrdersUpdateRequest$Outbound;
}

export function customerPortalOrdersUpdateRequestToJSON(
  customerPortalOrdersUpdateRequest: CustomerPortalOrdersUpdateRequest,
): string {
  return JSON.stringify(
    CustomerPortalOrdersUpdateRequest$outboundSchema.parse(
      customerPortalOrdersUpdateRequest,
    ),
  );
}

export function customerPortalOrdersUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomerPortalOrdersUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerPortalOrdersUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerPortalOrdersUpdateRequest' from JSON`,
  );
}
