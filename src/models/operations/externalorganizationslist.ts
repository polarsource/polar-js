/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  ExternalOrganizationSortProperty,
  ExternalOrganizationSortProperty$inboundSchema,
  ExternalOrganizationSortProperty$outboundSchema,
} from "../components/externalorganizationsortproperty.js";
import {
  ListResourceExternalOrganization,
  ListResourceExternalOrganization$inboundSchema,
  ListResourceExternalOrganization$Outbound,
  ListResourceExternalOrganization$outboundSchema,
} from "../components/listresourceexternalorganization.js";
import {
  Platforms,
  Platforms$inboundSchema,
  Platforms$outboundSchema,
} from "../components/platforms.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by platform.
 */
export type PlatformFilter = Platforms | Array<Platforms>;

/**
 * Filter by name.
 */
export type RepositoryNameFilter = string | Array<string>;

/**
 * Filter by organization ID.
 */
export type OrganizationIDFilter = string | Array<string>;

export type ExternalOrganizationsListRequest = {
  /**
   * Filter by platform.
   */
  platform?: Platforms | Array<Platforms> | null | undefined;
  /**
   * Filter by name.
   */
  name?: string | Array<string> | null | undefined;
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
  /**
   * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
   */
  sorting?: Array<ExternalOrganizationSortProperty> | null | undefined;
};

export type ExternalOrganizationsListResponse = {
  result: ListResourceExternalOrganization;
};

/** @internal */
export const PlatformFilter$inboundSchema: z.ZodType<
  PlatformFilter,
  z.ZodTypeDef,
  unknown
> = z.union([Platforms$inboundSchema, z.array(Platforms$inboundSchema)]);

/** @internal */
export type PlatformFilter$Outbound = string | Array<string>;

/** @internal */
export const PlatformFilter$outboundSchema: z.ZodType<
  PlatformFilter$Outbound,
  z.ZodTypeDef,
  PlatformFilter
> = z.union([Platforms$outboundSchema, z.array(Platforms$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlatformFilter$ {
  /** @deprecated use `PlatformFilter$inboundSchema` instead. */
  export const inboundSchema = PlatformFilter$inboundSchema;
  /** @deprecated use `PlatformFilter$outboundSchema` instead. */
  export const outboundSchema = PlatformFilter$outboundSchema;
  /** @deprecated use `PlatformFilter$Outbound` instead. */
  export type Outbound = PlatformFilter$Outbound;
}

export function platformFilterToJSON(platformFilter: PlatformFilter): string {
  return JSON.stringify(PlatformFilter$outboundSchema.parse(platformFilter));
}

export function platformFilterFromJSON(
  jsonString: string,
): SafeParseResult<PlatformFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlatformFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlatformFilter' from JSON`,
  );
}

/** @internal */
export const RepositoryNameFilter$inboundSchema: z.ZodType<
  RepositoryNameFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type RepositoryNameFilter$Outbound = string | Array<string>;

/** @internal */
export const RepositoryNameFilter$outboundSchema: z.ZodType<
  RepositoryNameFilter$Outbound,
  z.ZodTypeDef,
  RepositoryNameFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RepositoryNameFilter$ {
  /** @deprecated use `RepositoryNameFilter$inboundSchema` instead. */
  export const inboundSchema = RepositoryNameFilter$inboundSchema;
  /** @deprecated use `RepositoryNameFilter$outboundSchema` instead. */
  export const outboundSchema = RepositoryNameFilter$outboundSchema;
  /** @deprecated use `RepositoryNameFilter$Outbound` instead. */
  export type Outbound = RepositoryNameFilter$Outbound;
}

export function repositoryNameFilterToJSON(
  repositoryNameFilter: RepositoryNameFilter,
): string {
  return JSON.stringify(
    RepositoryNameFilter$outboundSchema.parse(repositoryNameFilter),
  );
}

export function repositoryNameFilterFromJSON(
  jsonString: string,
): SafeParseResult<RepositoryNameFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RepositoryNameFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RepositoryNameFilter' from JSON`,
  );
}

/** @internal */
export const OrganizationIDFilter$inboundSchema: z.ZodType<
  OrganizationIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type OrganizationIDFilter$Outbound = string | Array<string>;

/** @internal */
export const OrganizationIDFilter$outboundSchema: z.ZodType<
  OrganizationIDFilter$Outbound,
  z.ZodTypeDef,
  OrganizationIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationIDFilter$ {
  /** @deprecated use `OrganizationIDFilter$inboundSchema` instead. */
  export const inboundSchema = OrganizationIDFilter$inboundSchema;
  /** @deprecated use `OrganizationIDFilter$outboundSchema` instead. */
  export const outboundSchema = OrganizationIDFilter$outboundSchema;
  /** @deprecated use `OrganizationIDFilter$Outbound` instead. */
  export type Outbound = OrganizationIDFilter$Outbound;
}

export function organizationIDFilterToJSON(
  organizationIDFilter: OrganizationIDFilter,
): string {
  return JSON.stringify(
    OrganizationIDFilter$outboundSchema.parse(organizationIDFilter),
  );
}

export function organizationIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationIDFilter' from JSON`,
  );
}

/** @internal */
export const ExternalOrganizationsListRequest$inboundSchema: z.ZodType<
  ExternalOrganizationsListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  platform: z.nullable(
    z.union([Platforms$inboundSchema, z.array(Platforms$inboundSchema)]),
  ).optional(),
  name: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(ExternalOrganizationSortProperty$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
  });
});

/** @internal */
export type ExternalOrganizationsListRequest$Outbound = {
  platform?: string | Array<string> | null | undefined;
  name?: string | Array<string> | null | undefined;
  organization_id?: string | Array<string> | null | undefined;
  page: number;
  limit: number;
  sorting?: Array<string> | null | undefined;
};

/** @internal */
export const ExternalOrganizationsListRequest$outboundSchema: z.ZodType<
  ExternalOrganizationsListRequest$Outbound,
  z.ZodTypeDef,
  ExternalOrganizationsListRequest
> = z.object({
  platform: z.nullable(
    z.union([Platforms$outboundSchema, z.array(Platforms$outboundSchema)]),
  ).optional(),
  name: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(ExternalOrganizationSortProperty$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalOrganizationsListRequest$ {
  /** @deprecated use `ExternalOrganizationsListRequest$inboundSchema` instead. */
  export const inboundSchema = ExternalOrganizationsListRequest$inboundSchema;
  /** @deprecated use `ExternalOrganizationsListRequest$outboundSchema` instead. */
  export const outboundSchema = ExternalOrganizationsListRequest$outboundSchema;
  /** @deprecated use `ExternalOrganizationsListRequest$Outbound` instead. */
  export type Outbound = ExternalOrganizationsListRequest$Outbound;
}

export function externalOrganizationsListRequestToJSON(
  externalOrganizationsListRequest: ExternalOrganizationsListRequest,
): string {
  return JSON.stringify(
    ExternalOrganizationsListRequest$outboundSchema.parse(
      externalOrganizationsListRequest,
    ),
  );
}

export function externalOrganizationsListRequestFromJSON(
  jsonString: string,
): SafeParseResult<ExternalOrganizationsListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExternalOrganizationsListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalOrganizationsListRequest' from JSON`,
  );
}

/** @internal */
export const ExternalOrganizationsListResponse$inboundSchema: z.ZodType<
  ExternalOrganizationsListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: ListResourceExternalOrganization$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ExternalOrganizationsListResponse$Outbound = {
  Result: ListResourceExternalOrganization$Outbound;
};

/** @internal */
export const ExternalOrganizationsListResponse$outboundSchema: z.ZodType<
  ExternalOrganizationsListResponse$Outbound,
  z.ZodTypeDef,
  ExternalOrganizationsListResponse
> = z.object({
  result: ListResourceExternalOrganization$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalOrganizationsListResponse$ {
  /** @deprecated use `ExternalOrganizationsListResponse$inboundSchema` instead. */
  export const inboundSchema = ExternalOrganizationsListResponse$inboundSchema;
  /** @deprecated use `ExternalOrganizationsListResponse$outboundSchema` instead. */
  export const outboundSchema =
    ExternalOrganizationsListResponse$outboundSchema;
  /** @deprecated use `ExternalOrganizationsListResponse$Outbound` instead. */
  export type Outbound = ExternalOrganizationsListResponse$Outbound;
}

export function externalOrganizationsListResponseToJSON(
  externalOrganizationsListResponse: ExternalOrganizationsListResponse,
): string {
  return JSON.stringify(
    ExternalOrganizationsListResponse$outboundSchema.parse(
      externalOrganizationsListResponse,
    ),
  );
}

export function externalOrganizationsListResponseFromJSON(
  jsonString: string,
): SafeParseResult<ExternalOrganizationsListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExternalOrganizationsListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalOrganizationsListResponse' from JSON`,
  );
}
