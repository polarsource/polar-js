/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by organization ID.
 */
export type UsersSubscriptionsListQueryParamOrganizationIDFilter =
  | string
  | Array<string>;

/**
 * Filter by product ID.
 */
export type QueryParamProductIDFilter = string | Array<string>;

export type UsersSubscriptionsListRequest = {
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
  /**
   * Filter by product ID.
   */
  productId?: string | Array<string> | null | undefined;
  /**
   * Filter by active or cancelled subscription.
   */
  active?: boolean | null | undefined;
  /**
   * Search by product or organization name.
   */
  query?: string | null | undefined;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
  /**
   * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
   */
  sorting?: Array<components.UserSubscriptionSortProperty> | null | undefined;
};

export type UsersSubscriptionsListResponse = {
  result: components.ListResourceUserSubscription;
};

/** @internal */
export const UsersSubscriptionsListQueryParamOrganizationIDFilter$inboundSchema:
  z.ZodType<
    UsersSubscriptionsListQueryParamOrganizationIDFilter,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type UsersSubscriptionsListQueryParamOrganizationIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const UsersSubscriptionsListQueryParamOrganizationIDFilter$outboundSchema:
  z.ZodType<
    UsersSubscriptionsListQueryParamOrganizationIDFilter$Outbound,
    z.ZodTypeDef,
    UsersSubscriptionsListQueryParamOrganizationIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersSubscriptionsListQueryParamOrganizationIDFilter$ {
  /** @deprecated use `UsersSubscriptionsListQueryParamOrganizationIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    UsersSubscriptionsListQueryParamOrganizationIDFilter$inboundSchema;
  /** @deprecated use `UsersSubscriptionsListQueryParamOrganizationIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    UsersSubscriptionsListQueryParamOrganizationIDFilter$outboundSchema;
  /** @deprecated use `UsersSubscriptionsListQueryParamOrganizationIDFilter$Outbound` instead. */
  export type Outbound =
    UsersSubscriptionsListQueryParamOrganizationIDFilter$Outbound;
}

export function usersSubscriptionsListQueryParamOrganizationIDFilterToJSON(
  usersSubscriptionsListQueryParamOrganizationIDFilter:
    UsersSubscriptionsListQueryParamOrganizationIDFilter,
): string {
  return JSON.stringify(
    UsersSubscriptionsListQueryParamOrganizationIDFilter$outboundSchema.parse(
      usersSubscriptionsListQueryParamOrganizationIDFilter,
    ),
  );
}

export function usersSubscriptionsListQueryParamOrganizationIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  UsersSubscriptionsListQueryParamOrganizationIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UsersSubscriptionsListQueryParamOrganizationIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UsersSubscriptionsListQueryParamOrganizationIDFilter' from JSON`,
  );
}

/** @internal */
export const QueryParamProductIDFilter$inboundSchema: z.ZodType<
  QueryParamProductIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type QueryParamProductIDFilter$Outbound = string | Array<string>;

/** @internal */
export const QueryParamProductIDFilter$outboundSchema: z.ZodType<
  QueryParamProductIDFilter$Outbound,
  z.ZodTypeDef,
  QueryParamProductIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamProductIDFilter$ {
  /** @deprecated use `QueryParamProductIDFilter$inboundSchema` instead. */
  export const inboundSchema = QueryParamProductIDFilter$inboundSchema;
  /** @deprecated use `QueryParamProductIDFilter$outboundSchema` instead. */
  export const outboundSchema = QueryParamProductIDFilter$outboundSchema;
  /** @deprecated use `QueryParamProductIDFilter$Outbound` instead. */
  export type Outbound = QueryParamProductIDFilter$Outbound;
}

export function queryParamProductIDFilterToJSON(
  queryParamProductIDFilter: QueryParamProductIDFilter,
): string {
  return JSON.stringify(
    QueryParamProductIDFilter$outboundSchema.parse(queryParamProductIDFilter),
  );
}

export function queryParamProductIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamProductIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamProductIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamProductIDFilter' from JSON`,
  );
}

/** @internal */
export const UsersSubscriptionsListRequest$inboundSchema: z.ZodType<
  UsersSubscriptionsListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  product_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  active: z.nullable(z.boolean()).optional(),
  query: z.nullable(z.string()).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(
    z.array(components.UserSubscriptionSortProperty$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "product_id": "productId",
  });
});

/** @internal */
export type UsersSubscriptionsListRequest$Outbound = {
  organization_id?: string | Array<string> | null | undefined;
  product_id?: string | Array<string> | null | undefined;
  active?: boolean | null | undefined;
  query?: string | null | undefined;
  page: number;
  limit: number;
  sorting?: Array<string> | null | undefined;
};

/** @internal */
export const UsersSubscriptionsListRequest$outboundSchema: z.ZodType<
  UsersSubscriptionsListRequest$Outbound,
  z.ZodTypeDef,
  UsersSubscriptionsListRequest
> = z.object({
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  productId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  active: z.nullable(z.boolean()).optional(),
  query: z.nullable(z.string()).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(
    z.array(components.UserSubscriptionSortProperty$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    productId: "product_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersSubscriptionsListRequest$ {
  /** @deprecated use `UsersSubscriptionsListRequest$inboundSchema` instead. */
  export const inboundSchema = UsersSubscriptionsListRequest$inboundSchema;
  /** @deprecated use `UsersSubscriptionsListRequest$outboundSchema` instead. */
  export const outboundSchema = UsersSubscriptionsListRequest$outboundSchema;
  /** @deprecated use `UsersSubscriptionsListRequest$Outbound` instead. */
  export type Outbound = UsersSubscriptionsListRequest$Outbound;
}

export function usersSubscriptionsListRequestToJSON(
  usersSubscriptionsListRequest: UsersSubscriptionsListRequest,
): string {
  return JSON.stringify(
    UsersSubscriptionsListRequest$outboundSchema.parse(
      usersSubscriptionsListRequest,
    ),
  );
}

export function usersSubscriptionsListRequestFromJSON(
  jsonString: string,
): SafeParseResult<UsersSubscriptionsListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersSubscriptionsListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersSubscriptionsListRequest' from JSON`,
  );
}

/** @internal */
export const UsersSubscriptionsListResponse$inboundSchema: z.ZodType<
  UsersSubscriptionsListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.ListResourceUserSubscription$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type UsersSubscriptionsListResponse$Outbound = {
  Result: components.ListResourceUserSubscription$Outbound;
};

/** @internal */
export const UsersSubscriptionsListResponse$outboundSchema: z.ZodType<
  UsersSubscriptionsListResponse$Outbound,
  z.ZodTypeDef,
  UsersSubscriptionsListResponse
> = z.object({
  result: components.ListResourceUserSubscription$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersSubscriptionsListResponse$ {
  /** @deprecated use `UsersSubscriptionsListResponse$inboundSchema` instead. */
  export const inboundSchema = UsersSubscriptionsListResponse$inboundSchema;
  /** @deprecated use `UsersSubscriptionsListResponse$outboundSchema` instead. */
  export const outboundSchema = UsersSubscriptionsListResponse$outboundSchema;
  /** @deprecated use `UsersSubscriptionsListResponse$Outbound` instead. */
  export type Outbound = UsersSubscriptionsListResponse$Outbound;
}

export function usersSubscriptionsListResponseToJSON(
  usersSubscriptionsListResponse: UsersSubscriptionsListResponse,
): string {
  return JSON.stringify(
    UsersSubscriptionsListResponse$outboundSchema.parse(
      usersSubscriptionsListResponse,
    ),
  );
}

export function usersSubscriptionsListResponseFromJSON(
  jsonString: string,
): SafeParseResult<UsersSubscriptionsListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersSubscriptionsListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersSubscriptionsListResponse' from JSON`,
  );
}
