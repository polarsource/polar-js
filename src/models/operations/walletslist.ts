/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  ListResourceWallet,
  ListResourceWallet$inboundSchema,
  ListResourceWallet$Outbound,
  ListResourceWallet$outboundSchema,
} from "../components/listresourcewallet.js";
import {
  WalletSortProperty,
  WalletSortProperty$inboundSchema,
  WalletSortProperty$outboundSchema,
} from "../components/walletsortproperty.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by organization ID.
 */
export type WalletsListQueryParamOrganizationIDFilter = string | Array<string>;

/**
 * Filter by customer ID.
 */
export type WalletsListQueryParamCustomerIDFilter = string | Array<string>;

export type WalletsListRequest = {
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
  /**
   * Filter by customer ID.
   */
  customerId?: string | Array<string> | null | undefined;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
  /**
   * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
   */
  sorting?: Array<WalletSortProperty> | null | undefined;
};

export type WalletsListResponse = {
  result: ListResourceWallet;
};

/** @internal */
export const WalletsListQueryParamOrganizationIDFilter$inboundSchema: z.ZodType<
  WalletsListQueryParamOrganizationIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type WalletsListQueryParamOrganizationIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const WalletsListQueryParamOrganizationIDFilter$outboundSchema:
  z.ZodType<
    WalletsListQueryParamOrganizationIDFilter$Outbound,
    z.ZodTypeDef,
    WalletsListQueryParamOrganizationIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WalletsListQueryParamOrganizationIDFilter$ {
  /** @deprecated use `WalletsListQueryParamOrganizationIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    WalletsListQueryParamOrganizationIDFilter$inboundSchema;
  /** @deprecated use `WalletsListQueryParamOrganizationIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    WalletsListQueryParamOrganizationIDFilter$outboundSchema;
  /** @deprecated use `WalletsListQueryParamOrganizationIDFilter$Outbound` instead. */
  export type Outbound = WalletsListQueryParamOrganizationIDFilter$Outbound;
}

export function walletsListQueryParamOrganizationIDFilterToJSON(
  walletsListQueryParamOrganizationIDFilter:
    WalletsListQueryParamOrganizationIDFilter,
): string {
  return JSON.stringify(
    WalletsListQueryParamOrganizationIDFilter$outboundSchema.parse(
      walletsListQueryParamOrganizationIDFilter,
    ),
  );
}

export function walletsListQueryParamOrganizationIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  WalletsListQueryParamOrganizationIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WalletsListQueryParamOrganizationIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WalletsListQueryParamOrganizationIDFilter' from JSON`,
  );
}

/** @internal */
export const WalletsListQueryParamCustomerIDFilter$inboundSchema: z.ZodType<
  WalletsListQueryParamCustomerIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type WalletsListQueryParamCustomerIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const WalletsListQueryParamCustomerIDFilter$outboundSchema: z.ZodType<
  WalletsListQueryParamCustomerIDFilter$Outbound,
  z.ZodTypeDef,
  WalletsListQueryParamCustomerIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WalletsListQueryParamCustomerIDFilter$ {
  /** @deprecated use `WalletsListQueryParamCustomerIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    WalletsListQueryParamCustomerIDFilter$inboundSchema;
  /** @deprecated use `WalletsListQueryParamCustomerIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    WalletsListQueryParamCustomerIDFilter$outboundSchema;
  /** @deprecated use `WalletsListQueryParamCustomerIDFilter$Outbound` instead. */
  export type Outbound = WalletsListQueryParamCustomerIDFilter$Outbound;
}

export function walletsListQueryParamCustomerIDFilterToJSON(
  walletsListQueryParamCustomerIDFilter: WalletsListQueryParamCustomerIDFilter,
): string {
  return JSON.stringify(
    WalletsListQueryParamCustomerIDFilter$outboundSchema.parse(
      walletsListQueryParamCustomerIDFilter,
    ),
  );
}

export function walletsListQueryParamCustomerIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<WalletsListQueryParamCustomerIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      WalletsListQueryParamCustomerIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WalletsListQueryParamCustomerIDFilter' from JSON`,
  );
}

/** @internal */
export const WalletsListRequest$inboundSchema: z.ZodType<
  WalletsListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(WalletSortProperty$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "customer_id": "customerId",
  });
});

/** @internal */
export type WalletsListRequest$Outbound = {
  organization_id?: string | Array<string> | null | undefined;
  customer_id?: string | Array<string> | null | undefined;
  page: number;
  limit: number;
  sorting?: Array<string> | null | undefined;
};

/** @internal */
export const WalletsListRequest$outboundSchema: z.ZodType<
  WalletsListRequest$Outbound,
  z.ZodTypeDef,
  WalletsListRequest
> = z.object({
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  customerId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(WalletSortProperty$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WalletsListRequest$ {
  /** @deprecated use `WalletsListRequest$inboundSchema` instead. */
  export const inboundSchema = WalletsListRequest$inboundSchema;
  /** @deprecated use `WalletsListRequest$outboundSchema` instead. */
  export const outboundSchema = WalletsListRequest$outboundSchema;
  /** @deprecated use `WalletsListRequest$Outbound` instead. */
  export type Outbound = WalletsListRequest$Outbound;
}

export function walletsListRequestToJSON(
  walletsListRequest: WalletsListRequest,
): string {
  return JSON.stringify(
    WalletsListRequest$outboundSchema.parse(walletsListRequest),
  );
}

export function walletsListRequestFromJSON(
  jsonString: string,
): SafeParseResult<WalletsListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WalletsListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WalletsListRequest' from JSON`,
  );
}

/** @internal */
export const WalletsListResponse$inboundSchema: z.ZodType<
  WalletsListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: ListResourceWallet$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type WalletsListResponse$Outbound = {
  Result: ListResourceWallet$Outbound;
};

/** @internal */
export const WalletsListResponse$outboundSchema: z.ZodType<
  WalletsListResponse$Outbound,
  z.ZodTypeDef,
  WalletsListResponse
> = z.object({
  result: ListResourceWallet$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WalletsListResponse$ {
  /** @deprecated use `WalletsListResponse$inboundSchema` instead. */
  export const inboundSchema = WalletsListResponse$inboundSchema;
  /** @deprecated use `WalletsListResponse$outboundSchema` instead. */
  export const outboundSchema = WalletsListResponse$outboundSchema;
  /** @deprecated use `WalletsListResponse$Outbound` instead. */
  export type Outbound = WalletsListResponse$Outbound;
}

export function walletsListResponseToJSON(
  walletsListResponse: WalletsListResponse,
): string {
  return JSON.stringify(
    WalletsListResponse$outboundSchema.parse(walletsListResponse),
  );
}

export function walletsListResponseFromJSON(
  jsonString: string,
): SafeParseResult<WalletsListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WalletsListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WalletsListResponse' from JSON`,
  );
}
