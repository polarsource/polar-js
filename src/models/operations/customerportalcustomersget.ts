/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerPortalCustomersGetRequest = {
  /**
   * The customer ID.
   */
  id: string;
};

/** @internal */
export const CustomerPortalCustomersGetRequest$inboundSchema: z.ZodType<
  CustomerPortalCustomersGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CustomerPortalCustomersGetRequest$Outbound = {
  id: string;
};

/** @internal */
export const CustomerPortalCustomersGetRequest$outboundSchema: z.ZodType<
  CustomerPortalCustomersGetRequest$Outbound,
  z.ZodTypeDef,
  CustomerPortalCustomersGetRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalCustomersGetRequest$ {
  /** @deprecated use `CustomerPortalCustomersGetRequest$inboundSchema` instead. */
  export const inboundSchema = CustomerPortalCustomersGetRequest$inboundSchema;
  /** @deprecated use `CustomerPortalCustomersGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalCustomersGetRequest$outboundSchema;
  /** @deprecated use `CustomerPortalCustomersGetRequest$Outbound` instead. */
  export type Outbound = CustomerPortalCustomersGetRequest$Outbound;
}

export function customerPortalCustomersGetRequestToJSON(
  customerPortalCustomersGetRequest: CustomerPortalCustomersGetRequest,
): string {
  return JSON.stringify(
    CustomerPortalCustomersGetRequest$outboundSchema.parse(
      customerPortalCustomersGetRequest,
    ),
  );
}

export function customerPortalCustomersGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomerPortalCustomersGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerPortalCustomersGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerPortalCustomersGetRequest' from JSON`,
  );
}
