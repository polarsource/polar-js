/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerPortalCustomerMetersGetSecurity = {
  customerSession: string;
};

export type CustomerPortalCustomerMetersGetRequest = {
  /**
   * The customer meter ID.
   */
  id: string;
};

/** @internal */
export const CustomerPortalCustomerMetersGetSecurity$inboundSchema: z.ZodType<
  CustomerPortalCustomerMetersGetSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_session: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_session": "customerSession",
  });
});

/** @internal */
export type CustomerPortalCustomerMetersGetSecurity$Outbound = {
  customer_session: string;
};

/** @internal */
export const CustomerPortalCustomerMetersGetSecurity$outboundSchema: z.ZodType<
  CustomerPortalCustomerMetersGetSecurity$Outbound,
  z.ZodTypeDef,
  CustomerPortalCustomerMetersGetSecurity
> = z.object({
  customerSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerSession: "customer_session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalCustomerMetersGetSecurity$ {
  /** @deprecated use `CustomerPortalCustomerMetersGetSecurity$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalCustomerMetersGetSecurity$inboundSchema;
  /** @deprecated use `CustomerPortalCustomerMetersGetSecurity$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalCustomerMetersGetSecurity$outboundSchema;
  /** @deprecated use `CustomerPortalCustomerMetersGetSecurity$Outbound` instead. */
  export type Outbound = CustomerPortalCustomerMetersGetSecurity$Outbound;
}

export function customerPortalCustomerMetersGetSecurityToJSON(
  customerPortalCustomerMetersGetSecurity:
    CustomerPortalCustomerMetersGetSecurity,
): string {
  return JSON.stringify(
    CustomerPortalCustomerMetersGetSecurity$outboundSchema.parse(
      customerPortalCustomerMetersGetSecurity,
    ),
  );
}

export function customerPortalCustomerMetersGetSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerPortalCustomerMetersGetSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalCustomerMetersGetSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomerPortalCustomerMetersGetSecurity' from JSON`,
  );
}

/** @internal */
export const CustomerPortalCustomerMetersGetRequest$inboundSchema: z.ZodType<
  CustomerPortalCustomerMetersGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CustomerPortalCustomerMetersGetRequest$Outbound = {
  id: string;
};

/** @internal */
export const CustomerPortalCustomerMetersGetRequest$outboundSchema: z.ZodType<
  CustomerPortalCustomerMetersGetRequest$Outbound,
  z.ZodTypeDef,
  CustomerPortalCustomerMetersGetRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalCustomerMetersGetRequest$ {
  /** @deprecated use `CustomerPortalCustomerMetersGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalCustomerMetersGetRequest$inboundSchema;
  /** @deprecated use `CustomerPortalCustomerMetersGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalCustomerMetersGetRequest$outboundSchema;
  /** @deprecated use `CustomerPortalCustomerMetersGetRequest$Outbound` instead. */
  export type Outbound = CustomerPortalCustomerMetersGetRequest$Outbound;
}

export function customerPortalCustomerMetersGetRequestToJSON(
  customerPortalCustomerMetersGetRequest:
    CustomerPortalCustomerMetersGetRequest,
): string {
  return JSON.stringify(
    CustomerPortalCustomerMetersGetRequest$outboundSchema.parse(
      customerPortalCustomerMetersGetRequest,
    ),
  );
}

export function customerPortalCustomerMetersGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomerPortalCustomerMetersGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalCustomerMetersGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerPortalCustomerMetersGetRequest' from JSON`,
  );
}
