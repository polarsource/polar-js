/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerPortalLicenseKeysGetSecurity = {
  customerSession: string;
};

export type CustomerPortalLicenseKeysGetRequest = {
  id: string;
};

/** @internal */
export const CustomerPortalLicenseKeysGetSecurity$inboundSchema: z.ZodType<
  CustomerPortalLicenseKeysGetSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_session: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_session": "customerSession",
  });
});

/** @internal */
export type CustomerPortalLicenseKeysGetSecurity$Outbound = {
  customer_session: string;
};

/** @internal */
export const CustomerPortalLicenseKeysGetSecurity$outboundSchema: z.ZodType<
  CustomerPortalLicenseKeysGetSecurity$Outbound,
  z.ZodTypeDef,
  CustomerPortalLicenseKeysGetSecurity
> = z.object({
  customerSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerSession: "customer_session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalLicenseKeysGetSecurity$ {
  /** @deprecated use `CustomerPortalLicenseKeysGetSecurity$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalLicenseKeysGetSecurity$inboundSchema;
  /** @deprecated use `CustomerPortalLicenseKeysGetSecurity$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalLicenseKeysGetSecurity$outboundSchema;
  /** @deprecated use `CustomerPortalLicenseKeysGetSecurity$Outbound` instead. */
  export type Outbound = CustomerPortalLicenseKeysGetSecurity$Outbound;
}

export function customerPortalLicenseKeysGetSecurityToJSON(
  customerPortalLicenseKeysGetSecurity: CustomerPortalLicenseKeysGetSecurity,
): string {
  return JSON.stringify(
    CustomerPortalLicenseKeysGetSecurity$outboundSchema.parse(
      customerPortalLicenseKeysGetSecurity,
    ),
  );
}

export function customerPortalLicenseKeysGetSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CustomerPortalLicenseKeysGetSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalLicenseKeysGetSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerPortalLicenseKeysGetSecurity' from JSON`,
  );
}

/** @internal */
export const CustomerPortalLicenseKeysGetRequest$inboundSchema: z.ZodType<
  CustomerPortalLicenseKeysGetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type CustomerPortalLicenseKeysGetRequest$Outbound = {
  id: string;
};

/** @internal */
export const CustomerPortalLicenseKeysGetRequest$outboundSchema: z.ZodType<
  CustomerPortalLicenseKeysGetRequest$Outbound,
  z.ZodTypeDef,
  CustomerPortalLicenseKeysGetRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalLicenseKeysGetRequest$ {
  /** @deprecated use `CustomerPortalLicenseKeysGetRequest$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalLicenseKeysGetRequest$inboundSchema;
  /** @deprecated use `CustomerPortalLicenseKeysGetRequest$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalLicenseKeysGetRequest$outboundSchema;
  /** @deprecated use `CustomerPortalLicenseKeysGetRequest$Outbound` instead. */
  export type Outbound = CustomerPortalLicenseKeysGetRequest$Outbound;
}

export function customerPortalLicenseKeysGetRequestToJSON(
  customerPortalLicenseKeysGetRequest: CustomerPortalLicenseKeysGetRequest,
): string {
  return JSON.stringify(
    CustomerPortalLicenseKeysGetRequest$outboundSchema.parse(
      customerPortalLicenseKeysGetRequest,
    ),
  );
}

export function customerPortalLicenseKeysGetRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomerPortalLicenseKeysGetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalLicenseKeysGetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerPortalLicenseKeysGetRequest' from JSON`,
  );
}
