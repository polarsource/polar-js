/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  AuthorizationCodeTokenRequest,
  AuthorizationCodeTokenRequest$inboundSchema,
  AuthorizationCodeTokenRequest$Outbound,
  AuthorizationCodeTokenRequest$outboundSchema,
} from "../components/authorizationcodetokenrequest.js";
import {
  RefreshTokenRequest,
  RefreshTokenRequest$inboundSchema,
  RefreshTokenRequest$Outbound,
  RefreshTokenRequest$outboundSchema,
} from "../components/refreshtokenrequest.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Oauth2RequestTokenRequestBody =
  | RefreshTokenRequest
  | AuthorizationCodeTokenRequest;

/** @internal */
export const Oauth2RequestTokenRequestBody$inboundSchema: z.ZodType<
  Oauth2RequestTokenRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  RefreshTokenRequest$inboundSchema,
  AuthorizationCodeTokenRequest$inboundSchema,
]);

/** @internal */
export type Oauth2RequestTokenRequestBody$Outbound =
  | RefreshTokenRequest$Outbound
  | AuthorizationCodeTokenRequest$Outbound;

/** @internal */
export const Oauth2RequestTokenRequestBody$outboundSchema: z.ZodType<
  Oauth2RequestTokenRequestBody$Outbound,
  z.ZodTypeDef,
  Oauth2RequestTokenRequestBody
> = z.union([
  RefreshTokenRequest$outboundSchema,
  AuthorizationCodeTokenRequest$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Oauth2RequestTokenRequestBody$ {
  /** @deprecated use `Oauth2RequestTokenRequestBody$inboundSchema` instead. */
  export const inboundSchema = Oauth2RequestTokenRequestBody$inboundSchema;
  /** @deprecated use `Oauth2RequestTokenRequestBody$outboundSchema` instead. */
  export const outboundSchema = Oauth2RequestTokenRequestBody$outboundSchema;
  /** @deprecated use `Oauth2RequestTokenRequestBody$Outbound` instead. */
  export type Outbound = Oauth2RequestTokenRequestBody$Outbound;
}

export function oauth2RequestTokenRequestBodyToJSON(
  oauth2RequestTokenRequestBody: Oauth2RequestTokenRequestBody,
): string {
  return JSON.stringify(
    Oauth2RequestTokenRequestBody$outboundSchema.parse(
      oauth2RequestTokenRequestBody,
    ),
  );
}

export function oauth2RequestTokenRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<Oauth2RequestTokenRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Oauth2RequestTokenRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Oauth2RequestTokenRequestBody' from JSON`,
  );
}
