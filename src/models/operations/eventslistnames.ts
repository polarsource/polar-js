/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  EventNamesSortProperty,
  EventNamesSortProperty$inboundSchema,
  EventNamesSortProperty$outboundSchema,
} from "../components/eventnamessortproperty.js";
import {
  EventSource,
  EventSource$inboundSchema,
  EventSource$outboundSchema,
} from "../components/eventsource.js";
import {
  ListResourceEventName,
  ListResourceEventName$inboundSchema,
  ListResourceEventName$Outbound,
  ListResourceEventName$outboundSchema,
} from "../components/listresourceeventname.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by organization ID.
 */
export type EventsListNamesQueryParamOrganizationIDFilter =
  | string
  | Array<string>;

/**
 * Filter by customer ID.
 */
export type EventsListNamesQueryParamCustomerIDFilter = string | Array<string>;

/**
 * Filter by external customer ID.
 */
export type QueryParamExternalCustomerIDFilter = string | Array<string>;

/**
 * Filter by event source.
 */
export type QueryParamSourceFilter = EventSource | Array<EventSource>;

export type EventsListNamesRequest = {
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
  /**
   * Filter by customer ID.
   */
  customerId?: string | Array<string> | null | undefined;
  /**
   * Filter by external customer ID.
   */
  externalCustomerId?: string | Array<string> | null | undefined;
  /**
   * Filter by event source.
   */
  source?: EventSource | Array<EventSource> | null | undefined;
  /**
   * Query to filter event names.
   */
  query?: string | null | undefined;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
  /**
   * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
   */
  sorting?: Array<EventNamesSortProperty> | null | undefined;
};

export type EventsListNamesResponse = {
  result: ListResourceEventName;
};

/** @internal */
export const EventsListNamesQueryParamOrganizationIDFilter$inboundSchema:
  z.ZodType<
    EventsListNamesQueryParamOrganizationIDFilter,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type EventsListNamesQueryParamOrganizationIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const EventsListNamesQueryParamOrganizationIDFilter$outboundSchema:
  z.ZodType<
    EventsListNamesQueryParamOrganizationIDFilter$Outbound,
    z.ZodTypeDef,
    EventsListNamesQueryParamOrganizationIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsListNamesQueryParamOrganizationIDFilter$ {
  /** @deprecated use `EventsListNamesQueryParamOrganizationIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    EventsListNamesQueryParamOrganizationIDFilter$inboundSchema;
  /** @deprecated use `EventsListNamesQueryParamOrganizationIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    EventsListNamesQueryParamOrganizationIDFilter$outboundSchema;
  /** @deprecated use `EventsListNamesQueryParamOrganizationIDFilter$Outbound` instead. */
  export type Outbound = EventsListNamesQueryParamOrganizationIDFilter$Outbound;
}

export function eventsListNamesQueryParamOrganizationIDFilterToJSON(
  eventsListNamesQueryParamOrganizationIDFilter:
    EventsListNamesQueryParamOrganizationIDFilter,
): string {
  return JSON.stringify(
    EventsListNamesQueryParamOrganizationIDFilter$outboundSchema.parse(
      eventsListNamesQueryParamOrganizationIDFilter,
    ),
  );
}

export function eventsListNamesQueryParamOrganizationIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  EventsListNamesQueryParamOrganizationIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EventsListNamesQueryParamOrganizationIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EventsListNamesQueryParamOrganizationIDFilter' from JSON`,
  );
}

/** @internal */
export const EventsListNamesQueryParamCustomerIDFilter$inboundSchema: z.ZodType<
  EventsListNamesQueryParamCustomerIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type EventsListNamesQueryParamCustomerIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const EventsListNamesQueryParamCustomerIDFilter$outboundSchema:
  z.ZodType<
    EventsListNamesQueryParamCustomerIDFilter$Outbound,
    z.ZodTypeDef,
    EventsListNamesQueryParamCustomerIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsListNamesQueryParamCustomerIDFilter$ {
  /** @deprecated use `EventsListNamesQueryParamCustomerIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    EventsListNamesQueryParamCustomerIDFilter$inboundSchema;
  /** @deprecated use `EventsListNamesQueryParamCustomerIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    EventsListNamesQueryParamCustomerIDFilter$outboundSchema;
  /** @deprecated use `EventsListNamesQueryParamCustomerIDFilter$Outbound` instead. */
  export type Outbound = EventsListNamesQueryParamCustomerIDFilter$Outbound;
}

export function eventsListNamesQueryParamCustomerIDFilterToJSON(
  eventsListNamesQueryParamCustomerIDFilter:
    EventsListNamesQueryParamCustomerIDFilter,
): string {
  return JSON.stringify(
    EventsListNamesQueryParamCustomerIDFilter$outboundSchema.parse(
      eventsListNamesQueryParamCustomerIDFilter,
    ),
  );
}

export function eventsListNamesQueryParamCustomerIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  EventsListNamesQueryParamCustomerIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EventsListNamesQueryParamCustomerIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EventsListNamesQueryParamCustomerIDFilter' from JSON`,
  );
}

/** @internal */
export const QueryParamExternalCustomerIDFilter$inboundSchema: z.ZodType<
  QueryParamExternalCustomerIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type QueryParamExternalCustomerIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const QueryParamExternalCustomerIDFilter$outboundSchema: z.ZodType<
  QueryParamExternalCustomerIDFilter$Outbound,
  z.ZodTypeDef,
  QueryParamExternalCustomerIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamExternalCustomerIDFilter$ {
  /** @deprecated use `QueryParamExternalCustomerIDFilter$inboundSchema` instead. */
  export const inboundSchema = QueryParamExternalCustomerIDFilter$inboundSchema;
  /** @deprecated use `QueryParamExternalCustomerIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    QueryParamExternalCustomerIDFilter$outboundSchema;
  /** @deprecated use `QueryParamExternalCustomerIDFilter$Outbound` instead. */
  export type Outbound = QueryParamExternalCustomerIDFilter$Outbound;
}

export function queryParamExternalCustomerIDFilterToJSON(
  queryParamExternalCustomerIDFilter: QueryParamExternalCustomerIDFilter,
): string {
  return JSON.stringify(
    QueryParamExternalCustomerIDFilter$outboundSchema.parse(
      queryParamExternalCustomerIDFilter,
    ),
  );
}

export function queryParamExternalCustomerIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamExternalCustomerIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      QueryParamExternalCustomerIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamExternalCustomerIDFilter' from JSON`,
  );
}

/** @internal */
export const QueryParamSourceFilter$inboundSchema: z.ZodType<
  QueryParamSourceFilter,
  z.ZodTypeDef,
  unknown
> = z.union([EventSource$inboundSchema, z.array(EventSource$inboundSchema)]);

/** @internal */
export type QueryParamSourceFilter$Outbound = string | Array<string>;

/** @internal */
export const QueryParamSourceFilter$outboundSchema: z.ZodType<
  QueryParamSourceFilter$Outbound,
  z.ZodTypeDef,
  QueryParamSourceFilter
> = z.union([EventSource$outboundSchema, z.array(EventSource$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamSourceFilter$ {
  /** @deprecated use `QueryParamSourceFilter$inboundSchema` instead. */
  export const inboundSchema = QueryParamSourceFilter$inboundSchema;
  /** @deprecated use `QueryParamSourceFilter$outboundSchema` instead. */
  export const outboundSchema = QueryParamSourceFilter$outboundSchema;
  /** @deprecated use `QueryParamSourceFilter$Outbound` instead. */
  export type Outbound = QueryParamSourceFilter$Outbound;
}

export function queryParamSourceFilterToJSON(
  queryParamSourceFilter: QueryParamSourceFilter,
): string {
  return JSON.stringify(
    QueryParamSourceFilter$outboundSchema.parse(queryParamSourceFilter),
  );
}

export function queryParamSourceFilterFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamSourceFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamSourceFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamSourceFilter' from JSON`,
  );
}

/** @internal */
export const EventsListNamesRequest$inboundSchema: z.ZodType<
  EventsListNamesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  external_customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  source: z.nullable(
    z.union([EventSource$inboundSchema, z.array(EventSource$inboundSchema)]),
  ).optional(),
  query: z.nullable(z.string()).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(EventNamesSortProperty$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "customer_id": "customerId",
    "external_customer_id": "externalCustomerId",
  });
});

/** @internal */
export type EventsListNamesRequest$Outbound = {
  organization_id?: string | Array<string> | null | undefined;
  customer_id?: string | Array<string> | null | undefined;
  external_customer_id?: string | Array<string> | null | undefined;
  source?: string | Array<string> | null | undefined;
  query?: string | null | undefined;
  page: number;
  limit: number;
  sorting?: Array<string> | null | undefined;
};

/** @internal */
export const EventsListNamesRequest$outboundSchema: z.ZodType<
  EventsListNamesRequest$Outbound,
  z.ZodTypeDef,
  EventsListNamesRequest
> = z.object({
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  customerId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  externalCustomerId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  source: z.nullable(
    z.union([EventSource$outboundSchema, z.array(EventSource$outboundSchema)]),
  ).optional(),
  query: z.nullable(z.string()).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(EventNamesSortProperty$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    customerId: "customer_id",
    externalCustomerId: "external_customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsListNamesRequest$ {
  /** @deprecated use `EventsListNamesRequest$inboundSchema` instead. */
  export const inboundSchema = EventsListNamesRequest$inboundSchema;
  /** @deprecated use `EventsListNamesRequest$outboundSchema` instead. */
  export const outboundSchema = EventsListNamesRequest$outboundSchema;
  /** @deprecated use `EventsListNamesRequest$Outbound` instead. */
  export type Outbound = EventsListNamesRequest$Outbound;
}

export function eventsListNamesRequestToJSON(
  eventsListNamesRequest: EventsListNamesRequest,
): string {
  return JSON.stringify(
    EventsListNamesRequest$outboundSchema.parse(eventsListNamesRequest),
  );
}

export function eventsListNamesRequestFromJSON(
  jsonString: string,
): SafeParseResult<EventsListNamesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsListNamesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsListNamesRequest' from JSON`,
  );
}

/** @internal */
export const EventsListNamesResponse$inboundSchema: z.ZodType<
  EventsListNamesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: ListResourceEventName$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type EventsListNamesResponse$Outbound = {
  Result: ListResourceEventName$Outbound;
};

/** @internal */
export const EventsListNamesResponse$outboundSchema: z.ZodType<
  EventsListNamesResponse$Outbound,
  z.ZodTypeDef,
  EventsListNamesResponse
> = z.object({
  result: ListResourceEventName$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsListNamesResponse$ {
  /** @deprecated use `EventsListNamesResponse$inboundSchema` instead. */
  export const inboundSchema = EventsListNamesResponse$inboundSchema;
  /** @deprecated use `EventsListNamesResponse$outboundSchema` instead. */
  export const outboundSchema = EventsListNamesResponse$outboundSchema;
  /** @deprecated use `EventsListNamesResponse$Outbound` instead. */
  export type Outbound = EventsListNamesResponse$Outbound;
}

export function eventsListNamesResponseToJSON(
  eventsListNamesResponse: EventsListNamesResponse,
): string {
  return JSON.stringify(
    EventsListNamesResponse$outboundSchema.parse(eventsListNamesResponse),
  );
}

export function eventsListNamesResponseFromJSON(
  jsonString: string,
): SafeParseResult<EventsListNamesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsListNamesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsListNamesResponse' from JSON`,
  );
}
