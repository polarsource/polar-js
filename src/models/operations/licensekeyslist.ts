/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by organization ID.
 */
export type LicenseKeysListQueryParamOrganizationIDFilter =
  | string
  | Array<string>;

/**
 * Filter by benefit ID.
 */
export type LicenseKeysListQueryParamBenefitIDFilter = string | Array<string>;

export type LicenseKeysListRequest = {
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
  /**
   * Filter by benefit ID.
   */
  benefitId?: string | Array<string> | null | undefined;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
};

export type LicenseKeysListResponse = {
  result: components.ListResourceLicenseKeyRead;
};

/** @internal */
export const LicenseKeysListQueryParamOrganizationIDFilter$inboundSchema:
  z.ZodType<
    LicenseKeysListQueryParamOrganizationIDFilter,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type LicenseKeysListQueryParamOrganizationIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const LicenseKeysListQueryParamOrganizationIDFilter$outboundSchema:
  z.ZodType<
    LicenseKeysListQueryParamOrganizationIDFilter$Outbound,
    z.ZodTypeDef,
    LicenseKeysListQueryParamOrganizationIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LicenseKeysListQueryParamOrganizationIDFilter$ {
  /** @deprecated use `LicenseKeysListQueryParamOrganizationIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    LicenseKeysListQueryParamOrganizationIDFilter$inboundSchema;
  /** @deprecated use `LicenseKeysListQueryParamOrganizationIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    LicenseKeysListQueryParamOrganizationIDFilter$outboundSchema;
  /** @deprecated use `LicenseKeysListQueryParamOrganizationIDFilter$Outbound` instead. */
  export type Outbound = LicenseKeysListQueryParamOrganizationIDFilter$Outbound;
}

export function licenseKeysListQueryParamOrganizationIDFilterToJSON(
  licenseKeysListQueryParamOrganizationIDFilter:
    LicenseKeysListQueryParamOrganizationIDFilter,
): string {
  return JSON.stringify(
    LicenseKeysListQueryParamOrganizationIDFilter$outboundSchema.parse(
      licenseKeysListQueryParamOrganizationIDFilter,
    ),
  );
}

export function licenseKeysListQueryParamOrganizationIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  LicenseKeysListQueryParamOrganizationIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      LicenseKeysListQueryParamOrganizationIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'LicenseKeysListQueryParamOrganizationIDFilter' from JSON`,
  );
}

/** @internal */
export const LicenseKeysListQueryParamBenefitIDFilter$inboundSchema: z.ZodType<
  LicenseKeysListQueryParamBenefitIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type LicenseKeysListQueryParamBenefitIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const LicenseKeysListQueryParamBenefitIDFilter$outboundSchema: z.ZodType<
  LicenseKeysListQueryParamBenefitIDFilter$Outbound,
  z.ZodTypeDef,
  LicenseKeysListQueryParamBenefitIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LicenseKeysListQueryParamBenefitIDFilter$ {
  /** @deprecated use `LicenseKeysListQueryParamBenefitIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    LicenseKeysListQueryParamBenefitIDFilter$inboundSchema;
  /** @deprecated use `LicenseKeysListQueryParamBenefitIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    LicenseKeysListQueryParamBenefitIDFilter$outboundSchema;
  /** @deprecated use `LicenseKeysListQueryParamBenefitIDFilter$Outbound` instead. */
  export type Outbound = LicenseKeysListQueryParamBenefitIDFilter$Outbound;
}

export function licenseKeysListQueryParamBenefitIDFilterToJSON(
  licenseKeysListQueryParamBenefitIDFilter:
    LicenseKeysListQueryParamBenefitIDFilter,
): string {
  return JSON.stringify(
    LicenseKeysListQueryParamBenefitIDFilter$outboundSchema.parse(
      licenseKeysListQueryParamBenefitIDFilter,
    ),
  );
}

export function licenseKeysListQueryParamBenefitIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  LicenseKeysListQueryParamBenefitIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      LicenseKeysListQueryParamBenefitIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'LicenseKeysListQueryParamBenefitIDFilter' from JSON`,
  );
}

/** @internal */
export const LicenseKeysListRequest$inboundSchema: z.ZodType<
  LicenseKeysListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  benefit_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "benefit_id": "benefitId",
  });
});

/** @internal */
export type LicenseKeysListRequest$Outbound = {
  organization_id?: string | Array<string> | null | undefined;
  benefit_id?: string | Array<string> | null | undefined;
  page: number;
  limit: number;
};

/** @internal */
export const LicenseKeysListRequest$outboundSchema: z.ZodType<
  LicenseKeysListRequest$Outbound,
  z.ZodTypeDef,
  LicenseKeysListRequest
> = z.object({
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  benefitId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    benefitId: "benefit_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LicenseKeysListRequest$ {
  /** @deprecated use `LicenseKeysListRequest$inboundSchema` instead. */
  export const inboundSchema = LicenseKeysListRequest$inboundSchema;
  /** @deprecated use `LicenseKeysListRequest$outboundSchema` instead. */
  export const outboundSchema = LicenseKeysListRequest$outboundSchema;
  /** @deprecated use `LicenseKeysListRequest$Outbound` instead. */
  export type Outbound = LicenseKeysListRequest$Outbound;
}

export function licenseKeysListRequestToJSON(
  licenseKeysListRequest: LicenseKeysListRequest,
): string {
  return JSON.stringify(
    LicenseKeysListRequest$outboundSchema.parse(licenseKeysListRequest),
  );
}

export function licenseKeysListRequestFromJSON(
  jsonString: string,
): SafeParseResult<LicenseKeysListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LicenseKeysListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LicenseKeysListRequest' from JSON`,
  );
}

/** @internal */
export const LicenseKeysListResponse$inboundSchema: z.ZodType<
  LicenseKeysListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.ListResourceLicenseKeyRead$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type LicenseKeysListResponse$Outbound = {
  Result: components.ListResourceLicenseKeyRead$Outbound;
};

/** @internal */
export const LicenseKeysListResponse$outboundSchema: z.ZodType<
  LicenseKeysListResponse$Outbound,
  z.ZodTypeDef,
  LicenseKeysListResponse
> = z.object({
  result: components.ListResourceLicenseKeyRead$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LicenseKeysListResponse$ {
  /** @deprecated use `LicenseKeysListResponse$inboundSchema` instead. */
  export const inboundSchema = LicenseKeysListResponse$inboundSchema;
  /** @deprecated use `LicenseKeysListResponse$outboundSchema` instead. */
  export const outboundSchema = LicenseKeysListResponse$outboundSchema;
  /** @deprecated use `LicenseKeysListResponse$Outbound` instead. */
  export type Outbound = LicenseKeysListResponse$Outbound;
}

export function licenseKeysListResponseToJSON(
  licenseKeysListResponse: LicenseKeysListResponse,
): string {
  return JSON.stringify(
    LicenseKeysListResponse$outboundSchema.parse(licenseKeysListResponse),
  );
}

export function licenseKeysListResponseFromJSON(
  jsonString: string,
): SafeParseResult<LicenseKeysListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LicenseKeysListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LicenseKeysListResponse' from JSON`,
  );
}
