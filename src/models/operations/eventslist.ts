/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  MetadataQuery,
  MetadataQuery$inboundSchema,
  MetadataQuery$Outbound,
  MetadataQuery$outboundSchema,
} from "../components/customerslist.js";
import {
  EventSortProperty,
  EventSortProperty$inboundSchema,
  EventSortProperty$outboundSchema,
} from "../components/eventsortproperty.js";
import {
  EventSource,
  EventSource$inboundSchema,
  EventSource$outboundSchema,
} from "../components/eventsource.js";
import {
  ListResourceEvent,
  ListResourceEvent$inboundSchema,
  ListResourceEvent$Outbound,
  ListResourceEvent$outboundSchema,
} from "../components/listresourceevent.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by organization ID.
 */
export type EventsListQueryParamOrganizationIDFilter = string | Array<string>;

/**
 * Filter by customer ID.
 */
export type EventsListQueryParamCustomerIDFilter = string | Array<string>;

/**
 * Filter by external customer ID.
 */
export type ExternalCustomerIDFilter = string | Array<string>;

/**
 * Filter by event source.
 */
export type SourceFilter = EventSource | Array<EventSource>;

export type EventsListRequest = {
  /**
   * Filter events after this timestamp.
   */
  startTimestamp?: Date | null | undefined;
  /**
   * Filter events before this timestamp.
   */
  endTimestamp?: Date | null | undefined;
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
  /**
   * Filter by customer ID.
   */
  customerId?: string | Array<string> | null | undefined;
  /**
   * Filter by external customer ID.
   */
  externalCustomerId?: string | Array<string> | null | undefined;
  /**
   * Filter by event source.
   */
  source?: EventSource | Array<EventSource> | null | undefined;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
  /**
   * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
   */
  sorting?: Array<EventSortProperty> | null | undefined;
  /**
   * Filter by metadata key-value pairs. It uses the `deepObject` style, e.g. `?metadata[key]=value`.
   */
  metadata?: { [k: string]: MetadataQuery } | null | undefined;
};

export type EventsListResponse = {
  result: ListResourceEvent;
};

/** @internal */
export const EventsListQueryParamOrganizationIDFilter$inboundSchema: z.ZodType<
  EventsListQueryParamOrganizationIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type EventsListQueryParamOrganizationIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const EventsListQueryParamOrganizationIDFilter$outboundSchema: z.ZodType<
  EventsListQueryParamOrganizationIDFilter$Outbound,
  z.ZodTypeDef,
  EventsListQueryParamOrganizationIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsListQueryParamOrganizationIDFilter$ {
  /** @deprecated use `EventsListQueryParamOrganizationIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    EventsListQueryParamOrganizationIDFilter$inboundSchema;
  /** @deprecated use `EventsListQueryParamOrganizationIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    EventsListQueryParamOrganizationIDFilter$outboundSchema;
  /** @deprecated use `EventsListQueryParamOrganizationIDFilter$Outbound` instead. */
  export type Outbound = EventsListQueryParamOrganizationIDFilter$Outbound;
}

export function eventsListQueryParamOrganizationIDFilterToJSON(
  eventsListQueryParamOrganizationIDFilter:
    EventsListQueryParamOrganizationIDFilter,
): string {
  return JSON.stringify(
    EventsListQueryParamOrganizationIDFilter$outboundSchema.parse(
      eventsListQueryParamOrganizationIDFilter,
    ),
  );
}

export function eventsListQueryParamOrganizationIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  EventsListQueryParamOrganizationIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EventsListQueryParamOrganizationIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EventsListQueryParamOrganizationIDFilter' from JSON`,
  );
}

/** @internal */
export const EventsListQueryParamCustomerIDFilter$inboundSchema: z.ZodType<
  EventsListQueryParamCustomerIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type EventsListQueryParamCustomerIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const EventsListQueryParamCustomerIDFilter$outboundSchema: z.ZodType<
  EventsListQueryParamCustomerIDFilter$Outbound,
  z.ZodTypeDef,
  EventsListQueryParamCustomerIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsListQueryParamCustomerIDFilter$ {
  /** @deprecated use `EventsListQueryParamCustomerIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    EventsListQueryParamCustomerIDFilter$inboundSchema;
  /** @deprecated use `EventsListQueryParamCustomerIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    EventsListQueryParamCustomerIDFilter$outboundSchema;
  /** @deprecated use `EventsListQueryParamCustomerIDFilter$Outbound` instead. */
  export type Outbound = EventsListQueryParamCustomerIDFilter$Outbound;
}

export function eventsListQueryParamCustomerIDFilterToJSON(
  eventsListQueryParamCustomerIDFilter: EventsListQueryParamCustomerIDFilter,
): string {
  return JSON.stringify(
    EventsListQueryParamCustomerIDFilter$outboundSchema.parse(
      eventsListQueryParamCustomerIDFilter,
    ),
  );
}

export function eventsListQueryParamCustomerIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<EventsListQueryParamCustomerIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EventsListQueryParamCustomerIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsListQueryParamCustomerIDFilter' from JSON`,
  );
}

/** @internal */
export const ExternalCustomerIDFilter$inboundSchema: z.ZodType<
  ExternalCustomerIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type ExternalCustomerIDFilter$Outbound = string | Array<string>;

/** @internal */
export const ExternalCustomerIDFilter$outboundSchema: z.ZodType<
  ExternalCustomerIDFilter$Outbound,
  z.ZodTypeDef,
  ExternalCustomerIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalCustomerIDFilter$ {
  /** @deprecated use `ExternalCustomerIDFilter$inboundSchema` instead. */
  export const inboundSchema = ExternalCustomerIDFilter$inboundSchema;
  /** @deprecated use `ExternalCustomerIDFilter$outboundSchema` instead. */
  export const outboundSchema = ExternalCustomerIDFilter$outboundSchema;
  /** @deprecated use `ExternalCustomerIDFilter$Outbound` instead. */
  export type Outbound = ExternalCustomerIDFilter$Outbound;
}

export function externalCustomerIDFilterToJSON(
  externalCustomerIDFilter: ExternalCustomerIDFilter,
): string {
  return JSON.stringify(
    ExternalCustomerIDFilter$outboundSchema.parse(externalCustomerIDFilter),
  );
}

export function externalCustomerIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<ExternalCustomerIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExternalCustomerIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalCustomerIDFilter' from JSON`,
  );
}

/** @internal */
export const SourceFilter$inboundSchema: z.ZodType<
  SourceFilter,
  z.ZodTypeDef,
  unknown
> = z.union([EventSource$inboundSchema, z.array(EventSource$inboundSchema)]);

/** @internal */
export type SourceFilter$Outbound = string | Array<string>;

/** @internal */
export const SourceFilter$outboundSchema: z.ZodType<
  SourceFilter$Outbound,
  z.ZodTypeDef,
  SourceFilter
> = z.union([EventSource$outboundSchema, z.array(EventSource$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SourceFilter$ {
  /** @deprecated use `SourceFilter$inboundSchema` instead. */
  export const inboundSchema = SourceFilter$inboundSchema;
  /** @deprecated use `SourceFilter$outboundSchema` instead. */
  export const outboundSchema = SourceFilter$outboundSchema;
  /** @deprecated use `SourceFilter$Outbound` instead. */
  export type Outbound = SourceFilter$Outbound;
}

export function sourceFilterToJSON(sourceFilter: SourceFilter): string {
  return JSON.stringify(SourceFilter$outboundSchema.parse(sourceFilter));
}

export function sourceFilterFromJSON(
  jsonString: string,
): SafeParseResult<SourceFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SourceFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SourceFilter' from JSON`,
  );
}

/** @internal */
export const EventsListRequest$inboundSchema: z.ZodType<
  EventsListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_timestamp: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  end_timestamp: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  external_customer_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  source: z.nullable(
    z.union([EventSource$inboundSchema, z.array(EventSource$inboundSchema)]),
  ).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(EventSortProperty$inboundSchema)).optional(),
  metadata: z.nullable(z.record(MetadataQuery$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_timestamp": "startTimestamp",
    "end_timestamp": "endTimestamp",
    "organization_id": "organizationId",
    "customer_id": "customerId",
    "external_customer_id": "externalCustomerId",
  });
});

/** @internal */
export type EventsListRequest$Outbound = {
  start_timestamp?: string | null | undefined;
  end_timestamp?: string | null | undefined;
  organization_id?: string | Array<string> | null | undefined;
  customer_id?: string | Array<string> | null | undefined;
  external_customer_id?: string | Array<string> | null | undefined;
  source?: string | Array<string> | null | undefined;
  page: number;
  limit: number;
  sorting?: Array<string> | null | undefined;
  metadata?: { [k: string]: MetadataQuery$Outbound } | null | undefined;
};

/** @internal */
export const EventsListRequest$outboundSchema: z.ZodType<
  EventsListRequest$Outbound,
  z.ZodTypeDef,
  EventsListRequest
> = z.object({
  startTimestamp: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  endTimestamp: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  customerId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  externalCustomerId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  source: z.nullable(
    z.union([EventSource$outboundSchema, z.array(EventSource$outboundSchema)]),
  ).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(EventSortProperty$outboundSchema)).optional(),
  metadata: z.nullable(z.record(MetadataQuery$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    startTimestamp: "start_timestamp",
    endTimestamp: "end_timestamp",
    organizationId: "organization_id",
    customerId: "customer_id",
    externalCustomerId: "external_customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsListRequest$ {
  /** @deprecated use `EventsListRequest$inboundSchema` instead. */
  export const inboundSchema = EventsListRequest$inboundSchema;
  /** @deprecated use `EventsListRequest$outboundSchema` instead. */
  export const outboundSchema = EventsListRequest$outboundSchema;
  /** @deprecated use `EventsListRequest$Outbound` instead. */
  export type Outbound = EventsListRequest$Outbound;
}

export function eventsListRequestToJSON(
  eventsListRequest: EventsListRequest,
): string {
  return JSON.stringify(
    EventsListRequest$outboundSchema.parse(eventsListRequest),
  );
}

export function eventsListRequestFromJSON(
  jsonString: string,
): SafeParseResult<EventsListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsListRequest' from JSON`,
  );
}

/** @internal */
export const EventsListResponse$inboundSchema: z.ZodType<
  EventsListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: ListResourceEvent$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type EventsListResponse$Outbound = {
  Result: ListResourceEvent$Outbound;
};

/** @internal */
export const EventsListResponse$outboundSchema: z.ZodType<
  EventsListResponse$Outbound,
  z.ZodTypeDef,
  EventsListResponse
> = z.object({
  result: ListResourceEvent$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsListResponse$ {
  /** @deprecated use `EventsListResponse$inboundSchema` instead. */
  export const inboundSchema = EventsListResponse$inboundSchema;
  /** @deprecated use `EventsListResponse$outboundSchema` instead. */
  export const outboundSchema = EventsListResponse$outboundSchema;
  /** @deprecated use `EventsListResponse$Outbound` instead. */
  export type Outbound = EventsListResponse$Outbound;
}

export function eventsListResponseToJSON(
  eventsListResponse: EventsListResponse,
): string {
  return JSON.stringify(
    EventsListResponse$outboundSchema.parse(eventsListResponse),
  );
}

export function eventsListResponseFromJSON(
  jsonString: string,
): SafeParseResult<EventsListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EventsListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EventsListResponse' from JSON`,
  );
}
