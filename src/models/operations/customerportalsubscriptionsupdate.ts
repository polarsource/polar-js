/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  CustomerSubscriptionUpdate,
  CustomerSubscriptionUpdate$inboundSchema,
  CustomerSubscriptionUpdate$Outbound,
  CustomerSubscriptionUpdate$outboundSchema,
} from "../components/customersubscriptionupdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerPortalSubscriptionsUpdateSecurity = {
  customerSession: string;
};

export type CustomerPortalSubscriptionsUpdateRequest = {
  /**
   * The subscription ID.
   */
  id: string;
  customerSubscriptionUpdate: CustomerSubscriptionUpdate;
};

/** @internal */
export const CustomerPortalSubscriptionsUpdateSecurity$inboundSchema: z.ZodType<
  CustomerPortalSubscriptionsUpdateSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_session: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_session": "customerSession",
  });
});

/** @internal */
export type CustomerPortalSubscriptionsUpdateSecurity$Outbound = {
  customer_session: string;
};

/** @internal */
export const CustomerPortalSubscriptionsUpdateSecurity$outboundSchema:
  z.ZodType<
    CustomerPortalSubscriptionsUpdateSecurity$Outbound,
    z.ZodTypeDef,
    CustomerPortalSubscriptionsUpdateSecurity
  > = z.object({
    customerSession: z.string(),
  }).transform((v) => {
    return remap$(v, {
      customerSession: "customer_session",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalSubscriptionsUpdateSecurity$ {
  /** @deprecated use `CustomerPortalSubscriptionsUpdateSecurity$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalSubscriptionsUpdateSecurity$inboundSchema;
  /** @deprecated use `CustomerPortalSubscriptionsUpdateSecurity$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalSubscriptionsUpdateSecurity$outboundSchema;
  /** @deprecated use `CustomerPortalSubscriptionsUpdateSecurity$Outbound` instead. */
  export type Outbound = CustomerPortalSubscriptionsUpdateSecurity$Outbound;
}

export function customerPortalSubscriptionsUpdateSecurityToJSON(
  customerPortalSubscriptionsUpdateSecurity:
    CustomerPortalSubscriptionsUpdateSecurity,
): string {
  return JSON.stringify(
    CustomerPortalSubscriptionsUpdateSecurity$outboundSchema.parse(
      customerPortalSubscriptionsUpdateSecurity,
    ),
  );
}

export function customerPortalSubscriptionsUpdateSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerPortalSubscriptionsUpdateSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalSubscriptionsUpdateSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomerPortalSubscriptionsUpdateSecurity' from JSON`,
  );
}

/** @internal */
export const CustomerPortalSubscriptionsUpdateRequest$inboundSchema: z.ZodType<
  CustomerPortalSubscriptionsUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  CustomerSubscriptionUpdate: CustomerSubscriptionUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CustomerSubscriptionUpdate": "customerSubscriptionUpdate",
  });
});

/** @internal */
export type CustomerPortalSubscriptionsUpdateRequest$Outbound = {
  id: string;
  CustomerSubscriptionUpdate: CustomerSubscriptionUpdate$Outbound;
};

/** @internal */
export const CustomerPortalSubscriptionsUpdateRequest$outboundSchema: z.ZodType<
  CustomerPortalSubscriptionsUpdateRequest$Outbound,
  z.ZodTypeDef,
  CustomerPortalSubscriptionsUpdateRequest
> = z.object({
  id: z.string(),
  customerSubscriptionUpdate: CustomerSubscriptionUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    customerSubscriptionUpdate: "CustomerSubscriptionUpdate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalSubscriptionsUpdateRequest$ {
  /** @deprecated use `CustomerPortalSubscriptionsUpdateRequest$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalSubscriptionsUpdateRequest$inboundSchema;
  /** @deprecated use `CustomerPortalSubscriptionsUpdateRequest$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalSubscriptionsUpdateRequest$outboundSchema;
  /** @deprecated use `CustomerPortalSubscriptionsUpdateRequest$Outbound` instead. */
  export type Outbound = CustomerPortalSubscriptionsUpdateRequest$Outbound;
}

export function customerPortalSubscriptionsUpdateRequestToJSON(
  customerPortalSubscriptionsUpdateRequest:
    CustomerPortalSubscriptionsUpdateRequest,
): string {
  return JSON.stringify(
    CustomerPortalSubscriptionsUpdateRequest$outboundSchema.parse(
      customerPortalSubscriptionsUpdateRequest,
    ),
  );
}

export function customerPortalSubscriptionsUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerPortalSubscriptionsUpdateRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalSubscriptionsUpdateRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomerPortalSubscriptionsUpdateRequest' from JSON`,
  );
}
