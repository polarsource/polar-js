/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  ListResource,
  ListResource$inboundSchema,
  ListResource$Outbound,
  ListResource$outboundSchema,
} from "../components/listresource.js";
import {
  PaymentSortProperty,
  PaymentSortProperty$inboundSchema,
  PaymentSortProperty$outboundSchema,
} from "../components/paymentsortproperty.js";
import {
  PaymentStatus,
  PaymentStatus$inboundSchema,
  PaymentStatus$outboundSchema,
} from "../components/paymentstatus.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by organization ID.
 */
export type PaymentsListQueryParamOrganizationIDFilter = string | Array<string>;

/**
 * Filter by checkout ID.
 */
export type PaymentsListQueryParamCheckoutIDFilter = string | Array<string>;

/**
 * Filter by order ID.
 */
export type PaymentsListQueryParamOrderIDFilter = string | Array<string>;

/**
 * Filter by payment status.
 */
export type QueryParamStatusFilter = PaymentStatus | Array<PaymentStatus>;

/**
 * Filter by payment method.
 */
export type MethodFilter = string | Array<string>;

/**
 * Filter by customer email.
 */
export type CustomerEmailFilter = string | Array<string>;

export type PaymentsListRequest = {
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
  /**
   * Filter by checkout ID.
   */
  checkoutId?: string | Array<string> | null | undefined;
  /**
   * Filter by order ID.
   */
  orderId?: string | Array<string> | null | undefined;
  /**
   * Filter by payment status.
   */
  status?: PaymentStatus | Array<PaymentStatus> | null | undefined;
  /**
   * Filter by payment method.
   */
  method?: string | Array<string> | null | undefined;
  /**
   * Filter by customer email.
   */
  customerEmail?: string | Array<string> | null | undefined;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
  /**
   * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
   */
  sorting?: Array<PaymentSortProperty> | null | undefined;
};

export type PaymentsListResponse = {
  result: ListResource;
};

/** @internal */
export const PaymentsListQueryParamOrganizationIDFilter$inboundSchema:
  z.ZodType<PaymentsListQueryParamOrganizationIDFilter, z.ZodTypeDef, unknown> =
    z.union([z.string(), z.array(z.string())]);

/** @internal */
export type PaymentsListQueryParamOrganizationIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const PaymentsListQueryParamOrganizationIDFilter$outboundSchema:
  z.ZodType<
    PaymentsListQueryParamOrganizationIDFilter$Outbound,
    z.ZodTypeDef,
    PaymentsListQueryParamOrganizationIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsListQueryParamOrganizationIDFilter$ {
  /** @deprecated use `PaymentsListQueryParamOrganizationIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsListQueryParamOrganizationIDFilter$inboundSchema;
  /** @deprecated use `PaymentsListQueryParamOrganizationIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsListQueryParamOrganizationIDFilter$outboundSchema;
  /** @deprecated use `PaymentsListQueryParamOrganizationIDFilter$Outbound` instead. */
  export type Outbound = PaymentsListQueryParamOrganizationIDFilter$Outbound;
}

export function paymentsListQueryParamOrganizationIDFilterToJSON(
  paymentsListQueryParamOrganizationIDFilter:
    PaymentsListQueryParamOrganizationIDFilter,
): string {
  return JSON.stringify(
    PaymentsListQueryParamOrganizationIDFilter$outboundSchema.parse(
      paymentsListQueryParamOrganizationIDFilter,
    ),
  );
}

export function paymentsListQueryParamOrganizationIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  PaymentsListQueryParamOrganizationIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PaymentsListQueryParamOrganizationIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PaymentsListQueryParamOrganizationIDFilter' from JSON`,
  );
}

/** @internal */
export const PaymentsListQueryParamCheckoutIDFilter$inboundSchema: z.ZodType<
  PaymentsListQueryParamCheckoutIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type PaymentsListQueryParamCheckoutIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const PaymentsListQueryParamCheckoutIDFilter$outboundSchema: z.ZodType<
  PaymentsListQueryParamCheckoutIDFilter$Outbound,
  z.ZodTypeDef,
  PaymentsListQueryParamCheckoutIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsListQueryParamCheckoutIDFilter$ {
  /** @deprecated use `PaymentsListQueryParamCheckoutIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsListQueryParamCheckoutIDFilter$inboundSchema;
  /** @deprecated use `PaymentsListQueryParamCheckoutIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsListQueryParamCheckoutIDFilter$outboundSchema;
  /** @deprecated use `PaymentsListQueryParamCheckoutIDFilter$Outbound` instead. */
  export type Outbound = PaymentsListQueryParamCheckoutIDFilter$Outbound;
}

export function paymentsListQueryParamCheckoutIDFilterToJSON(
  paymentsListQueryParamCheckoutIDFilter:
    PaymentsListQueryParamCheckoutIDFilter,
): string {
  return JSON.stringify(
    PaymentsListQueryParamCheckoutIDFilter$outboundSchema.parse(
      paymentsListQueryParamCheckoutIDFilter,
    ),
  );
}

export function paymentsListQueryParamCheckoutIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<PaymentsListQueryParamCheckoutIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PaymentsListQueryParamCheckoutIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsListQueryParamCheckoutIDFilter' from JSON`,
  );
}

/** @internal */
export const PaymentsListQueryParamOrderIDFilter$inboundSchema: z.ZodType<
  PaymentsListQueryParamOrderIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type PaymentsListQueryParamOrderIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const PaymentsListQueryParamOrderIDFilter$outboundSchema: z.ZodType<
  PaymentsListQueryParamOrderIDFilter$Outbound,
  z.ZodTypeDef,
  PaymentsListQueryParamOrderIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsListQueryParamOrderIDFilter$ {
  /** @deprecated use `PaymentsListQueryParamOrderIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    PaymentsListQueryParamOrderIDFilter$inboundSchema;
  /** @deprecated use `PaymentsListQueryParamOrderIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    PaymentsListQueryParamOrderIDFilter$outboundSchema;
  /** @deprecated use `PaymentsListQueryParamOrderIDFilter$Outbound` instead. */
  export type Outbound = PaymentsListQueryParamOrderIDFilter$Outbound;
}

export function paymentsListQueryParamOrderIDFilterToJSON(
  paymentsListQueryParamOrderIDFilter: PaymentsListQueryParamOrderIDFilter,
): string {
  return JSON.stringify(
    PaymentsListQueryParamOrderIDFilter$outboundSchema.parse(
      paymentsListQueryParamOrderIDFilter,
    ),
  );
}

export function paymentsListQueryParamOrderIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<PaymentsListQueryParamOrderIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PaymentsListQueryParamOrderIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsListQueryParamOrderIDFilter' from JSON`,
  );
}

/** @internal */
export const QueryParamStatusFilter$inboundSchema: z.ZodType<
  QueryParamStatusFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  PaymentStatus$inboundSchema,
  z.array(PaymentStatus$inboundSchema),
]);

/** @internal */
export type QueryParamStatusFilter$Outbound = string | Array<string>;

/** @internal */
export const QueryParamStatusFilter$outboundSchema: z.ZodType<
  QueryParamStatusFilter$Outbound,
  z.ZodTypeDef,
  QueryParamStatusFilter
> = z.union([
  PaymentStatus$outboundSchema,
  z.array(PaymentStatus$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamStatusFilter$ {
  /** @deprecated use `QueryParamStatusFilter$inboundSchema` instead. */
  export const inboundSchema = QueryParamStatusFilter$inboundSchema;
  /** @deprecated use `QueryParamStatusFilter$outboundSchema` instead. */
  export const outboundSchema = QueryParamStatusFilter$outboundSchema;
  /** @deprecated use `QueryParamStatusFilter$Outbound` instead. */
  export type Outbound = QueryParamStatusFilter$Outbound;
}

export function queryParamStatusFilterToJSON(
  queryParamStatusFilter: QueryParamStatusFilter,
): string {
  return JSON.stringify(
    QueryParamStatusFilter$outboundSchema.parse(queryParamStatusFilter),
  );
}

export function queryParamStatusFilterFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamStatusFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamStatusFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamStatusFilter' from JSON`,
  );
}

/** @internal */
export const MethodFilter$inboundSchema: z.ZodType<
  MethodFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type MethodFilter$Outbound = string | Array<string>;

/** @internal */
export const MethodFilter$outboundSchema: z.ZodType<
  MethodFilter$Outbound,
  z.ZodTypeDef,
  MethodFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MethodFilter$ {
  /** @deprecated use `MethodFilter$inboundSchema` instead. */
  export const inboundSchema = MethodFilter$inboundSchema;
  /** @deprecated use `MethodFilter$outboundSchema` instead. */
  export const outboundSchema = MethodFilter$outboundSchema;
  /** @deprecated use `MethodFilter$Outbound` instead. */
  export type Outbound = MethodFilter$Outbound;
}

export function methodFilterToJSON(methodFilter: MethodFilter): string {
  return JSON.stringify(MethodFilter$outboundSchema.parse(methodFilter));
}

export function methodFilterFromJSON(
  jsonString: string,
): SafeParseResult<MethodFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MethodFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MethodFilter' from JSON`,
  );
}

/** @internal */
export const CustomerEmailFilter$inboundSchema: z.ZodType<
  CustomerEmailFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type CustomerEmailFilter$Outbound = string | Array<string>;

/** @internal */
export const CustomerEmailFilter$outboundSchema: z.ZodType<
  CustomerEmailFilter$Outbound,
  z.ZodTypeDef,
  CustomerEmailFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerEmailFilter$ {
  /** @deprecated use `CustomerEmailFilter$inboundSchema` instead. */
  export const inboundSchema = CustomerEmailFilter$inboundSchema;
  /** @deprecated use `CustomerEmailFilter$outboundSchema` instead. */
  export const outboundSchema = CustomerEmailFilter$outboundSchema;
  /** @deprecated use `CustomerEmailFilter$Outbound` instead. */
  export type Outbound = CustomerEmailFilter$Outbound;
}

export function customerEmailFilterToJSON(
  customerEmailFilter: CustomerEmailFilter,
): string {
  return JSON.stringify(
    CustomerEmailFilter$outboundSchema.parse(customerEmailFilter),
  );
}

export function customerEmailFilterFromJSON(
  jsonString: string,
): SafeParseResult<CustomerEmailFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerEmailFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerEmailFilter' from JSON`,
  );
}

/** @internal */
export const PaymentsListRequest$inboundSchema: z.ZodType<
  PaymentsListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  checkout_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  order_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  status: z.nullable(
    z.union([
      PaymentStatus$inboundSchema,
      z.array(PaymentStatus$inboundSchema),
    ]),
  ).optional(),
  method: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  customer_email: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(PaymentSortProperty$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "checkout_id": "checkoutId",
    "order_id": "orderId",
    "customer_email": "customerEmail",
  });
});

/** @internal */
export type PaymentsListRequest$Outbound = {
  organization_id?: string | Array<string> | null | undefined;
  checkout_id?: string | Array<string> | null | undefined;
  order_id?: string | Array<string> | null | undefined;
  status?: string | Array<string> | null | undefined;
  method?: string | Array<string> | null | undefined;
  customer_email?: string | Array<string> | null | undefined;
  page: number;
  limit: number;
  sorting?: Array<string> | null | undefined;
};

/** @internal */
export const PaymentsListRequest$outboundSchema: z.ZodType<
  PaymentsListRequest$Outbound,
  z.ZodTypeDef,
  PaymentsListRequest
> = z.object({
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  checkoutId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  orderId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  status: z.nullable(
    z.union([
      PaymentStatus$outboundSchema,
      z.array(PaymentStatus$outboundSchema),
    ]),
  ).optional(),
  method: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  customerEmail: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(PaymentSortProperty$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    checkoutId: "checkout_id",
    orderId: "order_id",
    customerEmail: "customer_email",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsListRequest$ {
  /** @deprecated use `PaymentsListRequest$inboundSchema` instead. */
  export const inboundSchema = PaymentsListRequest$inboundSchema;
  /** @deprecated use `PaymentsListRequest$outboundSchema` instead. */
  export const outboundSchema = PaymentsListRequest$outboundSchema;
  /** @deprecated use `PaymentsListRequest$Outbound` instead. */
  export type Outbound = PaymentsListRequest$Outbound;
}

export function paymentsListRequestToJSON(
  paymentsListRequest: PaymentsListRequest,
): string {
  return JSON.stringify(
    PaymentsListRequest$outboundSchema.parse(paymentsListRequest),
  );
}

export function paymentsListRequestFromJSON(
  jsonString: string,
): SafeParseResult<PaymentsListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentsListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsListRequest' from JSON`,
  );
}

/** @internal */
export const PaymentsListResponse$inboundSchema: z.ZodType<
  PaymentsListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: ListResource$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type PaymentsListResponse$Outbound = {
  Result: ListResource$Outbound;
};

/** @internal */
export const PaymentsListResponse$outboundSchema: z.ZodType<
  PaymentsListResponse$Outbound,
  z.ZodTypeDef,
  PaymentsListResponse
> = z.object({
  result: ListResource$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentsListResponse$ {
  /** @deprecated use `PaymentsListResponse$inboundSchema` instead. */
  export const inboundSchema = PaymentsListResponse$inboundSchema;
  /** @deprecated use `PaymentsListResponse$outboundSchema` instead. */
  export const outboundSchema = PaymentsListResponse$outboundSchema;
  /** @deprecated use `PaymentsListResponse$Outbound` instead. */
  export type Outbound = PaymentsListResponse$Outbound;
}

export function paymentsListResponseToJSON(
  paymentsListResponse: PaymentsListResponse,
): string {
  return JSON.stringify(
    PaymentsListResponse$outboundSchema.parse(paymentsListResponse),
  );
}

export function paymentsListResponseFromJSON(
  jsonString: string,
): SafeParseResult<PaymentsListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentsListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentsListResponse' from JSON`,
  );
}
