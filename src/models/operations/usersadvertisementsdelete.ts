/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UsersAdvertisementsDeleteRequest = {
  /**
   * The advertisement campaign ID.
   */
  id: string;
};

/** @internal */
export const UsersAdvertisementsDeleteRequest$inboundSchema: z.ZodType<
  UsersAdvertisementsDeleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UsersAdvertisementsDeleteRequest$Outbound = {
  id: string;
};

/** @internal */
export const UsersAdvertisementsDeleteRequest$outboundSchema: z.ZodType<
  UsersAdvertisementsDeleteRequest$Outbound,
  z.ZodTypeDef,
  UsersAdvertisementsDeleteRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsersAdvertisementsDeleteRequest$ {
  /** @deprecated use `UsersAdvertisementsDeleteRequest$inboundSchema` instead. */
  export const inboundSchema = UsersAdvertisementsDeleteRequest$inboundSchema;
  /** @deprecated use `UsersAdvertisementsDeleteRequest$outboundSchema` instead. */
  export const outboundSchema = UsersAdvertisementsDeleteRequest$outboundSchema;
  /** @deprecated use `UsersAdvertisementsDeleteRequest$Outbound` instead. */
  export type Outbound = UsersAdvertisementsDeleteRequest$Outbound;
}

export function usersAdvertisementsDeleteRequestToJSON(
  usersAdvertisementsDeleteRequest: UsersAdvertisementsDeleteRequest,
): string {
  return JSON.stringify(
    UsersAdvertisementsDeleteRequest$outboundSchema.parse(
      usersAdvertisementsDeleteRequest,
    ),
  );
}

export function usersAdvertisementsDeleteRequestFromJSON(
  jsonString: string,
): SafeParseResult<UsersAdvertisementsDeleteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsersAdvertisementsDeleteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsersAdvertisementsDeleteRequest' from JSON`,
  );
}
