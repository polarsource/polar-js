/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  ListResourceRepository,
  ListResourceRepository$inboundSchema,
  ListResourceRepository$Outbound,
  ListResourceRepository$outboundSchema,
} from "../components/listresourcerepository.js";
import {
  Platforms,
  Platforms$inboundSchema,
  Platforms$outboundSchema,
} from "../components/platforms.js";
import {
  RepositorySortProperty,
  RepositorySortProperty$inboundSchema,
  RepositorySortProperty$outboundSchema,
} from "../components/repositorysortproperty.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by platform.
 */
export type QueryParamPlatformFilter = Platforms | Array<Platforms>;

/**
 * Filter by name.
 */
export type QueryParamRepositoryNameFilter = string | Array<string>;

/**
 * Filter by external organization name.
 */
export type ExternalOrganizationNameFilter = string | Array<string>;

/**
 * Filter by organization ID.
 */
export type QueryParamOrganizationIDFilter = string | Array<string>;

export type RepositoriesListRequest = {
  /**
   * Filter by platform.
   */
  platform?: Platforms | Array<Platforms> | null | undefined;
  /**
   * Filter by name.
   */
  name?: string | Array<string> | null | undefined;
  /**
   * Filter by external organization name.
   */
  externalOrganizationName?: string | Array<string> | null | undefined;
  /**
   * Filter by private status.
   */
  isPrivate?: boolean | null | undefined;
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
  /**
   * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
   */
  sorting?: Array<RepositorySortProperty> | null | undefined;
};

export type RepositoriesListResponse = {
  result: ListResourceRepository;
};

/** @internal */
export const QueryParamPlatformFilter$inboundSchema: z.ZodType<
  QueryParamPlatformFilter,
  z.ZodTypeDef,
  unknown
> = z.union([Platforms$inboundSchema, z.array(Platforms$inboundSchema)]);

/** @internal */
export type QueryParamPlatformFilter$Outbound = string | Array<string>;

/** @internal */
export const QueryParamPlatformFilter$outboundSchema: z.ZodType<
  QueryParamPlatformFilter$Outbound,
  z.ZodTypeDef,
  QueryParamPlatformFilter
> = z.union([Platforms$outboundSchema, z.array(Platforms$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamPlatformFilter$ {
  /** @deprecated use `QueryParamPlatformFilter$inboundSchema` instead. */
  export const inboundSchema = QueryParamPlatformFilter$inboundSchema;
  /** @deprecated use `QueryParamPlatformFilter$outboundSchema` instead. */
  export const outboundSchema = QueryParamPlatformFilter$outboundSchema;
  /** @deprecated use `QueryParamPlatformFilter$Outbound` instead. */
  export type Outbound = QueryParamPlatformFilter$Outbound;
}

export function queryParamPlatformFilterToJSON(
  queryParamPlatformFilter: QueryParamPlatformFilter,
): string {
  return JSON.stringify(
    QueryParamPlatformFilter$outboundSchema.parse(queryParamPlatformFilter),
  );
}

export function queryParamPlatformFilterFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamPlatformFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamPlatformFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamPlatformFilter' from JSON`,
  );
}

/** @internal */
export const QueryParamRepositoryNameFilter$inboundSchema: z.ZodType<
  QueryParamRepositoryNameFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type QueryParamRepositoryNameFilter$Outbound = string | Array<string>;

/** @internal */
export const QueryParamRepositoryNameFilter$outboundSchema: z.ZodType<
  QueryParamRepositoryNameFilter$Outbound,
  z.ZodTypeDef,
  QueryParamRepositoryNameFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamRepositoryNameFilter$ {
  /** @deprecated use `QueryParamRepositoryNameFilter$inboundSchema` instead. */
  export const inboundSchema = QueryParamRepositoryNameFilter$inboundSchema;
  /** @deprecated use `QueryParamRepositoryNameFilter$outboundSchema` instead. */
  export const outboundSchema = QueryParamRepositoryNameFilter$outboundSchema;
  /** @deprecated use `QueryParamRepositoryNameFilter$Outbound` instead. */
  export type Outbound = QueryParamRepositoryNameFilter$Outbound;
}

export function queryParamRepositoryNameFilterToJSON(
  queryParamRepositoryNameFilter: QueryParamRepositoryNameFilter,
): string {
  return JSON.stringify(
    QueryParamRepositoryNameFilter$outboundSchema.parse(
      queryParamRepositoryNameFilter,
    ),
  );
}

export function queryParamRepositoryNameFilterFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamRepositoryNameFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamRepositoryNameFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamRepositoryNameFilter' from JSON`,
  );
}

/** @internal */
export const ExternalOrganizationNameFilter$inboundSchema: z.ZodType<
  ExternalOrganizationNameFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type ExternalOrganizationNameFilter$Outbound = string | Array<string>;

/** @internal */
export const ExternalOrganizationNameFilter$outboundSchema: z.ZodType<
  ExternalOrganizationNameFilter$Outbound,
  z.ZodTypeDef,
  ExternalOrganizationNameFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalOrganizationNameFilter$ {
  /** @deprecated use `ExternalOrganizationNameFilter$inboundSchema` instead. */
  export const inboundSchema = ExternalOrganizationNameFilter$inboundSchema;
  /** @deprecated use `ExternalOrganizationNameFilter$outboundSchema` instead. */
  export const outboundSchema = ExternalOrganizationNameFilter$outboundSchema;
  /** @deprecated use `ExternalOrganizationNameFilter$Outbound` instead. */
  export type Outbound = ExternalOrganizationNameFilter$Outbound;
}

export function externalOrganizationNameFilterToJSON(
  externalOrganizationNameFilter: ExternalOrganizationNameFilter,
): string {
  return JSON.stringify(
    ExternalOrganizationNameFilter$outboundSchema.parse(
      externalOrganizationNameFilter,
    ),
  );
}

export function externalOrganizationNameFilterFromJSON(
  jsonString: string,
): SafeParseResult<ExternalOrganizationNameFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExternalOrganizationNameFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalOrganizationNameFilter' from JSON`,
  );
}

/** @internal */
export const QueryParamOrganizationIDFilter$inboundSchema: z.ZodType<
  QueryParamOrganizationIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type QueryParamOrganizationIDFilter$Outbound = string | Array<string>;

/** @internal */
export const QueryParamOrganizationIDFilter$outboundSchema: z.ZodType<
  QueryParamOrganizationIDFilter$Outbound,
  z.ZodTypeDef,
  QueryParamOrganizationIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamOrganizationIDFilter$ {
  /** @deprecated use `QueryParamOrganizationIDFilter$inboundSchema` instead. */
  export const inboundSchema = QueryParamOrganizationIDFilter$inboundSchema;
  /** @deprecated use `QueryParamOrganizationIDFilter$outboundSchema` instead. */
  export const outboundSchema = QueryParamOrganizationIDFilter$outboundSchema;
  /** @deprecated use `QueryParamOrganizationIDFilter$Outbound` instead. */
  export type Outbound = QueryParamOrganizationIDFilter$Outbound;
}

export function queryParamOrganizationIDFilterToJSON(
  queryParamOrganizationIDFilter: QueryParamOrganizationIDFilter,
): string {
  return JSON.stringify(
    QueryParamOrganizationIDFilter$outboundSchema.parse(
      queryParamOrganizationIDFilter,
    ),
  );
}

export function queryParamOrganizationIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamOrganizationIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamOrganizationIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamOrganizationIDFilter' from JSON`,
  );
}

/** @internal */
export const RepositoriesListRequest$inboundSchema: z.ZodType<
  RepositoriesListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  platform: z.nullable(
    z.union([Platforms$inboundSchema, z.array(Platforms$inboundSchema)]),
  ).optional(),
  name: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  external_organization_name: z.nullable(
    z.union([z.string(), z.array(z.string())]),
  ).optional(),
  is_private: z.nullable(z.boolean()).optional(),
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(RepositorySortProperty$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "external_organization_name": "externalOrganizationName",
    "is_private": "isPrivate",
    "organization_id": "organizationId",
  });
});

/** @internal */
export type RepositoriesListRequest$Outbound = {
  platform?: string | Array<string> | null | undefined;
  name?: string | Array<string> | null | undefined;
  external_organization_name?: string | Array<string> | null | undefined;
  is_private?: boolean | null | undefined;
  organization_id?: string | Array<string> | null | undefined;
  page: number;
  limit: number;
  sorting?: Array<string> | null | undefined;
};

/** @internal */
export const RepositoriesListRequest$outboundSchema: z.ZodType<
  RepositoriesListRequest$Outbound,
  z.ZodTypeDef,
  RepositoriesListRequest
> = z.object({
  platform: z.nullable(
    z.union([Platforms$outboundSchema, z.array(Platforms$outboundSchema)]),
  ).optional(),
  name: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  externalOrganizationName: z.nullable(
    z.union([z.string(), z.array(z.string())]),
  ).optional(),
  isPrivate: z.nullable(z.boolean()).optional(),
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(RepositorySortProperty$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    externalOrganizationName: "external_organization_name",
    isPrivate: "is_private",
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RepositoriesListRequest$ {
  /** @deprecated use `RepositoriesListRequest$inboundSchema` instead. */
  export const inboundSchema = RepositoriesListRequest$inboundSchema;
  /** @deprecated use `RepositoriesListRequest$outboundSchema` instead. */
  export const outboundSchema = RepositoriesListRequest$outboundSchema;
  /** @deprecated use `RepositoriesListRequest$Outbound` instead. */
  export type Outbound = RepositoriesListRequest$Outbound;
}

export function repositoriesListRequestToJSON(
  repositoriesListRequest: RepositoriesListRequest,
): string {
  return JSON.stringify(
    RepositoriesListRequest$outboundSchema.parse(repositoriesListRequest),
  );
}

export function repositoriesListRequestFromJSON(
  jsonString: string,
): SafeParseResult<RepositoriesListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RepositoriesListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RepositoriesListRequest' from JSON`,
  );
}

/** @internal */
export const RepositoriesListResponse$inboundSchema: z.ZodType<
  RepositoriesListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: ListResourceRepository$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type RepositoriesListResponse$Outbound = {
  Result: ListResourceRepository$Outbound;
};

/** @internal */
export const RepositoriesListResponse$outboundSchema: z.ZodType<
  RepositoriesListResponse$Outbound,
  z.ZodTypeDef,
  RepositoriesListResponse
> = z.object({
  result: ListResourceRepository$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RepositoriesListResponse$ {
  /** @deprecated use `RepositoriesListResponse$inboundSchema` instead. */
  export const inboundSchema = RepositoriesListResponse$inboundSchema;
  /** @deprecated use `RepositoriesListResponse$outboundSchema` instead. */
  export const outboundSchema = RepositoriesListResponse$outboundSchema;
  /** @deprecated use `RepositoriesListResponse$Outbound` instead. */
  export type Outbound = RepositoriesListResponse$Outbound;
}

export function repositoriesListResponseToJSON(
  repositoriesListResponse: RepositoriesListResponse,
): string {
  return JSON.stringify(
    RepositoriesListResponse$outboundSchema.parse(repositoriesListResponse),
  );
}

export function repositoriesListResponseFromJSON(
  jsonString: string,
): SafeParseResult<RepositoriesListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RepositoriesListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RepositoriesListResponse' from JSON`,
  );
}
