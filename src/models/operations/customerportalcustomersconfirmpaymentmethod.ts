/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerPortalCustomersConfirmPaymentMethodSecurity = {
  customerSession: string;
};

/** @internal */
export const CustomerPortalCustomersConfirmPaymentMethodSecurity$inboundSchema:
  z.ZodType<
    CustomerPortalCustomersConfirmPaymentMethodSecurity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    customer_session: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "customer_session": "customerSession",
    });
  });

/** @internal */
export type CustomerPortalCustomersConfirmPaymentMethodSecurity$Outbound = {
  customer_session: string;
};

/** @internal */
export const CustomerPortalCustomersConfirmPaymentMethodSecurity$outboundSchema:
  z.ZodType<
    CustomerPortalCustomersConfirmPaymentMethodSecurity$Outbound,
    z.ZodTypeDef,
    CustomerPortalCustomersConfirmPaymentMethodSecurity
  > = z.object({
    customerSession: z.string(),
  }).transform((v) => {
    return remap$(v, {
      customerSession: "customer_session",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalCustomersConfirmPaymentMethodSecurity$ {
  /** @deprecated use `CustomerPortalCustomersConfirmPaymentMethodSecurity$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalCustomersConfirmPaymentMethodSecurity$inboundSchema;
  /** @deprecated use `CustomerPortalCustomersConfirmPaymentMethodSecurity$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalCustomersConfirmPaymentMethodSecurity$outboundSchema;
  /** @deprecated use `CustomerPortalCustomersConfirmPaymentMethodSecurity$Outbound` instead. */
  export type Outbound =
    CustomerPortalCustomersConfirmPaymentMethodSecurity$Outbound;
}

export function customerPortalCustomersConfirmPaymentMethodSecurityToJSON(
  customerPortalCustomersConfirmPaymentMethodSecurity:
    CustomerPortalCustomersConfirmPaymentMethodSecurity,
): string {
  return JSON.stringify(
    CustomerPortalCustomersConfirmPaymentMethodSecurity$outboundSchema.parse(
      customerPortalCustomersConfirmPaymentMethodSecurity,
    ),
  );
}

export function customerPortalCustomersConfirmPaymentMethodSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerPortalCustomersConfirmPaymentMethodSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalCustomersConfirmPaymentMethodSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomerPortalCustomersConfirmPaymentMethodSecurity' from JSON`,
  );
}
