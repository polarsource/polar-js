/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by benefit type.
 */
export type QueryParamBenefitTypeFilter =
  | components.BenefitType
  | Array<components.BenefitType>;

/**
 * Filter by benefit ID.
 */
export type CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter =
  | string
  | Array<string>;

/**
 * Filter by organization ID.
 */
export type CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter =
  | string
  | Array<string>;

/**
 * Filter by checkout ID.
 */
export type CheckoutIDFilter = string | Array<string>;

/**
 * Filter by order ID.
 */
export type OrderIDFilter = string | Array<string>;

/**
 * Filter by subscription ID.
 */
export type SubscriptionIDFilter = string | Array<string>;

export type CustomerPortalBenefitGrantsListRequest = {
  /**
   * Filter by benefit type.
   */
  typeFilter?:
    | components.BenefitType
    | Array<components.BenefitType>
    | null
    | undefined;
  /**
   * Filter by benefit ID.
   */
  benefitId?: string | Array<string> | null | undefined;
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
  /**
   * Filter by checkout ID.
   */
  checkoutId?: string | Array<string> | null | undefined;
  /**
   * Filter by order ID.
   */
  orderId?: string | Array<string> | null | undefined;
  /**
   * Filter by subscription ID.
   */
  subscriptionId?: string | Array<string> | null | undefined;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
  /**
   * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
   */
  sorting?:
    | Array<components.CustomerBenefitGrantSortProperty>
    | null
    | undefined;
};

export type CustomerPortalBenefitGrantsListResponse = {
  result: components.ListResourceCustomerBenefitGrant;
};

/** @internal */
export const QueryParamBenefitTypeFilter$inboundSchema: z.ZodType<
  QueryParamBenefitTypeFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.BenefitType$inboundSchema,
  z.array(components.BenefitType$inboundSchema),
]);

/** @internal */
export type QueryParamBenefitTypeFilter$Outbound = string | Array<string>;

/** @internal */
export const QueryParamBenefitTypeFilter$outboundSchema: z.ZodType<
  QueryParamBenefitTypeFilter$Outbound,
  z.ZodTypeDef,
  QueryParamBenefitTypeFilter
> = z.union([
  components.BenefitType$outboundSchema,
  z.array(components.BenefitType$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamBenefitTypeFilter$ {
  /** @deprecated use `QueryParamBenefitTypeFilter$inboundSchema` instead. */
  export const inboundSchema = QueryParamBenefitTypeFilter$inboundSchema;
  /** @deprecated use `QueryParamBenefitTypeFilter$outboundSchema` instead. */
  export const outboundSchema = QueryParamBenefitTypeFilter$outboundSchema;
  /** @deprecated use `QueryParamBenefitTypeFilter$Outbound` instead. */
  export type Outbound = QueryParamBenefitTypeFilter$Outbound;
}

export function queryParamBenefitTypeFilterToJSON(
  queryParamBenefitTypeFilter: QueryParamBenefitTypeFilter,
): string {
  return JSON.stringify(
    QueryParamBenefitTypeFilter$outboundSchema.parse(
      queryParamBenefitTypeFilter,
    ),
  );
}

export function queryParamBenefitTypeFilterFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamBenefitTypeFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamBenefitTypeFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamBenefitTypeFilter' from JSON`,
  );
}

/** @internal */
export const CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$inboundSchema:
  z.ZodType<
    CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$outboundSchema:
  z.ZodType<
    CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$Outbound,
    z.ZodTypeDef,
    CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$ {
  /** @deprecated use `CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$inboundSchema;
  /** @deprecated use `CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$outboundSchema;
  /** @deprecated use `CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$Outbound` instead. */
  export type Outbound =
    CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$Outbound;
}

export function customerPortalBenefitGrantsListQueryParamBenefitIDFilterToJSON(
  customerPortalBenefitGrantsListQueryParamBenefitIDFilter:
    CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter,
): string {
  return JSON.stringify(
    CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$outboundSchema
      .parse(customerPortalBenefitGrantsListQueryParamBenefitIDFilter),
  );
}

export function customerPortalBenefitGrantsListQueryParamBenefitIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter' from JSON`,
  );
}

/** @internal */
export const CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$inboundSchema:
  z.ZodType<
    CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$outboundSchema:
  z.ZodType<
    CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$Outbound,
    z.ZodTypeDef,
    CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$ {
  /** @deprecated use `CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$inboundSchema;
  /** @deprecated use `CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$outboundSchema;
  /** @deprecated use `CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$Outbound` instead. */
  export type Outbound =
    CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$Outbound;
}

export function customerPortalBenefitGrantsListQueryParamOrganizationIDFilterToJSON(
  customerPortalBenefitGrantsListQueryParamOrganizationIDFilter:
    CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter,
): string {
  return JSON.stringify(
    CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$outboundSchema
      .parse(customerPortalBenefitGrantsListQueryParamOrganizationIDFilter),
  );
}

export function customerPortalBenefitGrantsListQueryParamOrganizationIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter' from JSON`,
  );
}

/** @internal */
export const CheckoutIDFilter$inboundSchema: z.ZodType<
  CheckoutIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type CheckoutIDFilter$Outbound = string | Array<string>;

/** @internal */
export const CheckoutIDFilter$outboundSchema: z.ZodType<
  CheckoutIDFilter$Outbound,
  z.ZodTypeDef,
  CheckoutIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutIDFilter$ {
  /** @deprecated use `CheckoutIDFilter$inboundSchema` instead. */
  export const inboundSchema = CheckoutIDFilter$inboundSchema;
  /** @deprecated use `CheckoutIDFilter$outboundSchema` instead. */
  export const outboundSchema = CheckoutIDFilter$outboundSchema;
  /** @deprecated use `CheckoutIDFilter$Outbound` instead. */
  export type Outbound = CheckoutIDFilter$Outbound;
}

export function checkoutIDFilterToJSON(
  checkoutIDFilter: CheckoutIDFilter,
): string {
  return JSON.stringify(
    CheckoutIDFilter$outboundSchema.parse(checkoutIDFilter),
  );
}

export function checkoutIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckoutIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutIDFilter' from JSON`,
  );
}

/** @internal */
export const OrderIDFilter$inboundSchema: z.ZodType<
  OrderIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type OrderIDFilter$Outbound = string | Array<string>;

/** @internal */
export const OrderIDFilter$outboundSchema: z.ZodType<
  OrderIDFilter$Outbound,
  z.ZodTypeDef,
  OrderIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderIDFilter$ {
  /** @deprecated use `OrderIDFilter$inboundSchema` instead. */
  export const inboundSchema = OrderIDFilter$inboundSchema;
  /** @deprecated use `OrderIDFilter$outboundSchema` instead. */
  export const outboundSchema = OrderIDFilter$outboundSchema;
  /** @deprecated use `OrderIDFilter$Outbound` instead. */
  export type Outbound = OrderIDFilter$Outbound;
}

export function orderIDFilterToJSON(orderIDFilter: OrderIDFilter): string {
  return JSON.stringify(OrderIDFilter$outboundSchema.parse(orderIDFilter));
}

export function orderIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<OrderIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderIDFilter' from JSON`,
  );
}

/** @internal */
export const SubscriptionIDFilter$inboundSchema: z.ZodType<
  SubscriptionIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type SubscriptionIDFilter$Outbound = string | Array<string>;

/** @internal */
export const SubscriptionIDFilter$outboundSchema: z.ZodType<
  SubscriptionIDFilter$Outbound,
  z.ZodTypeDef,
  SubscriptionIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionIDFilter$ {
  /** @deprecated use `SubscriptionIDFilter$inboundSchema` instead. */
  export const inboundSchema = SubscriptionIDFilter$inboundSchema;
  /** @deprecated use `SubscriptionIDFilter$outboundSchema` instead. */
  export const outboundSchema = SubscriptionIDFilter$outboundSchema;
  /** @deprecated use `SubscriptionIDFilter$Outbound` instead. */
  export type Outbound = SubscriptionIDFilter$Outbound;
}

export function subscriptionIDFilterToJSON(
  subscriptionIDFilter: SubscriptionIDFilter,
): string {
  return JSON.stringify(
    SubscriptionIDFilter$outboundSchema.parse(subscriptionIDFilter),
  );
}

export function subscriptionIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionIDFilter' from JSON`,
  );
}

/** @internal */
export const CustomerPortalBenefitGrantsListRequest$inboundSchema: z.ZodType<
  CustomerPortalBenefitGrantsListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type_filter: z.nullable(
    z.union([
      components.BenefitType$inboundSchema,
      z.array(components.BenefitType$inboundSchema),
    ]),
  ).optional(),
  benefit_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  checkout_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  order_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  subscription_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(
    z.array(components.CustomerBenefitGrantSortProperty$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "type_filter": "typeFilter",
    "benefit_id": "benefitId",
    "organization_id": "organizationId",
    "checkout_id": "checkoutId",
    "order_id": "orderId",
    "subscription_id": "subscriptionId",
  });
});

/** @internal */
export type CustomerPortalBenefitGrantsListRequest$Outbound = {
  type_filter?: string | Array<string> | null | undefined;
  benefit_id?: string | Array<string> | null | undefined;
  organization_id?: string | Array<string> | null | undefined;
  checkout_id?: string | Array<string> | null | undefined;
  order_id?: string | Array<string> | null | undefined;
  subscription_id?: string | Array<string> | null | undefined;
  page: number;
  limit: number;
  sorting?: Array<string> | null | undefined;
};

/** @internal */
export const CustomerPortalBenefitGrantsListRequest$outboundSchema: z.ZodType<
  CustomerPortalBenefitGrantsListRequest$Outbound,
  z.ZodTypeDef,
  CustomerPortalBenefitGrantsListRequest
> = z.object({
  typeFilter: z.nullable(
    z.union([
      components.BenefitType$outboundSchema,
      z.array(components.BenefitType$outboundSchema),
    ]),
  ).optional(),
  benefitId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  checkoutId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  orderId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  subscriptionId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(
    z.array(components.CustomerBenefitGrantSortProperty$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    typeFilter: "type_filter",
    benefitId: "benefit_id",
    organizationId: "organization_id",
    checkoutId: "checkout_id",
    orderId: "order_id",
    subscriptionId: "subscription_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalBenefitGrantsListRequest$ {
  /** @deprecated use `CustomerPortalBenefitGrantsListRequest$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalBenefitGrantsListRequest$inboundSchema;
  /** @deprecated use `CustomerPortalBenefitGrantsListRequest$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalBenefitGrantsListRequest$outboundSchema;
  /** @deprecated use `CustomerPortalBenefitGrantsListRequest$Outbound` instead. */
  export type Outbound = CustomerPortalBenefitGrantsListRequest$Outbound;
}

export function customerPortalBenefitGrantsListRequestToJSON(
  customerPortalBenefitGrantsListRequest:
    CustomerPortalBenefitGrantsListRequest,
): string {
  return JSON.stringify(
    CustomerPortalBenefitGrantsListRequest$outboundSchema.parse(
      customerPortalBenefitGrantsListRequest,
    ),
  );
}

export function customerPortalBenefitGrantsListRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomerPortalBenefitGrantsListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalBenefitGrantsListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerPortalBenefitGrantsListRequest' from JSON`,
  );
}

/** @internal */
export const CustomerPortalBenefitGrantsListResponse$inboundSchema: z.ZodType<
  CustomerPortalBenefitGrantsListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.ListResourceCustomerBenefitGrant$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type CustomerPortalBenefitGrantsListResponse$Outbound = {
  Result: components.ListResourceCustomerBenefitGrant$Outbound;
};

/** @internal */
export const CustomerPortalBenefitGrantsListResponse$outboundSchema: z.ZodType<
  CustomerPortalBenefitGrantsListResponse$Outbound,
  z.ZodTypeDef,
  CustomerPortalBenefitGrantsListResponse
> = z.object({
  result: components.ListResourceCustomerBenefitGrant$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalBenefitGrantsListResponse$ {
  /** @deprecated use `CustomerPortalBenefitGrantsListResponse$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalBenefitGrantsListResponse$inboundSchema;
  /** @deprecated use `CustomerPortalBenefitGrantsListResponse$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalBenefitGrantsListResponse$outboundSchema;
  /** @deprecated use `CustomerPortalBenefitGrantsListResponse$Outbound` instead. */
  export type Outbound = CustomerPortalBenefitGrantsListResponse$Outbound;
}

export function customerPortalBenefitGrantsListResponseToJSON(
  customerPortalBenefitGrantsListResponse:
    CustomerPortalBenefitGrantsListResponse,
): string {
  return JSON.stringify(
    CustomerPortalBenefitGrantsListResponse$outboundSchema.parse(
      customerPortalBenefitGrantsListResponse,
    ),
  );
}

export function customerPortalBenefitGrantsListResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerPortalBenefitGrantsListResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalBenefitGrantsListResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomerPortalBenefitGrantsListResponse' from JSON`,
  );
}
