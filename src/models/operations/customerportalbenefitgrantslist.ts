/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  BenefitType,
  BenefitType$inboundSchema,
  BenefitType$outboundSchema,
} from "../components/benefittype.js";
import {
  CustomerBenefitGrantSortProperty,
  CustomerBenefitGrantSortProperty$inboundSchema,
  CustomerBenefitGrantSortProperty$outboundSchema,
} from "../components/customerbenefitgrantsortproperty.js";
import {
  ListResourceCustomerBenefitGrant,
  ListResourceCustomerBenefitGrant$inboundSchema,
  ListResourceCustomerBenefitGrant$Outbound,
  ListResourceCustomerBenefitGrant$outboundSchema,
} from "../components/listresourcecustomerbenefitgrant.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerPortalBenefitGrantsListSecurity = {
  customerSession: string;
};

/**
 * Filter by benefit type.
 */
export type QueryParamBenefitTypeFilter = BenefitType | Array<BenefitType>;

/**
 * Filter by benefit ID.
 */
export type CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter =
  | string
  | Array<string>;

/**
 * Filter by organization ID.
 */
export type CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter =
  | string
  | Array<string>;

/**
 * Filter by checkout ID.
 */
export type QueryParamCheckoutIDFilter = string | Array<string>;

/**
 * Filter by order ID.
 */
export type QueryParamOrderIDFilter = string | Array<string>;

/**
 * Filter by subscription ID.
 */
export type QueryParamSubscriptionIDFilter = string | Array<string>;

export type CustomerPortalBenefitGrantsListRequest = {
  /**
   * Filter by benefit type.
   */
  typeFilter?: BenefitType | Array<BenefitType> | null | undefined;
  /**
   * Filter by benefit ID.
   */
  benefitId?: string | Array<string> | null | undefined;
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
  /**
   * Filter by checkout ID.
   */
  checkoutId?: string | Array<string> | null | undefined;
  /**
   * Filter by order ID.
   */
  orderId?: string | Array<string> | null | undefined;
  /**
   * Filter by subscription ID.
   */
  subscriptionId?: string | Array<string> | null | undefined;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
  /**
   * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
   */
  sorting?: Array<CustomerBenefitGrantSortProperty> | null | undefined;
};

export type CustomerPortalBenefitGrantsListResponse = {
  result: ListResourceCustomerBenefitGrant;
};

/** @internal */
export const CustomerPortalBenefitGrantsListSecurity$inboundSchema: z.ZodType<
  CustomerPortalBenefitGrantsListSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_session: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_session": "customerSession",
  });
});

/** @internal */
export type CustomerPortalBenefitGrantsListSecurity$Outbound = {
  customer_session: string;
};

/** @internal */
export const CustomerPortalBenefitGrantsListSecurity$outboundSchema: z.ZodType<
  CustomerPortalBenefitGrantsListSecurity$Outbound,
  z.ZodTypeDef,
  CustomerPortalBenefitGrantsListSecurity
> = z.object({
  customerSession: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerSession: "customer_session",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalBenefitGrantsListSecurity$ {
  /** @deprecated use `CustomerPortalBenefitGrantsListSecurity$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalBenefitGrantsListSecurity$inboundSchema;
  /** @deprecated use `CustomerPortalBenefitGrantsListSecurity$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalBenefitGrantsListSecurity$outboundSchema;
  /** @deprecated use `CustomerPortalBenefitGrantsListSecurity$Outbound` instead. */
  export type Outbound = CustomerPortalBenefitGrantsListSecurity$Outbound;
}

export function customerPortalBenefitGrantsListSecurityToJSON(
  customerPortalBenefitGrantsListSecurity:
    CustomerPortalBenefitGrantsListSecurity,
): string {
  return JSON.stringify(
    CustomerPortalBenefitGrantsListSecurity$outboundSchema.parse(
      customerPortalBenefitGrantsListSecurity,
    ),
  );
}

export function customerPortalBenefitGrantsListSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerPortalBenefitGrantsListSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalBenefitGrantsListSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomerPortalBenefitGrantsListSecurity' from JSON`,
  );
}

/** @internal */
export const QueryParamBenefitTypeFilter$inboundSchema: z.ZodType<
  QueryParamBenefitTypeFilter,
  z.ZodTypeDef,
  unknown
> = z.union([BenefitType$inboundSchema, z.array(BenefitType$inboundSchema)]);

/** @internal */
export type QueryParamBenefitTypeFilter$Outbound = string | Array<string>;

/** @internal */
export const QueryParamBenefitTypeFilter$outboundSchema: z.ZodType<
  QueryParamBenefitTypeFilter$Outbound,
  z.ZodTypeDef,
  QueryParamBenefitTypeFilter
> = z.union([BenefitType$outboundSchema, z.array(BenefitType$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamBenefitTypeFilter$ {
  /** @deprecated use `QueryParamBenefitTypeFilter$inboundSchema` instead. */
  export const inboundSchema = QueryParamBenefitTypeFilter$inboundSchema;
  /** @deprecated use `QueryParamBenefitTypeFilter$outboundSchema` instead. */
  export const outboundSchema = QueryParamBenefitTypeFilter$outboundSchema;
  /** @deprecated use `QueryParamBenefitTypeFilter$Outbound` instead. */
  export type Outbound = QueryParamBenefitTypeFilter$Outbound;
}

export function queryParamBenefitTypeFilterToJSON(
  queryParamBenefitTypeFilter: QueryParamBenefitTypeFilter,
): string {
  return JSON.stringify(
    QueryParamBenefitTypeFilter$outboundSchema.parse(
      queryParamBenefitTypeFilter,
    ),
  );
}

export function queryParamBenefitTypeFilterFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamBenefitTypeFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamBenefitTypeFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamBenefitTypeFilter' from JSON`,
  );
}

/** @internal */
export const CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$inboundSchema:
  z.ZodType<
    CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$outboundSchema:
  z.ZodType<
    CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$Outbound,
    z.ZodTypeDef,
    CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$ {
  /** @deprecated use `CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$inboundSchema;
  /** @deprecated use `CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$outboundSchema;
  /** @deprecated use `CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$Outbound` instead. */
  export type Outbound =
    CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$Outbound;
}

export function customerPortalBenefitGrantsListQueryParamBenefitIDFilterToJSON(
  customerPortalBenefitGrantsListQueryParamBenefitIDFilter:
    CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter,
): string {
  return JSON.stringify(
    CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$outboundSchema
      .parse(customerPortalBenefitGrantsListQueryParamBenefitIDFilter),
  );
}

export function customerPortalBenefitGrantsListQueryParamBenefitIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CustomerPortalBenefitGrantsListQueryParamBenefitIDFilter' from JSON`,
  );
}

/** @internal */
export const CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$inboundSchema:
  z.ZodType<
    CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$outboundSchema:
  z.ZodType<
    CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$Outbound,
    z.ZodTypeDef,
    CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$ {
  /** @deprecated use `CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$inboundSchema;
  /** @deprecated use `CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$outboundSchema;
  /** @deprecated use `CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$Outbound` instead. */
  export type Outbound =
    CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$Outbound;
}

export function customerPortalBenefitGrantsListQueryParamOrganizationIDFilterToJSON(
  customerPortalBenefitGrantsListQueryParamOrganizationIDFilter:
    CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter,
): string {
  return JSON.stringify(
    CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$outboundSchema
      .parse(customerPortalBenefitGrantsListQueryParamOrganizationIDFilter),
  );
}

export function customerPortalBenefitGrantsListQueryParamOrganizationIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CustomerPortalBenefitGrantsListQueryParamOrganizationIDFilter' from JSON`,
  );
}

/** @internal */
export const QueryParamCheckoutIDFilter$inboundSchema: z.ZodType<
  QueryParamCheckoutIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type QueryParamCheckoutIDFilter$Outbound = string | Array<string>;

/** @internal */
export const QueryParamCheckoutIDFilter$outboundSchema: z.ZodType<
  QueryParamCheckoutIDFilter$Outbound,
  z.ZodTypeDef,
  QueryParamCheckoutIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamCheckoutIDFilter$ {
  /** @deprecated use `QueryParamCheckoutIDFilter$inboundSchema` instead. */
  export const inboundSchema = QueryParamCheckoutIDFilter$inboundSchema;
  /** @deprecated use `QueryParamCheckoutIDFilter$outboundSchema` instead. */
  export const outboundSchema = QueryParamCheckoutIDFilter$outboundSchema;
  /** @deprecated use `QueryParamCheckoutIDFilter$Outbound` instead. */
  export type Outbound = QueryParamCheckoutIDFilter$Outbound;
}

export function queryParamCheckoutIDFilterToJSON(
  queryParamCheckoutIDFilter: QueryParamCheckoutIDFilter,
): string {
  return JSON.stringify(
    QueryParamCheckoutIDFilter$outboundSchema.parse(queryParamCheckoutIDFilter),
  );
}

export function queryParamCheckoutIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamCheckoutIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamCheckoutIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamCheckoutIDFilter' from JSON`,
  );
}

/** @internal */
export const QueryParamOrderIDFilter$inboundSchema: z.ZodType<
  QueryParamOrderIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type QueryParamOrderIDFilter$Outbound = string | Array<string>;

/** @internal */
export const QueryParamOrderIDFilter$outboundSchema: z.ZodType<
  QueryParamOrderIDFilter$Outbound,
  z.ZodTypeDef,
  QueryParamOrderIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamOrderIDFilter$ {
  /** @deprecated use `QueryParamOrderIDFilter$inboundSchema` instead. */
  export const inboundSchema = QueryParamOrderIDFilter$inboundSchema;
  /** @deprecated use `QueryParamOrderIDFilter$outboundSchema` instead. */
  export const outboundSchema = QueryParamOrderIDFilter$outboundSchema;
  /** @deprecated use `QueryParamOrderIDFilter$Outbound` instead. */
  export type Outbound = QueryParamOrderIDFilter$Outbound;
}

export function queryParamOrderIDFilterToJSON(
  queryParamOrderIDFilter: QueryParamOrderIDFilter,
): string {
  return JSON.stringify(
    QueryParamOrderIDFilter$outboundSchema.parse(queryParamOrderIDFilter),
  );
}

export function queryParamOrderIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamOrderIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamOrderIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamOrderIDFilter' from JSON`,
  );
}

/** @internal */
export const QueryParamSubscriptionIDFilter$inboundSchema: z.ZodType<
  QueryParamSubscriptionIDFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type QueryParamSubscriptionIDFilter$Outbound = string | Array<string>;

/** @internal */
export const QueryParamSubscriptionIDFilter$outboundSchema: z.ZodType<
  QueryParamSubscriptionIDFilter$Outbound,
  z.ZodTypeDef,
  QueryParamSubscriptionIDFilter
> = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamSubscriptionIDFilter$ {
  /** @deprecated use `QueryParamSubscriptionIDFilter$inboundSchema` instead. */
  export const inboundSchema = QueryParamSubscriptionIDFilter$inboundSchema;
  /** @deprecated use `QueryParamSubscriptionIDFilter$outboundSchema` instead. */
  export const outboundSchema = QueryParamSubscriptionIDFilter$outboundSchema;
  /** @deprecated use `QueryParamSubscriptionIDFilter$Outbound` instead. */
  export type Outbound = QueryParamSubscriptionIDFilter$Outbound;
}

export function queryParamSubscriptionIDFilterToJSON(
  queryParamSubscriptionIDFilter: QueryParamSubscriptionIDFilter,
): string {
  return JSON.stringify(
    QueryParamSubscriptionIDFilter$outboundSchema.parse(
      queryParamSubscriptionIDFilter,
    ),
  );
}

export function queryParamSubscriptionIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<QueryParamSubscriptionIDFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryParamSubscriptionIDFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryParamSubscriptionIDFilter' from JSON`,
  );
}

/** @internal */
export const CustomerPortalBenefitGrantsListRequest$inboundSchema: z.ZodType<
  CustomerPortalBenefitGrantsListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type_filter: z.nullable(
    z.union([BenefitType$inboundSchema, z.array(BenefitType$inboundSchema)]),
  ).optional(),
  benefit_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  checkout_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  order_id: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  subscription_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(CustomerBenefitGrantSortProperty$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "type_filter": "typeFilter",
    "benefit_id": "benefitId",
    "organization_id": "organizationId",
    "checkout_id": "checkoutId",
    "order_id": "orderId",
    "subscription_id": "subscriptionId",
  });
});

/** @internal */
export type CustomerPortalBenefitGrantsListRequest$Outbound = {
  type_filter?: string | Array<string> | null | undefined;
  benefit_id?: string | Array<string> | null | undefined;
  organization_id?: string | Array<string> | null | undefined;
  checkout_id?: string | Array<string> | null | undefined;
  order_id?: string | Array<string> | null | undefined;
  subscription_id?: string | Array<string> | null | undefined;
  page: number;
  limit: number;
  sorting?: Array<string> | null | undefined;
};

/** @internal */
export const CustomerPortalBenefitGrantsListRequest$outboundSchema: z.ZodType<
  CustomerPortalBenefitGrantsListRequest$Outbound,
  z.ZodTypeDef,
  CustomerPortalBenefitGrantsListRequest
> = z.object({
  typeFilter: z.nullable(
    z.union([BenefitType$outboundSchema, z.array(BenefitType$outboundSchema)]),
  ).optional(),
  benefitId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  checkoutId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  orderId: z.nullable(z.union([z.string(), z.array(z.string())])).optional(),
  subscriptionId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(CustomerBenefitGrantSortProperty$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    typeFilter: "type_filter",
    benefitId: "benefit_id",
    organizationId: "organization_id",
    checkoutId: "checkout_id",
    orderId: "order_id",
    subscriptionId: "subscription_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalBenefitGrantsListRequest$ {
  /** @deprecated use `CustomerPortalBenefitGrantsListRequest$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalBenefitGrantsListRequest$inboundSchema;
  /** @deprecated use `CustomerPortalBenefitGrantsListRequest$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalBenefitGrantsListRequest$outboundSchema;
  /** @deprecated use `CustomerPortalBenefitGrantsListRequest$Outbound` instead. */
  export type Outbound = CustomerPortalBenefitGrantsListRequest$Outbound;
}

export function customerPortalBenefitGrantsListRequestToJSON(
  customerPortalBenefitGrantsListRequest:
    CustomerPortalBenefitGrantsListRequest,
): string {
  return JSON.stringify(
    CustomerPortalBenefitGrantsListRequest$outboundSchema.parse(
      customerPortalBenefitGrantsListRequest,
    ),
  );
}

export function customerPortalBenefitGrantsListRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomerPortalBenefitGrantsListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalBenefitGrantsListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerPortalBenefitGrantsListRequest' from JSON`,
  );
}

/** @internal */
export const CustomerPortalBenefitGrantsListResponse$inboundSchema: z.ZodType<
  CustomerPortalBenefitGrantsListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: ListResourceCustomerBenefitGrant$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type CustomerPortalBenefitGrantsListResponse$Outbound = {
  Result: ListResourceCustomerBenefitGrant$Outbound;
};

/** @internal */
export const CustomerPortalBenefitGrantsListResponse$outboundSchema: z.ZodType<
  CustomerPortalBenefitGrantsListResponse$Outbound,
  z.ZodTypeDef,
  CustomerPortalBenefitGrantsListResponse
> = z.object({
  result: ListResourceCustomerBenefitGrant$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalBenefitGrantsListResponse$ {
  /** @deprecated use `CustomerPortalBenefitGrantsListResponse$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalBenefitGrantsListResponse$inboundSchema;
  /** @deprecated use `CustomerPortalBenefitGrantsListResponse$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalBenefitGrantsListResponse$outboundSchema;
  /** @deprecated use `CustomerPortalBenefitGrantsListResponse$Outbound` instead. */
  export type Outbound = CustomerPortalBenefitGrantsListResponse$Outbound;
}

export function customerPortalBenefitGrantsListResponseToJSON(
  customerPortalBenefitGrantsListResponse:
    CustomerPortalBenefitGrantsListResponse,
): string {
  return JSON.stringify(
    CustomerPortalBenefitGrantsListResponse$outboundSchema.parse(
      customerPortalBenefitGrantsListResponse,
    ),
  );
}

export function customerPortalBenefitGrantsListResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerPortalBenefitGrantsListResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalBenefitGrantsListResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomerPortalBenefitGrantsListResponse' from JSON`,
  );
}
