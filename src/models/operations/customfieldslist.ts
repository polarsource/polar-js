/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  CustomFieldSortProperty,
  CustomFieldSortProperty$inboundSchema,
  CustomFieldSortProperty$outboundSchema,
} from "../components/customfieldsortproperty.js";
import {
  CustomFieldType,
  CustomFieldType$inboundSchema,
  CustomFieldType$outboundSchema,
} from "../components/customfieldtype.js";
import {
  ListResourceCustomField,
  ListResourceCustomField$inboundSchema,
  ListResourceCustomField$Outbound,
  ListResourceCustomField$outboundSchema,
} from "../components/listresourcecustomfield.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Filter by organization ID.
 */
export type CustomFieldsListQueryParamOrganizationIDFilter =
  | string
  | Array<string>;

/**
 * Filter by custom field type.
 */
export type CustomFieldTypeFilter = CustomFieldType | Array<CustomFieldType>;

export type CustomFieldsListRequest = {
  /**
   * Filter by organization ID.
   */
  organizationId?: string | Array<string> | null | undefined;
  /**
   * Filter by custom field name or slug.
   */
  query?: string | null | undefined;
  /**
   * Filter by custom field type.
   */
  typeFilter?: CustomFieldType | Array<CustomFieldType> | null | undefined;
  /**
   * Page number, defaults to 1.
   */
  page?: number | undefined;
  /**
   * Size of a page, defaults to 10. Maximum is 100.
   */
  limit?: number | undefined;
  /**
   * Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.
   */
  sorting?: Array<CustomFieldSortProperty> | null | undefined;
};

export type CustomFieldsListResponse = {
  result: ListResourceCustomField;
};

/** @internal */
export const CustomFieldsListQueryParamOrganizationIDFilter$inboundSchema:
  z.ZodType<
    CustomFieldsListQueryParamOrganizationIDFilter,
    z.ZodTypeDef,
    unknown
  > = z.union([z.string(), z.array(z.string())]);

/** @internal */
export type CustomFieldsListQueryParamOrganizationIDFilter$Outbound =
  | string
  | Array<string>;

/** @internal */
export const CustomFieldsListQueryParamOrganizationIDFilter$outboundSchema:
  z.ZodType<
    CustomFieldsListQueryParamOrganizationIDFilter$Outbound,
    z.ZodTypeDef,
    CustomFieldsListQueryParamOrganizationIDFilter
  > = z.union([z.string(), z.array(z.string())]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFieldsListQueryParamOrganizationIDFilter$ {
  /** @deprecated use `CustomFieldsListQueryParamOrganizationIDFilter$inboundSchema` instead. */
  export const inboundSchema =
    CustomFieldsListQueryParamOrganizationIDFilter$inboundSchema;
  /** @deprecated use `CustomFieldsListQueryParamOrganizationIDFilter$outboundSchema` instead. */
  export const outboundSchema =
    CustomFieldsListQueryParamOrganizationIDFilter$outboundSchema;
  /** @deprecated use `CustomFieldsListQueryParamOrganizationIDFilter$Outbound` instead. */
  export type Outbound =
    CustomFieldsListQueryParamOrganizationIDFilter$Outbound;
}

export function customFieldsListQueryParamOrganizationIDFilterToJSON(
  customFieldsListQueryParamOrganizationIDFilter:
    CustomFieldsListQueryParamOrganizationIDFilter,
): string {
  return JSON.stringify(
    CustomFieldsListQueryParamOrganizationIDFilter$outboundSchema.parse(
      customFieldsListQueryParamOrganizationIDFilter,
    ),
  );
}

export function customFieldsListQueryParamOrganizationIDFilterFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomFieldsListQueryParamOrganizationIDFilter,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomFieldsListQueryParamOrganizationIDFilter$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomFieldsListQueryParamOrganizationIDFilter' from JSON`,
  );
}

/** @internal */
export const CustomFieldTypeFilter$inboundSchema: z.ZodType<
  CustomFieldTypeFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  CustomFieldType$inboundSchema,
  z.array(CustomFieldType$inboundSchema),
]);

/** @internal */
export type CustomFieldTypeFilter$Outbound = string | Array<string>;

/** @internal */
export const CustomFieldTypeFilter$outboundSchema: z.ZodType<
  CustomFieldTypeFilter$Outbound,
  z.ZodTypeDef,
  CustomFieldTypeFilter
> = z.union([
  CustomFieldType$outboundSchema,
  z.array(CustomFieldType$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFieldTypeFilter$ {
  /** @deprecated use `CustomFieldTypeFilter$inboundSchema` instead. */
  export const inboundSchema = CustomFieldTypeFilter$inboundSchema;
  /** @deprecated use `CustomFieldTypeFilter$outboundSchema` instead. */
  export const outboundSchema = CustomFieldTypeFilter$outboundSchema;
  /** @deprecated use `CustomFieldTypeFilter$Outbound` instead. */
  export type Outbound = CustomFieldTypeFilter$Outbound;
}

export function customFieldTypeFilterToJSON(
  customFieldTypeFilter: CustomFieldTypeFilter,
): string {
  return JSON.stringify(
    CustomFieldTypeFilter$outboundSchema.parse(customFieldTypeFilter),
  );
}

export function customFieldTypeFilterFromJSON(
  jsonString: string,
): SafeParseResult<CustomFieldTypeFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomFieldTypeFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomFieldTypeFilter' from JSON`,
  );
}

/** @internal */
export const CustomFieldsListRequest$inboundSchema: z.ZodType<
  CustomFieldsListRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  organization_id: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  query: z.nullable(z.string()).optional(),
  type_filter: z.nullable(
    z.union([
      CustomFieldType$inboundSchema,
      z.array(CustomFieldType$inboundSchema),
    ]),
  ).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(CustomFieldSortProperty$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
    "type_filter": "typeFilter",
  });
});

/** @internal */
export type CustomFieldsListRequest$Outbound = {
  organization_id?: string | Array<string> | null | undefined;
  query?: string | null | undefined;
  type_filter?: string | Array<string> | null | undefined;
  page: number;
  limit: number;
  sorting?: Array<string> | null | undefined;
};

/** @internal */
export const CustomFieldsListRequest$outboundSchema: z.ZodType<
  CustomFieldsListRequest$Outbound,
  z.ZodTypeDef,
  CustomFieldsListRequest
> = z.object({
  organizationId: z.nullable(z.union([z.string(), z.array(z.string())]))
    .optional(),
  query: z.nullable(z.string()).optional(),
  typeFilter: z.nullable(
    z.union([
      CustomFieldType$outboundSchema,
      z.array(CustomFieldType$outboundSchema),
    ]),
  ).optional(),
  page: z.number().int().default(1),
  limit: z.number().int().default(10),
  sorting: z.nullable(z.array(CustomFieldSortProperty$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
    typeFilter: "type_filter",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFieldsListRequest$ {
  /** @deprecated use `CustomFieldsListRequest$inboundSchema` instead. */
  export const inboundSchema = CustomFieldsListRequest$inboundSchema;
  /** @deprecated use `CustomFieldsListRequest$outboundSchema` instead. */
  export const outboundSchema = CustomFieldsListRequest$outboundSchema;
  /** @deprecated use `CustomFieldsListRequest$Outbound` instead. */
  export type Outbound = CustomFieldsListRequest$Outbound;
}

export function customFieldsListRequestToJSON(
  customFieldsListRequest: CustomFieldsListRequest,
): string {
  return JSON.stringify(
    CustomFieldsListRequest$outboundSchema.parse(customFieldsListRequest),
  );
}

export function customFieldsListRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomFieldsListRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomFieldsListRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomFieldsListRequest' from JSON`,
  );
}

/** @internal */
export const CustomFieldsListResponse$inboundSchema: z.ZodType<
  CustomFieldsListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: ListResourceCustomField$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type CustomFieldsListResponse$Outbound = {
  Result: ListResourceCustomField$Outbound;
};

/** @internal */
export const CustomFieldsListResponse$outboundSchema: z.ZodType<
  CustomFieldsListResponse$Outbound,
  z.ZodTypeDef,
  CustomFieldsListResponse
> = z.object({
  result: ListResourceCustomField$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFieldsListResponse$ {
  /** @deprecated use `CustomFieldsListResponse$inboundSchema` instead. */
  export const inboundSchema = CustomFieldsListResponse$inboundSchema;
  /** @deprecated use `CustomFieldsListResponse$outboundSchema` instead. */
  export const outboundSchema = CustomFieldsListResponse$outboundSchema;
  /** @deprecated use `CustomFieldsListResponse$Outbound` instead. */
  export type Outbound = CustomFieldsListResponse$Outbound;
}

export function customFieldsListResponseToJSON(
  customFieldsListResponse: CustomFieldsListResponse,
): string {
  return JSON.stringify(
    CustomFieldsListResponse$outboundSchema.parse(customFieldsListResponse),
  );
}

export function customFieldsListResponseFromJSON(
  jsonString: string,
): SafeParseResult<CustomFieldsListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomFieldsListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomFieldsListResponse' from JSON`,
  );
}
