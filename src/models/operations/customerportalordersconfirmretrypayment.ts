/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  CustomerOrderConfirmPayment,
  CustomerOrderConfirmPayment$inboundSchema,
  CustomerOrderConfirmPayment$Outbound,
  CustomerOrderConfirmPayment$outboundSchema,
} from "../components/customerorderconfirmpayment.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerPortalOrdersConfirmRetryPaymentSecurity = {
  customerSession: string;
};

export type CustomerPortalOrdersConfirmRetryPaymentRequest = {
  /**
   * The order ID.
   */
  id: string;
  customerOrderConfirmPayment: CustomerOrderConfirmPayment;
};

/** @internal */
export const CustomerPortalOrdersConfirmRetryPaymentSecurity$inboundSchema:
  z.ZodType<
    CustomerPortalOrdersConfirmRetryPaymentSecurity,
    z.ZodTypeDef,
    unknown
  > = z.object({
    customer_session: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "customer_session": "customerSession",
    });
  });

/** @internal */
export type CustomerPortalOrdersConfirmRetryPaymentSecurity$Outbound = {
  customer_session: string;
};

/** @internal */
export const CustomerPortalOrdersConfirmRetryPaymentSecurity$outboundSchema:
  z.ZodType<
    CustomerPortalOrdersConfirmRetryPaymentSecurity$Outbound,
    z.ZodTypeDef,
    CustomerPortalOrdersConfirmRetryPaymentSecurity
  > = z.object({
    customerSession: z.string(),
  }).transform((v) => {
    return remap$(v, {
      customerSession: "customer_session",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalOrdersConfirmRetryPaymentSecurity$ {
  /** @deprecated use `CustomerPortalOrdersConfirmRetryPaymentSecurity$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalOrdersConfirmRetryPaymentSecurity$inboundSchema;
  /** @deprecated use `CustomerPortalOrdersConfirmRetryPaymentSecurity$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalOrdersConfirmRetryPaymentSecurity$outboundSchema;
  /** @deprecated use `CustomerPortalOrdersConfirmRetryPaymentSecurity$Outbound` instead. */
  export type Outbound =
    CustomerPortalOrdersConfirmRetryPaymentSecurity$Outbound;
}

export function customerPortalOrdersConfirmRetryPaymentSecurityToJSON(
  customerPortalOrdersConfirmRetryPaymentSecurity:
    CustomerPortalOrdersConfirmRetryPaymentSecurity,
): string {
  return JSON.stringify(
    CustomerPortalOrdersConfirmRetryPaymentSecurity$outboundSchema.parse(
      customerPortalOrdersConfirmRetryPaymentSecurity,
    ),
  );
}

export function customerPortalOrdersConfirmRetryPaymentSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerPortalOrdersConfirmRetryPaymentSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalOrdersConfirmRetryPaymentSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomerPortalOrdersConfirmRetryPaymentSecurity' from JSON`,
  );
}

/** @internal */
export const CustomerPortalOrdersConfirmRetryPaymentRequest$inboundSchema:
  z.ZodType<
    CustomerPortalOrdersConfirmRetryPaymentRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    CustomerOrderConfirmPayment: CustomerOrderConfirmPayment$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "CustomerOrderConfirmPayment": "customerOrderConfirmPayment",
    });
  });

/** @internal */
export type CustomerPortalOrdersConfirmRetryPaymentRequest$Outbound = {
  id: string;
  CustomerOrderConfirmPayment: CustomerOrderConfirmPayment$Outbound;
};

/** @internal */
export const CustomerPortalOrdersConfirmRetryPaymentRequest$outboundSchema:
  z.ZodType<
    CustomerPortalOrdersConfirmRetryPaymentRequest$Outbound,
    z.ZodTypeDef,
    CustomerPortalOrdersConfirmRetryPaymentRequest
  > = z.object({
    id: z.string(),
    customerOrderConfirmPayment: CustomerOrderConfirmPayment$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      customerOrderConfirmPayment: "CustomerOrderConfirmPayment",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPortalOrdersConfirmRetryPaymentRequest$ {
  /** @deprecated use `CustomerPortalOrdersConfirmRetryPaymentRequest$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPortalOrdersConfirmRetryPaymentRequest$inboundSchema;
  /** @deprecated use `CustomerPortalOrdersConfirmRetryPaymentRequest$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPortalOrdersConfirmRetryPaymentRequest$outboundSchema;
  /** @deprecated use `CustomerPortalOrdersConfirmRetryPaymentRequest$Outbound` instead. */
  export type Outbound =
    CustomerPortalOrdersConfirmRetryPaymentRequest$Outbound;
}

export function customerPortalOrdersConfirmRetryPaymentRequestToJSON(
  customerPortalOrdersConfirmRetryPaymentRequest:
    CustomerPortalOrdersConfirmRetryPaymentRequest,
): string {
  return JSON.stringify(
    CustomerPortalOrdersConfirmRetryPaymentRequest$outboundSchema.parse(
      customerPortalOrdersConfirmRetryPaymentRequest,
    ),
  );
}

export function customerPortalOrdersConfirmRetryPaymentRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerPortalOrdersConfirmRetryPaymentRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPortalOrdersConfirmRetryPaymentRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomerPortalOrdersConfirmRetryPaymentRequest' from JSON`,
  );
}
