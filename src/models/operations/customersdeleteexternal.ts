/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomersDeleteExternalRequest = {
  /**
   * The customer external ID.
   */
  externalId: string;
};

/** @internal */
export const CustomersDeleteExternalRequest$inboundSchema: z.ZodType<
  CustomersDeleteExternalRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "external_id": "externalId",
  });
});

/** @internal */
export type CustomersDeleteExternalRequest$Outbound = {
  external_id: string;
};

/** @internal */
export const CustomersDeleteExternalRequest$outboundSchema: z.ZodType<
  CustomersDeleteExternalRequest$Outbound,
  z.ZodTypeDef,
  CustomersDeleteExternalRequest
> = z.object({
  externalId: z.string(),
}).transform((v) => {
  return remap$(v, {
    externalId: "external_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersDeleteExternalRequest$ {
  /** @deprecated use `CustomersDeleteExternalRequest$inboundSchema` instead. */
  export const inboundSchema = CustomersDeleteExternalRequest$inboundSchema;
  /** @deprecated use `CustomersDeleteExternalRequest$outboundSchema` instead. */
  export const outboundSchema = CustomersDeleteExternalRequest$outboundSchema;
  /** @deprecated use `CustomersDeleteExternalRequest$Outbound` instead. */
  export type Outbound = CustomersDeleteExternalRequest$Outbound;
}

export function customersDeleteExternalRequestToJSON(
  customersDeleteExternalRequest: CustomersDeleteExternalRequest,
): string {
  return JSON.stringify(
    CustomersDeleteExternalRequest$outboundSchema.parse(
      customersDeleteExternalRequest,
    ),
  );
}

export function customersDeleteExternalRequestFromJSON(
  jsonString: string,
): SafeParseResult<CustomersDeleteExternalRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomersDeleteExternalRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomersDeleteExternalRequest' from JSON`,
  );
}
