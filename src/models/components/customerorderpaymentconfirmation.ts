/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Response after confirming a retry payment.
 */
export type CustomerOrderPaymentConfirmation = {
  /**
   * Payment status after confirmation.
   */
  status: string;
  /**
   * Client secret for handling additional actions.
   */
  clientSecret?: string | null | undefined;
  /**
   * Error message if confirmation failed.
   */
  error?: string | null | undefined;
};

/** @internal */
export const CustomerOrderPaymentConfirmation$inboundSchema: z.ZodType<
  CustomerOrderPaymentConfirmation,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string(),
  client_secret: z.nullable(z.string()).optional(),
  error: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "client_secret": "clientSecret",
  });
});

/** @internal */
export type CustomerOrderPaymentConfirmation$Outbound = {
  status: string;
  client_secret?: string | null | undefined;
  error?: string | null | undefined;
};

/** @internal */
export const CustomerOrderPaymentConfirmation$outboundSchema: z.ZodType<
  CustomerOrderPaymentConfirmation$Outbound,
  z.ZodTypeDef,
  CustomerOrderPaymentConfirmation
> = z.object({
  status: z.string(),
  clientSecret: z.nullable(z.string()).optional(),
  error: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    clientSecret: "client_secret",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerOrderPaymentConfirmation$ {
  /** @deprecated use `CustomerOrderPaymentConfirmation$inboundSchema` instead. */
  export const inboundSchema = CustomerOrderPaymentConfirmation$inboundSchema;
  /** @deprecated use `CustomerOrderPaymentConfirmation$outboundSchema` instead. */
  export const outboundSchema = CustomerOrderPaymentConfirmation$outboundSchema;
  /** @deprecated use `CustomerOrderPaymentConfirmation$Outbound` instead. */
  export type Outbound = CustomerOrderPaymentConfirmation$Outbound;
}

export function customerOrderPaymentConfirmationToJSON(
  customerOrderPaymentConfirmation: CustomerOrderPaymentConfirmation,
): string {
  return JSON.stringify(
    CustomerOrderPaymentConfirmation$outboundSchema.parse(
      customerOrderPaymentConfirmation,
    ),
  );
}

export function customerOrderPaymentConfirmationFromJSON(
  jsonString: string,
): SafeParseResult<CustomerOrderPaymentConfirmation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerOrderPaymentConfirmation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerOrderPaymentConfirmation' from JSON`,
  );
}
