/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ProductPriceOneTimeCustomCreateType = {
  OneTime: "one_time",
} as const;
export type ProductPriceOneTimeCustomCreateType = ClosedEnum<
  typeof ProductPriceOneTimeCustomCreateType
>;

export const ProductPriceOneTimeCustomCreateAmountType = {
  Custom: "custom",
} as const;
export type ProductPriceOneTimeCustomCreateAmountType = ClosedEnum<
  typeof ProductPriceOneTimeCustomCreateAmountType
>;

/**
 * Schema to create a pay-what-you-want price for a one-time product.
 */
export type ProductPriceOneTimeCustomCreate = {
  type?: "one_time" | undefined;
  amountType?: "custom" | undefined;
  /**
   * The currency. Currently, only `usd` is supported.
   */
  priceCurrency?: string | undefined;
  /**
   * The minimum amount the customer can pay.
   */
  minimumAmount?: number | null | undefined;
  /**
   * The maximum amount the customer can pay.
   */
  maximumAmount?: number | null | undefined;
  /**
   * The initial amount shown to the customer.
   */
  presetAmount?: number | null | undefined;
};

/** @internal */
export const ProductPriceOneTimeCustomCreateType$inboundSchema: z.ZodNativeEnum<
  typeof ProductPriceOneTimeCustomCreateType
> = z.nativeEnum(ProductPriceOneTimeCustomCreateType);

/** @internal */
export const ProductPriceOneTimeCustomCreateType$outboundSchema:
  z.ZodNativeEnum<typeof ProductPriceOneTimeCustomCreateType> =
    ProductPriceOneTimeCustomCreateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductPriceOneTimeCustomCreateType$ {
  /** @deprecated use `ProductPriceOneTimeCustomCreateType$inboundSchema` instead. */
  export const inboundSchema =
    ProductPriceOneTimeCustomCreateType$inboundSchema;
  /** @deprecated use `ProductPriceOneTimeCustomCreateType$outboundSchema` instead. */
  export const outboundSchema =
    ProductPriceOneTimeCustomCreateType$outboundSchema;
}

/** @internal */
export const ProductPriceOneTimeCustomCreateAmountType$inboundSchema:
  z.ZodNativeEnum<typeof ProductPriceOneTimeCustomCreateAmountType> = z
    .nativeEnum(ProductPriceOneTimeCustomCreateAmountType);

/** @internal */
export const ProductPriceOneTimeCustomCreateAmountType$outboundSchema:
  z.ZodNativeEnum<typeof ProductPriceOneTimeCustomCreateAmountType> =
    ProductPriceOneTimeCustomCreateAmountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductPriceOneTimeCustomCreateAmountType$ {
  /** @deprecated use `ProductPriceOneTimeCustomCreateAmountType$inboundSchema` instead. */
  export const inboundSchema =
    ProductPriceOneTimeCustomCreateAmountType$inboundSchema;
  /** @deprecated use `ProductPriceOneTimeCustomCreateAmountType$outboundSchema` instead. */
  export const outboundSchema =
    ProductPriceOneTimeCustomCreateAmountType$outboundSchema;
}

/** @internal */
export const ProductPriceOneTimeCustomCreate$inboundSchema: z.ZodType<
  ProductPriceOneTimeCustomCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("one_time").optional(),
  amount_type: z.literal("custom").optional(),
  price_currency: z.string().default("usd"),
  minimum_amount: z.nullable(z.number().int()).optional(),
  maximum_amount: z.nullable(z.number().int()).optional(),
  preset_amount: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "amount_type": "amountType",
    "price_currency": "priceCurrency",
    "minimum_amount": "minimumAmount",
    "maximum_amount": "maximumAmount",
    "preset_amount": "presetAmount",
  });
});

/** @internal */
export type ProductPriceOneTimeCustomCreate$Outbound = {
  type: "one_time";
  amount_type: "custom";
  price_currency: string;
  minimum_amount?: number | null | undefined;
  maximum_amount?: number | null | undefined;
  preset_amount?: number | null | undefined;
};

/** @internal */
export const ProductPriceOneTimeCustomCreate$outboundSchema: z.ZodType<
  ProductPriceOneTimeCustomCreate$Outbound,
  z.ZodTypeDef,
  ProductPriceOneTimeCustomCreate
> = z.object({
  type: z.literal("one_time").default("one_time"),
  amountType: z.literal("custom").default("custom"),
  priceCurrency: z.string().default("usd"),
  minimumAmount: z.nullable(z.number().int()).optional(),
  maximumAmount: z.nullable(z.number().int()).optional(),
  presetAmount: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    amountType: "amount_type",
    priceCurrency: "price_currency",
    minimumAmount: "minimum_amount",
    maximumAmount: "maximum_amount",
    presetAmount: "preset_amount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductPriceOneTimeCustomCreate$ {
  /** @deprecated use `ProductPriceOneTimeCustomCreate$inboundSchema` instead. */
  export const inboundSchema = ProductPriceOneTimeCustomCreate$inboundSchema;
  /** @deprecated use `ProductPriceOneTimeCustomCreate$outboundSchema` instead. */
  export const outboundSchema = ProductPriceOneTimeCustomCreate$outboundSchema;
  /** @deprecated use `ProductPriceOneTimeCustomCreate$Outbound` instead. */
  export type Outbound = ProductPriceOneTimeCustomCreate$Outbound;
}

export function productPriceOneTimeCustomCreateToJSON(
  productPriceOneTimeCustomCreate: ProductPriceOneTimeCustomCreate,
): string {
  return JSON.stringify(
    ProductPriceOneTimeCustomCreate$outboundSchema.parse(
      productPriceOneTimeCustomCreate,
    ),
  );
}

export function productPriceOneTimeCustomCreateFromJSON(
  jsonString: string,
): SafeParseResult<ProductPriceOneTimeCustomCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductPriceOneTimeCustomCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductPriceOneTimeCustomCreate' from JSON`,
  );
}
