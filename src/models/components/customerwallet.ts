/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A wallet represents your balance with an organization.
 *
 * @remarks
 *
 * You can top-up your wallet and use the balance to pay for usage.
 */
export type CustomerWallet = {
  /**
   * The ID of the object.
   */
  id: string;
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The ID of the customer that owns the wallet.
   */
  customerId: string;
  /**
   * The current balance of the wallet, in cents.
   */
  balance: number;
  /**
   * The currency of the wallet.
   */
  currency: string;
};

/** @internal */
export const CustomerWallet$inboundSchema: z.ZodType<
  CustomerWallet,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  customer_id: z.string(),
  balance: z.number().int(),
  currency: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "customer_id": "customerId",
  });
});

/** @internal */
export type CustomerWallet$Outbound = {
  id: string;
  created_at: string;
  modified_at: string | null;
  customer_id: string;
  balance: number;
  currency: string;
};

/** @internal */
export const CustomerWallet$outboundSchema: z.ZodType<
  CustomerWallet$Outbound,
  z.ZodTypeDef,
  CustomerWallet
> = z.object({
  id: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  customerId: z.string(),
  balance: z.number().int(),
  currency: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerWallet$ {
  /** @deprecated use `CustomerWallet$inboundSchema` instead. */
  export const inboundSchema = CustomerWallet$inboundSchema;
  /** @deprecated use `CustomerWallet$outboundSchema` instead. */
  export const outboundSchema = CustomerWallet$outboundSchema;
  /** @deprecated use `CustomerWallet$Outbound` instead. */
  export type Outbound = CustomerWallet$Outbound;
}

export function customerWalletToJSON(customerWallet: CustomerWallet): string {
  return JSON.stringify(CustomerWallet$outboundSchema.parse(customerWallet));
}

export function customerWalletFromJSON(
  jsonString: string,
): SafeParseResult<CustomerWallet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerWallet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerWallet' from JSON`,
  );
}
