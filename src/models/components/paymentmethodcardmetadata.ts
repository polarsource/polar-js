/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PaymentMethodCardMetadata = {
  brand: string;
  last4: string;
  expMonth: number;
  expYear: number;
  wallet?: string | null | undefined;
};

/** @internal */
export const PaymentMethodCardMetadata$inboundSchema: z.ZodType<
  PaymentMethodCardMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  brand: z.string(),
  last4: z.string(),
  exp_month: z.number().int(),
  exp_year: z.number().int(),
  wallet: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "exp_month": "expMonth",
    "exp_year": "expYear",
  });
});

/** @internal */
export type PaymentMethodCardMetadata$Outbound = {
  brand: string;
  last4: string;
  exp_month: number;
  exp_year: number;
  wallet?: string | null | undefined;
};

/** @internal */
export const PaymentMethodCardMetadata$outboundSchema: z.ZodType<
  PaymentMethodCardMetadata$Outbound,
  z.ZodTypeDef,
  PaymentMethodCardMetadata
> = z.object({
  brand: z.string(),
  last4: z.string(),
  expMonth: z.number().int(),
  expYear: z.number().int(),
  wallet: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    expMonth: "exp_month",
    expYear: "exp_year",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodCardMetadata$ {
  /** @deprecated use `PaymentMethodCardMetadata$inboundSchema` instead. */
  export const inboundSchema = PaymentMethodCardMetadata$inboundSchema;
  /** @deprecated use `PaymentMethodCardMetadata$outboundSchema` instead. */
  export const outboundSchema = PaymentMethodCardMetadata$outboundSchema;
  /** @deprecated use `PaymentMethodCardMetadata$Outbound` instead. */
  export type Outbound = PaymentMethodCardMetadata$Outbound;
}

export function paymentMethodCardMetadataToJSON(
  paymentMethodCardMetadata: PaymentMethodCardMetadata,
): string {
  return JSON.stringify(
    PaymentMethodCardMetadata$outboundSchema.parse(paymentMethodCardMetadata),
  );
}

export function paymentMethodCardMetadataFromJSON(
  jsonString: string,
): SafeParseResult<PaymentMethodCardMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentMethodCardMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentMethodCardMetadata' from JSON`,
  );
}
