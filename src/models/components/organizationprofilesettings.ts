/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OrganizationSubscribePromoteSettings,
  OrganizationSubscribePromoteSettings$inboundSchema,
  OrganizationSubscribePromoteSettings$Outbound,
  OrganizationSubscribePromoteSettings$outboundSchema,
} from "./organizationsubscribepromotesettings.js";

export type OrganizationProfileSettings = {
  /**
   * If this organization has a profile enabled
   */
  enabled?: boolean | null | undefined;
  /**
   * A description of the organization
   */
  description?: string | null | undefined;
  /**
   * A list of featured projects
   */
  featuredProjects?: Array<string> | null | undefined;
  /**
   * A list of featured organizations
   */
  featuredOrganizations?: Array<string> | null | undefined;
  /**
   * A list of links associated with the organization
   */
  links?: Array<string> | null | undefined;
  /**
   * Subscription promotion settings
   */
  subscribe?: OrganizationSubscribePromoteSettings | null | undefined;
  /**
   * Accent color for the organization
   */
  accentColor?: string | null | undefined;
};

/** @internal */
export const OrganizationProfileSettings$inboundSchema: z.ZodType<
  OrganizationProfileSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  enabled: z.nullable(z.boolean()).optional(),
  description: z.nullable(z.string()).optional(),
  featured_projects: z.nullable(z.array(z.string())).optional(),
  featured_organizations: z.nullable(z.array(z.string())).optional(),
  links: z.nullable(z.array(z.string())).optional(),
  subscribe: z.nullable(OrganizationSubscribePromoteSettings$inboundSchema)
    .optional(),
  accent_color: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "featured_projects": "featuredProjects",
    "featured_organizations": "featuredOrganizations",
    "accent_color": "accentColor",
  });
});

/** @internal */
export type OrganizationProfileSettings$Outbound = {
  enabled?: boolean | null | undefined;
  description?: string | null | undefined;
  featured_projects?: Array<string> | null | undefined;
  featured_organizations?: Array<string> | null | undefined;
  links?: Array<string> | null | undefined;
  subscribe?: OrganizationSubscribePromoteSettings$Outbound | null | undefined;
  accent_color?: string | null | undefined;
};

/** @internal */
export const OrganizationProfileSettings$outboundSchema: z.ZodType<
  OrganizationProfileSettings$Outbound,
  z.ZodTypeDef,
  OrganizationProfileSettings
> = z.object({
  enabled: z.nullable(z.boolean()).optional(),
  description: z.nullable(z.string()).optional(),
  featuredProjects: z.nullable(z.array(z.string())).optional(),
  featuredOrganizations: z.nullable(z.array(z.string())).optional(),
  links: z.nullable(z.array(z.string())).optional(),
  subscribe: z.nullable(OrganizationSubscribePromoteSettings$outboundSchema)
    .optional(),
  accentColor: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    featuredProjects: "featured_projects",
    featuredOrganizations: "featured_organizations",
    accentColor: "accent_color",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationProfileSettings$ {
  /** @deprecated use `OrganizationProfileSettings$inboundSchema` instead. */
  export const inboundSchema = OrganizationProfileSettings$inboundSchema;
  /** @deprecated use `OrganizationProfileSettings$outboundSchema` instead. */
  export const outboundSchema = OrganizationProfileSettings$outboundSchema;
  /** @deprecated use `OrganizationProfileSettings$Outbound` instead. */
  export type Outbound = OrganizationProfileSettings$Outbound;
}

export function organizationProfileSettingsToJSON(
  organizationProfileSettings: OrganizationProfileSettings,
): string {
  return JSON.stringify(
    OrganizationProfileSettings$outboundSchema.parse(
      organizationProfileSettings,
    ),
  );
}

export function organizationProfileSettingsFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationProfileSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationProfileSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationProfileSettings' from JSON`,
  );
}
