/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Refund,
  Refund$inboundSchema,
  Refund$Outbound,
  Refund$outboundSchema,
} from "./refund.js";

/**
 * Sent when a refund is created regardless of status.
 *
 * @remarks
 *
 * **Discord & Slack support:** Full
 */
export type WebhookRefundCreatedPayload = {
  type?: "refund.created" | undefined;
  data: Refund;
};

/** @internal */
export const WebhookRefundCreatedPayload$inboundSchema: z.ZodType<
  WebhookRefundCreatedPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("refund.created").optional(),
  data: Refund$inboundSchema,
});

/** @internal */
export type WebhookRefundCreatedPayload$Outbound = {
  type: "refund.created";
  data: Refund$Outbound;
};

/** @internal */
export const WebhookRefundCreatedPayload$outboundSchema: z.ZodType<
  WebhookRefundCreatedPayload$Outbound,
  z.ZodTypeDef,
  WebhookRefundCreatedPayload
> = z.object({
  type: z.literal("refund.created").default("refund.created" as const),
  data: Refund$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookRefundCreatedPayload$ {
  /** @deprecated use `WebhookRefundCreatedPayload$inboundSchema` instead. */
  export const inboundSchema = WebhookRefundCreatedPayload$inboundSchema;
  /** @deprecated use `WebhookRefundCreatedPayload$outboundSchema` instead. */
  export const outboundSchema = WebhookRefundCreatedPayload$outboundSchema;
  /** @deprecated use `WebhookRefundCreatedPayload$Outbound` instead. */
  export type Outbound = WebhookRefundCreatedPayload$Outbound;
}

export function webhookRefundCreatedPayloadToJSON(
  webhookRefundCreatedPayload: WebhookRefundCreatedPayload,
): string {
  return JSON.stringify(
    WebhookRefundCreatedPayload$outboundSchema.parse(
      webhookRefundCreatedPayload,
    ),
  );
}

export function webhookRefundCreatedPayloadFromJSON(
  jsonString: string,
): SafeParseResult<WebhookRefundCreatedPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookRefundCreatedPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookRefundCreatedPayload' from JSON`,
  );
}
