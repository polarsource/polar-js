/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OrderRefundedMetadata = {
  orderId: string;
  refundedAmount: number;
  currency: string;
  backfilled?: boolean | undefined;
};

/** @internal */
export const OrderRefundedMetadata$inboundSchema: z.ZodType<
  OrderRefundedMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  order_id: z.string(),
  refunded_amount: z.number().int(),
  currency: z.string(),
  backfilled: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "order_id": "orderId",
    "refunded_amount": "refundedAmount",
  });
});

/** @internal */
export type OrderRefundedMetadata$Outbound = {
  order_id: string;
  refunded_amount: number;
  currency: string;
  backfilled?: boolean | undefined;
};

/** @internal */
export const OrderRefundedMetadata$outboundSchema: z.ZodType<
  OrderRefundedMetadata$Outbound,
  z.ZodTypeDef,
  OrderRefundedMetadata
> = z.object({
  orderId: z.string(),
  refundedAmount: z.number().int(),
  currency: z.string(),
  backfilled: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    orderId: "order_id",
    refundedAmount: "refunded_amount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderRefundedMetadata$ {
  /** @deprecated use `OrderRefundedMetadata$inboundSchema` instead. */
  export const inboundSchema = OrderRefundedMetadata$inboundSchema;
  /** @deprecated use `OrderRefundedMetadata$outboundSchema` instead. */
  export const outboundSchema = OrderRefundedMetadata$outboundSchema;
  /** @deprecated use `OrderRefundedMetadata$Outbound` instead. */
  export type Outbound = OrderRefundedMetadata$Outbound;
}

export function orderRefundedMetadataToJSON(
  orderRefundedMetadata: OrderRefundedMetadata,
): string {
  return JSON.stringify(
    OrderRefundedMetadata$outboundSchema.parse(orderRefundedMetadata),
  );
}

export function orderRefundedMetadataFromJSON(
  jsonString: string,
): SafeParseResult<OrderRefundedMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderRefundedMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderRefundedMetadata' from JSON`,
  );
}
