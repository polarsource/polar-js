/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OrderProduct = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The ID of the product.
   */
  id: string;
  /**
   * The name of the product.
   */
  name: string;
  /**
   * The description of the product.
   */
  description: string | null;
  /**
   * Whether the product is a subscription tier.
   */
  isRecurring: boolean;
  /**
   * Whether the product is archived and no longer available.
   */
  isArchived: boolean;
  /**
   * The ID of the organization owning the product.
   */
  organizationId: string;
};

/** @internal */
export const OrderProduct$inboundSchema: z.ZodType<
  OrderProduct,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  id: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  is_recurring: z.boolean(),
  is_archived: z.boolean(),
  organization_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "is_recurring": "isRecurring",
    "is_archived": "isArchived",
    "organization_id": "organizationId",
  });
});

/** @internal */
export type OrderProduct$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  name: string;
  description: string | null;
  is_recurring: boolean;
  is_archived: boolean;
  organization_id: string;
};

/** @internal */
export const OrderProduct$outboundSchema: z.ZodType<
  OrderProduct$Outbound,
  z.ZodTypeDef,
  OrderProduct
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  isRecurring: z.boolean(),
  isArchived: z.boolean(),
  organizationId: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    isRecurring: "is_recurring",
    isArchived: "is_archived",
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderProduct$ {
  /** @deprecated use `OrderProduct$inboundSchema` instead. */
  export const inboundSchema = OrderProduct$inboundSchema;
  /** @deprecated use `OrderProduct$outboundSchema` instead. */
  export const outboundSchema = OrderProduct$outboundSchema;
  /** @deprecated use `OrderProduct$Outbound` instead. */
  export type Outbound = OrderProduct$Outbound;
}

export function orderProductToJSON(orderProduct: OrderProduct): string {
  return JSON.stringify(OrderProduct$outboundSchema.parse(orderProduct));
}

export function orderProductFromJSON(
  jsonString: string,
): SafeParseResult<OrderProduct, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderProduct$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderProduct' from JSON`,
  );
}
