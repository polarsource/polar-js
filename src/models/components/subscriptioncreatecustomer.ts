/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscriptionCreateCustomerMetadata =
  | string
  | number
  | number
  | boolean;

/**
 * Create a subscription for an existing customer.
 */
export type SubscriptionCreateCustomer = {
  /**
   * Key-value object allowing you to store additional information.
   *
   * @remarks
   *
   * The key must be a string with a maximum length of **40 characters**.
   * The value must be either:
   *
   * * A string with a maximum length of **500 characters**
   * * An integer
   * * A floating-point number
   * * A boolean
   *
   * You can store up to **50 key-value pairs**.
   */
  metadata?: { [k: string]: string | number | number | boolean } | undefined;
  /**
   * The ID of the recurring product to subscribe to. Must be a free product, otherwise the customer should go through a checkout flow.
   */
  productId: string;
  /**
   * The ID of the customer to create the subscription for.
   */
  customerId: string;
};

/** @internal */
export const SubscriptionCreateCustomerMetadata$inboundSchema: z.ZodType<
  SubscriptionCreateCustomerMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);

/** @internal */
export type SubscriptionCreateCustomerMetadata$Outbound =
  | string
  | number
  | number
  | boolean;

/** @internal */
export const SubscriptionCreateCustomerMetadata$outboundSchema: z.ZodType<
  SubscriptionCreateCustomerMetadata$Outbound,
  z.ZodTypeDef,
  SubscriptionCreateCustomerMetadata
> = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateCustomerMetadata$ {
  /** @deprecated use `SubscriptionCreateCustomerMetadata$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCreateCustomerMetadata$inboundSchema;
  /** @deprecated use `SubscriptionCreateCustomerMetadata$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCreateCustomerMetadata$outboundSchema;
  /** @deprecated use `SubscriptionCreateCustomerMetadata$Outbound` instead. */
  export type Outbound = SubscriptionCreateCustomerMetadata$Outbound;
}

export function subscriptionCreateCustomerMetadataToJSON(
  subscriptionCreateCustomerMetadata: SubscriptionCreateCustomerMetadata,
): string {
  return JSON.stringify(
    SubscriptionCreateCustomerMetadata$outboundSchema.parse(
      subscriptionCreateCustomerMetadata,
    ),
  );
}

export function subscriptionCreateCustomerMetadataFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCreateCustomerMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCreateCustomerMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCreateCustomerMetadata' from JSON`,
  );
}

/** @internal */
export const SubscriptionCreateCustomer$inboundSchema: z.ZodType<
  SubscriptionCreateCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.record(
    z.union([z.string(), z.number().int(), z.number(), z.boolean()]),
  ).optional(),
  product_id: z.string(),
  customer_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "customer_id": "customerId",
  });
});

/** @internal */
export type SubscriptionCreateCustomer$Outbound = {
  metadata?: { [k: string]: string | number | number | boolean } | undefined;
  product_id: string;
  customer_id: string;
};

/** @internal */
export const SubscriptionCreateCustomer$outboundSchema: z.ZodType<
  SubscriptionCreateCustomer$Outbound,
  z.ZodTypeDef,
  SubscriptionCreateCustomer
> = z.object({
  metadata: z.record(
    z.union([z.string(), z.number().int(), z.number(), z.boolean()]),
  ).optional(),
  productId: z.string(),
  customerId: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateCustomer$ {
  /** @deprecated use `SubscriptionCreateCustomer$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCreateCustomer$inboundSchema;
  /** @deprecated use `SubscriptionCreateCustomer$outboundSchema` instead. */
  export const outboundSchema = SubscriptionCreateCustomer$outboundSchema;
  /** @deprecated use `SubscriptionCreateCustomer$Outbound` instead. */
  export type Outbound = SubscriptionCreateCustomer$Outbound;
}

export function subscriptionCreateCustomerToJSON(
  subscriptionCreateCustomer: SubscriptionCreateCustomer,
): string {
  return JSON.stringify(
    SubscriptionCreateCustomer$outboundSchema.parse(subscriptionCreateCustomer),
  );
}

export function subscriptionCreateCustomerFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCreateCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionCreateCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCreateCustomer' from JSON`,
  );
}
