/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  OrderBillingReason,
  OrderBillingReason$inboundSchema,
  OrderBillingReason$outboundSchema,
} from "./orderbillingreason.js";
import {
  OrderProduct,
  OrderProduct$inboundSchema,
  OrderProduct$Outbound,
  OrderProduct$outboundSchema,
} from "./orderproduct.js";
import {
  OrderSubscription,
  OrderSubscription$inboundSchema,
  OrderSubscription$Outbound,
  OrderSubscription$outboundSchema,
} from "./ordersubscription.js";
import {
  OrderUser,
  OrderUser$inboundSchema,
  OrderUser$Outbound,
  OrderUser$outboundSchema,
} from "./orderuser.js";
import {
  ProductPrice,
  ProductPrice$inboundSchema,
  ProductPrice$Outbound,
  ProductPrice$outboundSchema,
} from "./productprice.js";

export type Order = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The ID of the object.
   */
  id: string;
  metadata: { [k: string]: string };
  amount: number;
  taxAmount: number;
  currency: string;
  billingReason: OrderBillingReason;
  userId: string;
  productId: string;
  productPriceId: string;
  subscriptionId: string | null;
  checkoutId: string | null;
  user: OrderUser;
  product: OrderProduct;
  productPrice: ProductPrice;
  subscription: OrderSubscription | null;
};

/** @internal */
export const Order$inboundSchema: z.ZodType<Order, z.ZodTypeDef, unknown> = z
  .object({
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    modified_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ),
    id: z.string(),
    metadata: z.record(z.string()),
    amount: z.number().int(),
    tax_amount: z.number().int(),
    currency: z.string(),
    billing_reason: OrderBillingReason$inboundSchema,
    user_id: z.string(),
    product_id: z.string(),
    product_price_id: z.string(),
    subscription_id: z.nullable(z.string()),
    checkout_id: z.nullable(z.string()),
    user: OrderUser$inboundSchema,
    product: OrderProduct$inboundSchema,
    product_price: ProductPrice$inboundSchema,
    subscription: z.nullable(OrderSubscription$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "modified_at": "modifiedAt",
      "tax_amount": "taxAmount",
      "billing_reason": "billingReason",
      "user_id": "userId",
      "product_id": "productId",
      "product_price_id": "productPriceId",
      "subscription_id": "subscriptionId",
      "checkout_id": "checkoutId",
      "product_price": "productPrice",
    });
  });

/** @internal */
export type Order$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  metadata: { [k: string]: string };
  amount: number;
  tax_amount: number;
  currency: string;
  billing_reason: string;
  user_id: string;
  product_id: string;
  product_price_id: string;
  subscription_id: string | null;
  checkout_id: string | null;
  user: OrderUser$Outbound;
  product: OrderProduct$Outbound;
  product_price: ProductPrice$Outbound;
  subscription: OrderSubscription$Outbound | null;
};

/** @internal */
export const Order$outboundSchema: z.ZodType<
  Order$Outbound,
  z.ZodTypeDef,
  Order
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  metadata: z.record(z.string()),
  amount: z.number().int(),
  taxAmount: z.number().int(),
  currency: z.string(),
  billingReason: OrderBillingReason$outboundSchema,
  userId: z.string(),
  productId: z.string(),
  productPriceId: z.string(),
  subscriptionId: z.nullable(z.string()),
  checkoutId: z.nullable(z.string()),
  user: OrderUser$outboundSchema,
  product: OrderProduct$outboundSchema,
  productPrice: ProductPrice$outboundSchema,
  subscription: z.nullable(OrderSubscription$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    taxAmount: "tax_amount",
    billingReason: "billing_reason",
    userId: "user_id",
    productId: "product_id",
    productPriceId: "product_price_id",
    subscriptionId: "subscription_id",
    checkoutId: "checkout_id",
    productPrice: "product_price",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Order$ {
  /** @deprecated use `Order$inboundSchema` instead. */
  export const inboundSchema = Order$inboundSchema;
  /** @deprecated use `Order$outboundSchema` instead. */
  export const outboundSchema = Order$outboundSchema;
  /** @deprecated use `Order$Outbound` instead. */
  export type Outbound = Order$Outbound;
}
