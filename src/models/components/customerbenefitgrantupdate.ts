/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CustomerBenefitGrantCustomUpdate,
  CustomerBenefitGrantCustomUpdate$inboundSchema,
  CustomerBenefitGrantCustomUpdate$Outbound,
  CustomerBenefitGrantCustomUpdate$outboundSchema,
} from "./customerbenefitgrantcustomupdate.js";
import {
  CustomerBenefitGrantDiscordUpdate,
  CustomerBenefitGrantDiscordUpdate$inboundSchema,
  CustomerBenefitGrantDiscordUpdate$Outbound,
  CustomerBenefitGrantDiscordUpdate$outboundSchema,
} from "./customerbenefitgrantdiscordupdate.js";
import {
  CustomerBenefitGrantDownloadablesUpdate,
  CustomerBenefitGrantDownloadablesUpdate$inboundSchema,
  CustomerBenefitGrantDownloadablesUpdate$Outbound,
  CustomerBenefitGrantDownloadablesUpdate$outboundSchema,
} from "./customerbenefitgrantdownloadablesupdate.js";
import {
  CustomerBenefitGrantGitHubRepositoryUpdate,
  CustomerBenefitGrantGitHubRepositoryUpdate$inboundSchema,
  CustomerBenefitGrantGitHubRepositoryUpdate$Outbound,
  CustomerBenefitGrantGitHubRepositoryUpdate$outboundSchema,
} from "./customerbenefitgrantgithubrepositoryupdate.js";
import {
  CustomerBenefitGrantLicenseKeysUpdate,
  CustomerBenefitGrantLicenseKeysUpdate$inboundSchema,
  CustomerBenefitGrantLicenseKeysUpdate$Outbound,
  CustomerBenefitGrantLicenseKeysUpdate$outboundSchema,
} from "./customerbenefitgrantlicensekeysupdate.js";

export type CustomerBenefitGrantUpdate =
  | (CustomerBenefitGrantCustomUpdate & { benefitType: "custom" })
  | (CustomerBenefitGrantDownloadablesUpdate & { benefitType: "downloadables" })
  | (CustomerBenefitGrantLicenseKeysUpdate & { benefitType: "license_keys" })
  | (CustomerBenefitGrantDiscordUpdate & { benefitType: "discord" })
  | (CustomerBenefitGrantGitHubRepositoryUpdate & {
    benefitType: "github_repository";
  });

/** @internal */
export const CustomerBenefitGrantUpdate$inboundSchema: z.ZodType<
  CustomerBenefitGrantUpdate,
  z.ZodTypeDef,
  unknown
> = z.union([
  CustomerBenefitGrantCustomUpdate$inboundSchema.and(
    z.object({ benefit_type: z.literal("custom") }).transform((v) => ({
      benefitType: v.benefit_type,
    })),
  ),
  CustomerBenefitGrantDownloadablesUpdate$inboundSchema.and(
    z.object({ benefit_type: z.literal("downloadables") }).transform((v) => ({
      benefitType: v.benefit_type,
    })),
  ),
  CustomerBenefitGrantLicenseKeysUpdate$inboundSchema.and(
    z.object({ benefit_type: z.literal("license_keys") }).transform((v) => ({
      benefitType: v.benefit_type,
    })),
  ),
  CustomerBenefitGrantDiscordUpdate$inboundSchema.and(
    z.object({ benefit_type: z.literal("discord") }).transform((v) => ({
      benefitType: v.benefit_type,
    })),
  ),
  CustomerBenefitGrantGitHubRepositoryUpdate$inboundSchema.and(
    z.object({ benefit_type: z.literal("github_repository") }).transform((
      v,
    ) => ({ benefitType: v.benefit_type })),
  ),
]);

/** @internal */
export type CustomerBenefitGrantUpdate$Outbound =
  | (CustomerBenefitGrantCustomUpdate$Outbound & { benefit_type: "custom" })
  | (CustomerBenefitGrantDownloadablesUpdate$Outbound & {
    benefit_type: "downloadables";
  })
  | (CustomerBenefitGrantLicenseKeysUpdate$Outbound & {
    benefit_type: "license_keys";
  })
  | (CustomerBenefitGrantDiscordUpdate$Outbound & { benefit_type: "discord" })
  | (CustomerBenefitGrantGitHubRepositoryUpdate$Outbound & {
    benefit_type: "github_repository";
  });

/** @internal */
export const CustomerBenefitGrantUpdate$outboundSchema: z.ZodType<
  CustomerBenefitGrantUpdate$Outbound,
  z.ZodTypeDef,
  CustomerBenefitGrantUpdate
> = z.union([
  CustomerBenefitGrantCustomUpdate$outboundSchema.and(
    z.object({ benefitType: z.literal("custom") }).transform((v) => ({
      benefit_type: v.benefitType,
    })),
  ),
  CustomerBenefitGrantDownloadablesUpdate$outboundSchema.and(
    z.object({ benefitType: z.literal("downloadables") }).transform((v) => ({
      benefit_type: v.benefitType,
    })),
  ),
  CustomerBenefitGrantLicenseKeysUpdate$outboundSchema.and(
    z.object({ benefitType: z.literal("license_keys") }).transform((v) => ({
      benefit_type: v.benefitType,
    })),
  ),
  CustomerBenefitGrantDiscordUpdate$outboundSchema.and(
    z.object({ benefitType: z.literal("discord") }).transform((v) => ({
      benefit_type: v.benefitType,
    })),
  ),
  CustomerBenefitGrantGitHubRepositoryUpdate$outboundSchema.and(
    z.object({ benefitType: z.literal("github_repository") }).transform((
      v,
    ) => ({ benefit_type: v.benefitType })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerBenefitGrantUpdate$ {
  /** @deprecated use `CustomerBenefitGrantUpdate$inboundSchema` instead. */
  export const inboundSchema = CustomerBenefitGrantUpdate$inboundSchema;
  /** @deprecated use `CustomerBenefitGrantUpdate$outboundSchema` instead. */
  export const outboundSchema = CustomerBenefitGrantUpdate$outboundSchema;
  /** @deprecated use `CustomerBenefitGrantUpdate$Outbound` instead. */
  export type Outbound = CustomerBenefitGrantUpdate$Outbound;
}

export function customerBenefitGrantUpdateToJSON(
  customerBenefitGrantUpdate: CustomerBenefitGrantUpdate,
): string {
  return JSON.stringify(
    CustomerBenefitGrantUpdate$outboundSchema.parse(customerBenefitGrantUpdate),
  );
}

export function customerBenefitGrantUpdateFromJSON(
  jsonString: string,
): SafeParseResult<CustomerBenefitGrantUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerBenefitGrantUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerBenefitGrantUpdate' from JSON`,
  );
}
