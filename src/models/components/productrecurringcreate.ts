/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AttachedCustomFieldCreate,
  AttachedCustomFieldCreate$inboundSchema,
  AttachedCustomFieldCreate$Outbound,
  AttachedCustomFieldCreate$outboundSchema,
} from "./attachedcustomfieldcreate.js";
import {
  ProductPriceRecurringFixedCreate,
  ProductPriceRecurringFixedCreate$inboundSchema,
  ProductPriceRecurringFixedCreate$Outbound,
  ProductPriceRecurringFixedCreate$outboundSchema,
} from "./productpricerecurringfixedcreate.js";
import {
  ProductPriceRecurringFreeCreate,
  ProductPriceRecurringFreeCreate$inboundSchema,
  ProductPriceRecurringFreeCreate$Outbound,
  ProductPriceRecurringFreeCreate$outboundSchema,
} from "./productpricerecurringfreecreate.js";

export type ProductRecurringCreateMetadata = string | number | boolean;

/**
 * List of available prices for this product.
 */
export type ProductRecurringCreatePrices =
  | Array<ProductPriceRecurringFixedCreate>
  | Array<ProductPriceRecurringFreeCreate>;

/**
 * Schema to create a recurring product, i.e. a subscription.
 */
export type ProductRecurringCreate = {
  /**
   * Key-value object allowing you to store additional information.
   *
   * @remarks
   *
   * The key must be a string with a maximum length of **40 characters**.
   * The value must be either:
   *
   * * A string with a maximum length of **500 characters**
   * * An integer
   * * A boolean
   *
   * You can store up to **50 key-value pairs**.
   */
  metadata?: { [k: string]: string | number | boolean } | undefined;
  /**
   * The name of the product.
   */
  name: string;
  /**
   * The description of the product.
   */
  description?: string | null | undefined;
  /**
   * List of available prices for this product.
   */
  prices:
    | Array<ProductPriceRecurringFixedCreate>
    | Array<ProductPriceRecurringFreeCreate>;
  /**
   * List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded.
   */
  medias?: Array<string> | null | undefined;
  /**
   * List of custom fields to attach.
   */
  attachedCustomFields?: Array<AttachedCustomFieldCreate> | undefined;
  /**
   * The ID of the organization owning the product. **Required unless you use an organization token.**
   */
  organizationId?: string | null | undefined;
};

/** @internal */
export const ProductRecurringCreateMetadata$inboundSchema: z.ZodType<
  ProductRecurringCreateMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number().int(), z.boolean()]);

/** @internal */
export type ProductRecurringCreateMetadata$Outbound = string | number | boolean;

/** @internal */
export const ProductRecurringCreateMetadata$outboundSchema: z.ZodType<
  ProductRecurringCreateMetadata$Outbound,
  z.ZodTypeDef,
  ProductRecurringCreateMetadata
> = z.union([z.string(), z.number().int(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductRecurringCreateMetadata$ {
  /** @deprecated use `ProductRecurringCreateMetadata$inboundSchema` instead. */
  export const inboundSchema = ProductRecurringCreateMetadata$inboundSchema;
  /** @deprecated use `ProductRecurringCreateMetadata$outboundSchema` instead. */
  export const outboundSchema = ProductRecurringCreateMetadata$outboundSchema;
  /** @deprecated use `ProductRecurringCreateMetadata$Outbound` instead. */
  export type Outbound = ProductRecurringCreateMetadata$Outbound;
}

export function productRecurringCreateMetadataToJSON(
  productRecurringCreateMetadata: ProductRecurringCreateMetadata,
): string {
  return JSON.stringify(
    ProductRecurringCreateMetadata$outboundSchema.parse(
      productRecurringCreateMetadata,
    ),
  );
}

export function productRecurringCreateMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ProductRecurringCreateMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductRecurringCreateMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductRecurringCreateMetadata' from JSON`,
  );
}

/** @internal */
export const ProductRecurringCreatePrices$inboundSchema: z.ZodType<
  ProductRecurringCreatePrices,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.array(ProductPriceRecurringFixedCreate$inboundSchema),
  z.array(ProductPriceRecurringFreeCreate$inboundSchema),
]);

/** @internal */
export type ProductRecurringCreatePrices$Outbound =
  | Array<ProductPriceRecurringFixedCreate$Outbound>
  | Array<ProductPriceRecurringFreeCreate$Outbound>;

/** @internal */
export const ProductRecurringCreatePrices$outboundSchema: z.ZodType<
  ProductRecurringCreatePrices$Outbound,
  z.ZodTypeDef,
  ProductRecurringCreatePrices
> = z.union([
  z.array(ProductPriceRecurringFixedCreate$outboundSchema),
  z.array(ProductPriceRecurringFreeCreate$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductRecurringCreatePrices$ {
  /** @deprecated use `ProductRecurringCreatePrices$inboundSchema` instead. */
  export const inboundSchema = ProductRecurringCreatePrices$inboundSchema;
  /** @deprecated use `ProductRecurringCreatePrices$outboundSchema` instead. */
  export const outboundSchema = ProductRecurringCreatePrices$outboundSchema;
  /** @deprecated use `ProductRecurringCreatePrices$Outbound` instead. */
  export type Outbound = ProductRecurringCreatePrices$Outbound;
}

export function productRecurringCreatePricesToJSON(
  productRecurringCreatePrices: ProductRecurringCreatePrices,
): string {
  return JSON.stringify(
    ProductRecurringCreatePrices$outboundSchema.parse(
      productRecurringCreatePrices,
    ),
  );
}

export function productRecurringCreatePricesFromJSON(
  jsonString: string,
): SafeParseResult<ProductRecurringCreatePrices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductRecurringCreatePrices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductRecurringCreatePrices' from JSON`,
  );
}

/** @internal */
export const ProductRecurringCreate$inboundSchema: z.ZodType<
  ProductRecurringCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
    .optional(),
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  prices: z.union([
    z.array(ProductPriceRecurringFixedCreate$inboundSchema),
    z.array(ProductPriceRecurringFreeCreate$inboundSchema),
  ]),
  medias: z.nullable(z.array(z.string())).optional(),
  attached_custom_fields: z.array(AttachedCustomFieldCreate$inboundSchema)
    .optional(),
  organization_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "attached_custom_fields": "attachedCustomFields",
    "organization_id": "organizationId",
  });
});

/** @internal */
export type ProductRecurringCreate$Outbound = {
  metadata?: { [k: string]: string | number | boolean } | undefined;
  name: string;
  description?: string | null | undefined;
  prices:
    | Array<ProductPriceRecurringFixedCreate$Outbound>
    | Array<ProductPriceRecurringFreeCreate$Outbound>;
  medias?: Array<string> | null | undefined;
  attached_custom_fields?:
    | Array<AttachedCustomFieldCreate$Outbound>
    | undefined;
  organization_id?: string | null | undefined;
};

/** @internal */
export const ProductRecurringCreate$outboundSchema: z.ZodType<
  ProductRecurringCreate$Outbound,
  z.ZodTypeDef,
  ProductRecurringCreate
> = z.object({
  metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
    .optional(),
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  prices: z.union([
    z.array(ProductPriceRecurringFixedCreate$outboundSchema),
    z.array(ProductPriceRecurringFreeCreate$outboundSchema),
  ]),
  medias: z.nullable(z.array(z.string())).optional(),
  attachedCustomFields: z.array(AttachedCustomFieldCreate$outboundSchema)
    .optional(),
  organizationId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    attachedCustomFields: "attached_custom_fields",
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductRecurringCreate$ {
  /** @deprecated use `ProductRecurringCreate$inboundSchema` instead. */
  export const inboundSchema = ProductRecurringCreate$inboundSchema;
  /** @deprecated use `ProductRecurringCreate$outboundSchema` instead. */
  export const outboundSchema = ProductRecurringCreate$outboundSchema;
  /** @deprecated use `ProductRecurringCreate$Outbound` instead. */
  export type Outbound = ProductRecurringCreate$Outbound;
}

export function productRecurringCreateToJSON(
  productRecurringCreate: ProductRecurringCreate,
): string {
  return JSON.stringify(
    ProductRecurringCreate$outboundSchema.parse(productRecurringCreate),
  );
}

export function productRecurringCreateFromJSON(
  jsonString: string,
): SafeParseResult<ProductRecurringCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductRecurringCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductRecurringCreate' from JSON`,
  );
}
