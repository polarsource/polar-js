/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ProductPriceCustomOutput,
  ProductPriceCustomOutput$inboundSchema,
  ProductPriceCustomOutput$Outbound,
  ProductPriceCustomOutput$outboundSchema,
} from "./productpricecustomoutput.js";
import {
  ProductPriceFixedOutput,
  ProductPriceFixedOutput$inboundSchema,
  ProductPriceFixedOutput$Outbound,
  ProductPriceFixedOutput$outboundSchema,
} from "./productpricefixedoutput.js";
import {
  ProductPriceFreeOutput,
  ProductPriceFreeOutput$inboundSchema,
  ProductPriceFreeOutput$Outbound,
  ProductPriceFreeOutput$outboundSchema,
} from "./productpricefreeoutput.js";
import {
  ProductPriceMeteredUnitOutput,
  ProductPriceMeteredUnitOutput$inboundSchema,
  ProductPriceMeteredUnitOutput$Outbound,
  ProductPriceMeteredUnitOutput$outboundSchema,
} from "./productpricemeteredunitoutput.js";
import {
  ProductPriceSeatBasedOutput,
  ProductPriceSeatBasedOutput$inboundSchema,
  ProductPriceSeatBasedOutput$Outbound,
  ProductPriceSeatBasedOutput$outboundSchema,
} from "./productpriceseatbasedoutput.js";

export type ProductPriceOutput =
  | (ProductPriceMeteredUnitOutput & { amountType: "metered_unit" })
  | (ProductPriceCustomOutput & { amountType: "custom" })
  | (ProductPriceFixedOutput & { amountType: "fixed" })
  | (ProductPriceSeatBasedOutput & { amountType: "seat_based" })
  | (ProductPriceFreeOutput & { amountType: "free" });

/** @internal */
export const ProductPriceOutput$inboundSchema: z.ZodType<
  ProductPriceOutput,
  z.ZodTypeDef,
  unknown
> = z.union([
  ProductPriceMeteredUnitOutput$inboundSchema.and(
    z.object({ amount_type: z.literal("metered_unit") }).transform((v) => ({
      amountType: v.amount_type,
    })),
  ),
  ProductPriceCustomOutput$inboundSchema.and(
    z.object({ amount_type: z.literal("custom") }).transform((v) => ({
      amountType: v.amount_type,
    })),
  ),
  ProductPriceFixedOutput$inboundSchema.and(
    z.object({ amount_type: z.literal("fixed") }).transform((v) => ({
      amountType: v.amount_type,
    })),
  ),
  ProductPriceSeatBasedOutput$inboundSchema.and(
    z.object({ amount_type: z.literal("seat_based") }).transform((v) => ({
      amountType: v.amount_type,
    })),
  ),
  ProductPriceFreeOutput$inboundSchema.and(
    z.object({ amount_type: z.literal("free") }).transform((v) => ({
      amountType: v.amount_type,
    })),
  ),
]);

/** @internal */
export type ProductPriceOutput$Outbound =
  | (ProductPriceMeteredUnitOutput$Outbound & { amount_type: "metered_unit" })
  | (ProductPriceCustomOutput$Outbound & { amount_type: "custom" })
  | (ProductPriceFixedOutput$Outbound & { amount_type: "fixed" })
  | (ProductPriceSeatBasedOutput$Outbound & { amount_type: "seat_based" })
  | (ProductPriceFreeOutput$Outbound & { amount_type: "free" });

/** @internal */
export const ProductPriceOutput$outboundSchema: z.ZodType<
  ProductPriceOutput$Outbound,
  z.ZodTypeDef,
  ProductPriceOutput
> = z.union([
  ProductPriceMeteredUnitOutput$outboundSchema.and(
    z.object({ amountType: z.literal("metered_unit") }).transform((v) => ({
      amount_type: v.amountType,
    })),
  ),
  ProductPriceCustomOutput$outboundSchema.and(
    z.object({ amountType: z.literal("custom") }).transform((v) => ({
      amount_type: v.amountType,
    })),
  ),
  ProductPriceFixedOutput$outboundSchema.and(
    z.object({ amountType: z.literal("fixed") }).transform((v) => ({
      amount_type: v.amountType,
    })),
  ),
  ProductPriceSeatBasedOutput$outboundSchema.and(
    z.object({ amountType: z.literal("seat_based") }).transform((v) => ({
      amount_type: v.amountType,
    })),
  ),
  ProductPriceFreeOutput$outboundSchema.and(
    z.object({ amountType: z.literal("free") }).transform((v) => ({
      amount_type: v.amountType,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductPriceOutput$ {
  /** @deprecated use `ProductPriceOutput$inboundSchema` instead. */
  export const inboundSchema = ProductPriceOutput$inboundSchema;
  /** @deprecated use `ProductPriceOutput$outboundSchema` instead. */
  export const outboundSchema = ProductPriceOutput$outboundSchema;
  /** @deprecated use `ProductPriceOutput$Outbound` instead. */
  export type Outbound = ProductPriceOutput$Outbound;
}

export function productPriceOutputToJSON(
  productPriceOutput: ProductPriceOutput,
): string {
  return JSON.stringify(
    ProductPriceOutput$outboundSchema.parse(productPriceOutput),
  );
}

export function productPriceOutputFromJSON(
  jsonString: string,
): SafeParseResult<ProductPriceOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductPriceOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductPriceOutput' from JSON`,
  );
}
