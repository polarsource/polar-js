/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Product,
  Product$inboundSchema,
  Product$Outbound,
  Product$outboundSchema,
} from "./product.js";

/**
 * Sent when a new product is created.
 *
 * @remarks
 *
 * **Discord & Slack support:** Basic
 */
export type WebhookProductCreatedPayload = {
  type?: "product.created" | undefined;
  /**
   * A product.
   */
  data: Product;
};

/** @internal */
export const WebhookProductCreatedPayload$inboundSchema: z.ZodType<
  WebhookProductCreatedPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("product.created").optional(),
  data: Product$inboundSchema,
});

/** @internal */
export type WebhookProductCreatedPayload$Outbound = {
  type: "product.created";
  data: Product$Outbound;
};

/** @internal */
export const WebhookProductCreatedPayload$outboundSchema: z.ZodType<
  WebhookProductCreatedPayload$Outbound,
  z.ZodTypeDef,
  WebhookProductCreatedPayload
> = z.object({
  type: z.literal("product.created").default("product.created" as const),
  data: Product$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookProductCreatedPayload$ {
  /** @deprecated use `WebhookProductCreatedPayload$inboundSchema` instead. */
  export const inboundSchema = WebhookProductCreatedPayload$inboundSchema;
  /** @deprecated use `WebhookProductCreatedPayload$outboundSchema` instead. */
  export const outboundSchema = WebhookProductCreatedPayload$outboundSchema;
  /** @deprecated use `WebhookProductCreatedPayload$Outbound` instead. */
  export type Outbound = WebhookProductCreatedPayload$Outbound;
}

export function webhookProductCreatedPayloadToJSON(
  webhookProductCreatedPayload: WebhookProductCreatedPayload,
): string {
  return JSON.stringify(
    WebhookProductCreatedPayload$outboundSchema.parse(
      webhookProductCreatedPayload,
    ),
  );
}

export function webhookProductCreatedPayloadFromJSON(
  jsonString: string,
): SafeParseResult<WebhookProductCreatedPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookProductCreatedPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookProductCreatedPayload' from JSON`,
  );
}
