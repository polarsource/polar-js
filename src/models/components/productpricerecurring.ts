/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  ProductPriceRecurringInterval,
  ProductPriceRecurringInterval$inboundSchema,
  ProductPriceRecurringInterval$outboundSchema,
} from "./productpricerecurringinterval.js";

/**
 * The type of the price.
 */
export const ProductPriceRecurringType = {
  Recurring: "recurring",
} as const;
/**
 * The type of the price.
 */
export type ProductPriceRecurringType = ClosedEnum<
  typeof ProductPriceRecurringType
>;

/**
 * A recurring price for a product, i.e. a subscription.
 */
export type ProductPriceRecurring = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The ID of the price.
   */
  id: string;
  /**
   * The price in cents.
   */
  priceAmount: number;
  /**
   * The currency.
   */
  priceCurrency: string;
  /**
   * Whether the price is archived and no longer available.
   */
  isArchived: boolean;
  /**
   * The type of the price.
   */
  type?: "recurring" | undefined;
  /**
   * The recurring interval of the price, if type is `recurring`.
   */
  recurringInterval: ProductPriceRecurringInterval | null;
};

/** @internal */
export const ProductPriceRecurringType$inboundSchema: z.ZodNativeEnum<
  typeof ProductPriceRecurringType
> = z.nativeEnum(ProductPriceRecurringType);

/** @internal */
export const ProductPriceRecurringType$outboundSchema: z.ZodNativeEnum<
  typeof ProductPriceRecurringType
> = ProductPriceRecurringType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductPriceRecurringType$ {
  /** @deprecated use `ProductPriceRecurringType$inboundSchema` instead. */
  export const inboundSchema = ProductPriceRecurringType$inboundSchema;
  /** @deprecated use `ProductPriceRecurringType$outboundSchema` instead. */
  export const outboundSchema = ProductPriceRecurringType$outboundSchema;
}

/** @internal */
export const ProductPriceRecurring$inboundSchema: z.ZodType<
  ProductPriceRecurring,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  id: z.string(),
  price_amount: z.number().int(),
  price_currency: z.string(),
  is_archived: z.boolean(),
  type: z.literal("recurring").optional(),
  recurring_interval: z.nullable(ProductPriceRecurringInterval$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "price_amount": "priceAmount",
    "price_currency": "priceCurrency",
    "is_archived": "isArchived",
    "recurring_interval": "recurringInterval",
  });
});

/** @internal */
export type ProductPriceRecurring$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  price_amount: number;
  price_currency: string;
  is_archived: boolean;
  type: "recurring";
  recurring_interval: string | null;
};

/** @internal */
export const ProductPriceRecurring$outboundSchema: z.ZodType<
  ProductPriceRecurring$Outbound,
  z.ZodTypeDef,
  ProductPriceRecurring
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  priceAmount: z.number().int(),
  priceCurrency: z.string(),
  isArchived: z.boolean(),
  type: z.literal("recurring").default("recurring"),
  recurringInterval: z.nullable(ProductPriceRecurringInterval$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    priceAmount: "price_amount",
    priceCurrency: "price_currency",
    isArchived: "is_archived",
    recurringInterval: "recurring_interval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductPriceRecurring$ {
  /** @deprecated use `ProductPriceRecurring$inboundSchema` instead. */
  export const inboundSchema = ProductPriceRecurring$inboundSchema;
  /** @deprecated use `ProductPriceRecurring$outboundSchema` instead. */
  export const outboundSchema = ProductPriceRecurring$outboundSchema;
  /** @deprecated use `ProductPriceRecurring$Outbound` instead. */
  export type Outbound = ProductPriceRecurring$Outbound;
}
