/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  ProductPriceRecurringCustom,
  ProductPriceRecurringCustom$inboundSchema,
  ProductPriceRecurringCustom$Outbound,
  ProductPriceRecurringCustom$outboundSchema,
} from "./productpricerecurringcustom.js";
import {
  ProductPriceRecurringFixed,
  ProductPriceRecurringFixed$inboundSchema,
  ProductPriceRecurringFixed$Outbound,
  ProductPriceRecurringFixed$outboundSchema,
} from "./productpricerecurringfixed.js";
import {
  ProductPriceRecurringFree,
  ProductPriceRecurringFree$inboundSchema,
  ProductPriceRecurringFree$Outbound,
  ProductPriceRecurringFree$outboundSchema,
} from "./productpricerecurringfree.js";

export type ProductPriceRecurringOutput =
  | (ProductPriceRecurringFree & { amountType: "free" })
  | (ProductPriceRecurringFixed & { amountType: "fixed" })
  | (ProductPriceRecurringCustom & { amountType: "custom" });

/** @internal */
export const ProductPriceRecurringOutput$inboundSchema: z.ZodType<
  ProductPriceRecurringOutput,
  z.ZodTypeDef,
  unknown
> = z.union([
  ProductPriceRecurringFree$inboundSchema.and(
    z.object({ amount_type: z.literal("free") }).transform((v) => ({
      amountType: v.amount_type,
    })),
  ),
  ProductPriceRecurringFixed$inboundSchema.and(
    z.object({ amount_type: z.literal("fixed") }).transform((v) => ({
      amountType: v.amount_type,
    })),
  ),
  ProductPriceRecurringCustom$inboundSchema.and(
    z.object({ amount_type: z.literal("custom") }).transform((v) => ({
      amountType: v.amount_type,
    })),
  ),
]);

/** @internal */
export type ProductPriceRecurringOutput$Outbound =
  | (ProductPriceRecurringFree$Outbound & { amount_type: "free" })
  | (ProductPriceRecurringFixed$Outbound & { amount_type: "fixed" })
  | (ProductPriceRecurringCustom$Outbound & { amount_type: "custom" });

/** @internal */
export const ProductPriceRecurringOutput$outboundSchema: z.ZodType<
  ProductPriceRecurringOutput$Outbound,
  z.ZodTypeDef,
  ProductPriceRecurringOutput
> = z.union([
  ProductPriceRecurringFree$outboundSchema.and(
    z.object({ amountType: z.literal("free") }).transform((v) => ({
      amount_type: v.amountType,
    })),
  ),
  ProductPriceRecurringFixed$outboundSchema.and(
    z.object({ amountType: z.literal("fixed") }).transform((v) => ({
      amount_type: v.amountType,
    })),
  ),
  ProductPriceRecurringCustom$outboundSchema.and(
    z.object({ amountType: z.literal("custom") }).transform((v) => ({
      amount_type: v.amountType,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductPriceRecurringOutput$ {
  /** @deprecated use `ProductPriceRecurringOutput$inboundSchema` instead. */
  export const inboundSchema = ProductPriceRecurringOutput$inboundSchema;
  /** @deprecated use `ProductPriceRecurringOutput$outboundSchema` instead. */
  export const outboundSchema = ProductPriceRecurringOutput$outboundSchema;
  /** @deprecated use `ProductPriceRecurringOutput$Outbound` instead. */
  export type Outbound = ProductPriceRecurringOutput$Outbound;
}
