/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CurrencyAmount,
  CurrencyAmount$inboundSchema,
  CurrencyAmount$Outbound,
  CurrencyAmount$outboundSchema,
} from "./currencyamount.js";

export type Funding = {
  fundingGoal?: CurrencyAmount | null | undefined;
  /**
   * Sum of pledges to this isuse (including currently open pledges and pledges that have been paid out). Always in USD.
   */
  pledgesSum?: CurrencyAmount | null | undefined;
};

/** @internal */
export const Funding$inboundSchema: z.ZodType<Funding, z.ZodTypeDef, unknown> =
  z.object({
    funding_goal: z.nullable(CurrencyAmount$inboundSchema).optional(),
    pledges_sum: z.nullable(CurrencyAmount$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "funding_goal": "fundingGoal",
      "pledges_sum": "pledgesSum",
    });
  });

/** @internal */
export type Funding$Outbound = {
  funding_goal?: CurrencyAmount$Outbound | null | undefined;
  pledges_sum?: CurrencyAmount$Outbound | null | undefined;
};

/** @internal */
export const Funding$outboundSchema: z.ZodType<
  Funding$Outbound,
  z.ZodTypeDef,
  Funding
> = z.object({
  fundingGoal: z.nullable(CurrencyAmount$outboundSchema).optional(),
  pledgesSum: z.nullable(CurrencyAmount$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    fundingGoal: "funding_goal",
    pledgesSum: "pledges_sum",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Funding$ {
  /** @deprecated use `Funding$inboundSchema` instead. */
  export const inboundSchema = Funding$inboundSchema;
  /** @deprecated use `Funding$outboundSchema` instead. */
  export const outboundSchema = Funding$outboundSchema;
  /** @deprecated use `Funding$Outbound` instead. */
  export type Outbound = Funding$Outbound;
}

export function fundingToJSON(funding: Funding): string {
  return JSON.stringify(Funding$outboundSchema.parse(funding));
}

export function fundingFromJSON(
  jsonString: string,
): SafeParseResult<Funding, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Funding$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Funding' from JSON`,
  );
}
