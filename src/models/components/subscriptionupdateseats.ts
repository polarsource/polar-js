/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SubscriptionProrationBehavior,
  SubscriptionProrationBehavior$inboundSchema,
  SubscriptionProrationBehavior$outboundSchema,
} from "./subscriptionprorationbehavior.js";

export type SubscriptionUpdateSeats = {
  /**
   * Update the number of seats for this subscription.
   */
  seats: number;
  /**
   * Determine how to handle the proration billing. If not provided, will use the default organization setting.
   */
  prorationBehavior?: SubscriptionProrationBehavior | null | undefined;
};

/** @internal */
export const SubscriptionUpdateSeats$inboundSchema: z.ZodType<
  SubscriptionUpdateSeats,
  z.ZodTypeDef,
  unknown
> = z.object({
  seats: z.number().int(),
  proration_behavior: z.nullable(SubscriptionProrationBehavior$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "proration_behavior": "prorationBehavior",
  });
});

/** @internal */
export type SubscriptionUpdateSeats$Outbound = {
  seats: number;
  proration_behavior?: string | null | undefined;
};

/** @internal */
export const SubscriptionUpdateSeats$outboundSchema: z.ZodType<
  SubscriptionUpdateSeats$Outbound,
  z.ZodTypeDef,
  SubscriptionUpdateSeats
> = z.object({
  seats: z.number().int(),
  prorationBehavior: z.nullable(SubscriptionProrationBehavior$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    prorationBehavior: "proration_behavior",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateSeats$ {
  /** @deprecated use `SubscriptionUpdateSeats$inboundSchema` instead. */
  export const inboundSchema = SubscriptionUpdateSeats$inboundSchema;
  /** @deprecated use `SubscriptionUpdateSeats$outboundSchema` instead. */
  export const outboundSchema = SubscriptionUpdateSeats$outboundSchema;
  /** @deprecated use `SubscriptionUpdateSeats$Outbound` instead. */
  export type Outbound = SubscriptionUpdateSeats$Outbound;
}

export function subscriptionUpdateSeatsToJSON(
  subscriptionUpdateSeats: SubscriptionUpdateSeats,
): string {
  return JSON.stringify(
    SubscriptionUpdateSeats$outboundSchema.parse(subscriptionUpdateSeats),
  );
}

export function subscriptionUpdateSeatsFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionUpdateSeats, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionUpdateSeats$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionUpdateSeats' from JSON`,
  );
}
