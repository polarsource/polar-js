/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ProductPriceOneTimeFreeAmountType = {
  Free: "free",
} as const;
export type ProductPriceOneTimeFreeAmountType = ClosedEnum<
  typeof ProductPriceOneTimeFreeAmountType
>;

/**
 * The type of the price.
 */
export const ProductPriceOneTimeFreeType = {
  OneTime: "one_time",
} as const;
/**
 * The type of the price.
 */
export type ProductPriceOneTimeFreeType = ClosedEnum<
  typeof ProductPriceOneTimeFreeType
>;

/**
 * A free one-time price for a product.
 */
export type ProductPriceOneTimeFree = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The ID of the price.
   */
  id: string;
  amountType?: "free" | undefined;
  /**
   * Whether the price is archived and no longer available.
   */
  isArchived: boolean;
  /**
   * The ID of the product owning the price.
   */
  productId: string;
  /**
   * The type of the price.
   */
  type?: "one_time" | undefined;
};

/** @internal */
export const ProductPriceOneTimeFreeAmountType$inboundSchema: z.ZodNativeEnum<
  typeof ProductPriceOneTimeFreeAmountType
> = z.nativeEnum(ProductPriceOneTimeFreeAmountType);

/** @internal */
export const ProductPriceOneTimeFreeAmountType$outboundSchema: z.ZodNativeEnum<
  typeof ProductPriceOneTimeFreeAmountType
> = ProductPriceOneTimeFreeAmountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductPriceOneTimeFreeAmountType$ {
  /** @deprecated use `ProductPriceOneTimeFreeAmountType$inboundSchema` instead. */
  export const inboundSchema = ProductPriceOneTimeFreeAmountType$inboundSchema;
  /** @deprecated use `ProductPriceOneTimeFreeAmountType$outboundSchema` instead. */
  export const outboundSchema =
    ProductPriceOneTimeFreeAmountType$outboundSchema;
}

/** @internal */
export const ProductPriceOneTimeFreeType$inboundSchema: z.ZodNativeEnum<
  typeof ProductPriceOneTimeFreeType
> = z.nativeEnum(ProductPriceOneTimeFreeType);

/** @internal */
export const ProductPriceOneTimeFreeType$outboundSchema: z.ZodNativeEnum<
  typeof ProductPriceOneTimeFreeType
> = ProductPriceOneTimeFreeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductPriceOneTimeFreeType$ {
  /** @deprecated use `ProductPriceOneTimeFreeType$inboundSchema` instead. */
  export const inboundSchema = ProductPriceOneTimeFreeType$inboundSchema;
  /** @deprecated use `ProductPriceOneTimeFreeType$outboundSchema` instead. */
  export const outboundSchema = ProductPriceOneTimeFreeType$outboundSchema;
}

/** @internal */
export const ProductPriceOneTimeFree$inboundSchema: z.ZodType<
  ProductPriceOneTimeFree,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  id: z.string(),
  amount_type: z.literal("free").optional(),
  is_archived: z.boolean(),
  product_id: z.string(),
  type: z.literal("one_time").optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "amount_type": "amountType",
    "is_archived": "isArchived",
    "product_id": "productId",
  });
});

/** @internal */
export type ProductPriceOneTimeFree$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  amount_type: "free";
  is_archived: boolean;
  product_id: string;
  type: "one_time";
};

/** @internal */
export const ProductPriceOneTimeFree$outboundSchema: z.ZodType<
  ProductPriceOneTimeFree$Outbound,
  z.ZodTypeDef,
  ProductPriceOneTimeFree
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  amountType: z.literal("free").default("free"),
  isArchived: z.boolean(),
  productId: z.string(),
  type: z.literal("one_time").default("one_time"),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    amountType: "amount_type",
    isArchived: "is_archived",
    productId: "product_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductPriceOneTimeFree$ {
  /** @deprecated use `ProductPriceOneTimeFree$inboundSchema` instead. */
  export const inboundSchema = ProductPriceOneTimeFree$inboundSchema;
  /** @deprecated use `ProductPriceOneTimeFree$outboundSchema` instead. */
  export const outboundSchema = ProductPriceOneTimeFree$outboundSchema;
  /** @deprecated use `ProductPriceOneTimeFree$Outbound` instead. */
  export type Outbound = ProductPriceOneTimeFree$Outbound;
}

export function productPriceOneTimeFreeToJSON(
  productPriceOneTimeFree: ProductPriceOneTimeFree,
): string {
  return JSON.stringify(
    ProductPriceOneTimeFree$outboundSchema.parse(productPriceOneTimeFree),
  );
}

export function productPriceOneTimeFreeFromJSON(
  jsonString: string,
): SafeParseResult<ProductPriceOneTimeFree, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductPriceOneTimeFree$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductPriceOneTimeFree' from JSON`,
  );
}
