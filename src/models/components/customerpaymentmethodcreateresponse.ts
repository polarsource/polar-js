/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CustomerPaymentMethodCreateRequiresActionResponse,
  CustomerPaymentMethodCreateRequiresActionResponse$inboundSchema,
  CustomerPaymentMethodCreateRequiresActionResponse$Outbound,
  CustomerPaymentMethodCreateRequiresActionResponse$outboundSchema,
} from "./customerpaymentmethodcreaterequiresactionresponse.js";
import {
  CustomerPaymentMethodCreateSucceededResponseOutput,
  CustomerPaymentMethodCreateSucceededResponseOutput$inboundSchema,
  CustomerPaymentMethodCreateSucceededResponseOutput$Outbound,
  CustomerPaymentMethodCreateSucceededResponseOutput$outboundSchema,
} from "./customerpaymentmethodcreatesucceededresponseoutput.js";

export type CustomerPaymentMethodCreateResponse =
  | (CustomerPaymentMethodCreateRequiresActionResponse & {
    status: "requires_action";
  })
  | (CustomerPaymentMethodCreateSucceededResponseOutput & {
    status: "succeeded";
  });

/** @internal */
export const CustomerPaymentMethodCreateResponse$inboundSchema: z.ZodType<
  CustomerPaymentMethodCreateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  CustomerPaymentMethodCreateRequiresActionResponse$inboundSchema.and(
    z.object({ status: z.literal("requires_action") }).transform((v) => ({
      status: v.status,
    })),
  ),
  CustomerPaymentMethodCreateSucceededResponseOutput$inboundSchema.and(
    z.object({ status: z.literal("succeeded") }).transform((v) => ({
      status: v.status,
    })),
  ),
]);

/** @internal */
export type CustomerPaymentMethodCreateResponse$Outbound =
  | (CustomerPaymentMethodCreateRequiresActionResponse$Outbound & {
    status: "requires_action";
  })
  | (CustomerPaymentMethodCreateSucceededResponseOutput$Outbound & {
    status: "succeeded";
  });

/** @internal */
export const CustomerPaymentMethodCreateResponse$outboundSchema: z.ZodType<
  CustomerPaymentMethodCreateResponse$Outbound,
  z.ZodTypeDef,
  CustomerPaymentMethodCreateResponse
> = z.union([
  CustomerPaymentMethodCreateRequiresActionResponse$outboundSchema.and(
    z.object({ status: z.literal("requires_action") }).transform((v) => ({
      status: v.status,
    })),
  ),
  CustomerPaymentMethodCreateSucceededResponseOutput$outboundSchema.and(
    z.object({ status: z.literal("succeeded") }).transform((v) => ({
      status: v.status,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPaymentMethodCreateResponse$ {
  /** @deprecated use `CustomerPaymentMethodCreateResponse$inboundSchema` instead. */
  export const inboundSchema =
    CustomerPaymentMethodCreateResponse$inboundSchema;
  /** @deprecated use `CustomerPaymentMethodCreateResponse$outboundSchema` instead. */
  export const outboundSchema =
    CustomerPaymentMethodCreateResponse$outboundSchema;
  /** @deprecated use `CustomerPaymentMethodCreateResponse$Outbound` instead. */
  export type Outbound = CustomerPaymentMethodCreateResponse$Outbound;
}

export function customerPaymentMethodCreateResponseToJSON(
  customerPaymentMethodCreateResponse: CustomerPaymentMethodCreateResponse,
): string {
  return JSON.stringify(
    CustomerPaymentMethodCreateResponse$outboundSchema.parse(
      customerPaymentMethodCreateResponse,
    ),
  );
}

export function customerPaymentMethodCreateResponseFromJSON(
  jsonString: string,
): SafeParseResult<CustomerPaymentMethodCreateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerPaymentMethodCreateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerPaymentMethodCreateResponse' from JSON`,
  );
}
