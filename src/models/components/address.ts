/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CountryAlpha2 = {
  Am: "AM",
  Na: "NA",
  Sx: "SX",
  Gp: "GP",
  Mq: "MQ",
  Pk: "PK",
  Ne: "NE",
  Tj: "TJ",
  Ws: "WS",
  Al: "AL",
  Gs: "GS",
  Sr: "SR",
  Hu: "HU",
  Bv: "BV",
  Il: "IL",
  Vc: "VC",
  La: "LA",
  Cl: "CL",
  Ee: "EE",
  Fi: "FI",
  Pt: "PT",
  Lc: "LC",
  By: "BY",
  Co: "CO",
  Tt: "TT",
  Mf: "MF",
  De: "DE",
  Iq: "IQ",
  At: "AT",
  Km: "KM",
  Ni: "NI",
  Sc: "SC",
  Sd: "SD",
  Cn: "CN",
  Ng: "NG",
  Br: "BR",
  Ph: "PH",
  Tm: "TM",
  Va: "VA",
  Ga: "GA",
  Bb: "BB",
  Gt: "GT",
  Ps: "PS",
  Gd: "GD",
  Tn: "TN",
  Zw: "ZW",
  Ca: "CA",
  Tz: "TZ",
  Eh: "EH",
  Pn: "PN",
  Cw: "CW",
  Lu: "LU",
  Ug: "UG",
  In: "IN",
  Pa: "PA",
  Hk: "HK",
  Pr: "PR",
  Ki: "KI",
  Aq: "AQ",
  Bz: "BZ",
  Fr: "FR",
  Yt: "YT",
  Ie: "IE",
  Um: "UM",
  Gu: "GU",
  Jo: "JO",
  Cc: "CC",
  Vi: "VI",
  Nc: "NC",
  Do: "DO",
  Cr: "CR",
  Ar: "AR",
  Ai: "AI",
  Bf: "BF",
  Ec: "EC",
  Im: "IM",
  Za: "ZA",
  Tf: "TF",
  Bd: "BD",
  Mx: "MX",
  Cy: "CY",
  Vu: "VU",
  Mp: "MP",
  Mz: "MZ",
  Mu: "MU",
  Lk: "LK",
  Bo: "BO",
  Sa: "SA",
  Bn: "BN",
  Sl: "SL",
  Lr: "LR",
  Cz: "CZ",
  Et: "ET",
  Re: "RE",
  Tk: "TK",
  Io: "IO",
  Sm: "SM",
  Pw: "PW",
  Kn: "KN",
  Cv: "CV",
  To: "TO",
  Tw: "TW",
  Nr: "NR",
  Ma: "MA",
  Gr: "GR",
  Bh: "BH",
  Kp: "KP",
  Th: "TH",
  Jm: "JM",
  Vn: "VN",
  Ch: "CH",
  Pl: "PL",
  Me: "ME",
  Fo: "FO",
  Fj: "FJ",
  Ve: "VE",
  Gw: "GW",
  Ck: "CK",
  Dm: "DM",
  Gy: "GY",
  Dk: "DK",
  Pf: "PF",
  Sk: "SK",
  Rw: "RW",
  Bt: "BT",
  Ye: "YE",
  Ss: "SS",
  Lb: "LB",
  Fk: "FK",
  Gn: "GN",
  Zm: "ZM",
  Mm: "MM",
  Eg: "EG",
  Je: "JE",
  Hm: "HM",
  Be: "BE",
  Ax: "AX",
  Sh: "SH",
  Cu: "CU",
  Tg: "TG",
  Mn: "MN",
  Bg: "BG",
  It: "IT",
  Gh: "GH",
  Gl: "GL",
  Nu: "NU",
  Om: "OM",
  Ua: "UA",
  Gi: "GI",
  Ke: "KE",
  Nl: "NL",
  Fm: "FM",
  Bm: "BM",
  Gb: "GB",
  Rs: "RS",
  Tr: "TR",
  Mc: "MC",
  Ci: "CI",
  Tv: "TV",
  Kh: "KH",
  Vg: "VG",
  Mw: "MW",
  Id: "ID",
  Np: "NP",
  Ru: "RU",
  Lv: "LV",
  Si: "SI",
  Cx: "CX",
  Ls: "LS",
  Ad: "AD",
  Ms: "MS",
  Bs: "BS",
  Hn: "HN",
  Li: "LI",
  Sv: "SV",
  Bw: "BW",
  Aw: "AW",
  Bq: "BQ",
  Uy: "UY",
  Az: "AZ",
  Ba: "BA",
  Ly: "LY",
  Ml: "ML",
  Nf: "NF",
  Sn: "SN",
  Mh: "MH",
  Us: "US",
  Pe: "PE",
  Uz: "UZ",
  Kw: "KW",
  Td: "TD",
  Kz: "KZ",
  Py: "PY",
  Sy: "SY",
  Dz: "DZ",
  Hr: "HR",
  Kr: "KR",
  Au: "AU",
  Tc: "TC",
  Mv: "MV",
  Mt: "MT",
  Nz: "NZ",
  Jp: "JP",
  Lt: "LT",
  Cm: "CM",
  Ag: "AG",
  Ro: "RO",
  As: "AS",
  Md: "MD",
  Mg: "MG",
  Se: "SE",
  Cg: "CG",
  Ir: "IR",
  Cd: "CD",
  Pg: "PG",
  Wf: "WF",
  Gq: "GQ",
  Bj: "BJ",
  Gg: "GG",
  Mr: "MR",
  Is: "IS",
  Bi: "BI",
  Gm: "GM",
  Er: "ER",
  Ky: "KY",
  Gf: "GF",
  Ge: "GE",
  Sj: "SJ",
  Ao: "AO",
  Mk: "MK",
  St: "ST",
  Mo: "MO",
  So: "SO",
  Sz: "SZ",
  Pm: "PM",
  Es: "ES",
  Tl: "TL",
  Bl: "BL",
  Ae: "AE",
  Cf: "CF",
  Dj: "DJ",
  Kg: "KG",
  Qa: "QA",
  Ht: "HT",
  No: "NO",
  Sg: "SG",
  Sb: "SB",
  Af: "AF",
  My: "MY",
} as const;
export type CountryAlpha2 = ClosedEnum<typeof CountryAlpha2>;

export type Address = {
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  postalCode?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  country: CountryAlpha2;
};

/** @internal */
export const CountryAlpha2$inboundSchema: z.ZodNativeEnum<
  typeof CountryAlpha2
> = z.nativeEnum(CountryAlpha2);

/** @internal */
export const CountryAlpha2$outboundSchema: z.ZodNativeEnum<
  typeof CountryAlpha2
> = CountryAlpha2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CountryAlpha2$ {
  /** @deprecated use `CountryAlpha2$inboundSchema` instead. */
  export const inboundSchema = CountryAlpha2$inboundSchema;
  /** @deprecated use `CountryAlpha2$outboundSchema` instead. */
  export const outboundSchema = CountryAlpha2$outboundSchema;
}

/** @internal */
export const Address$inboundSchema: z.ZodType<Address, z.ZodTypeDef, unknown> =
  z.object({
    line1: z.nullable(z.string()).optional(),
    line2: z.nullable(z.string()).optional(),
    postal_code: z.nullable(z.string()).optional(),
    city: z.nullable(z.string()).optional(),
    state: z.nullable(z.string()).optional(),
    country: CountryAlpha2$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "postal_code": "postalCode",
    });
  });

/** @internal */
export type Address$Outbound = {
  line1?: string | null | undefined;
  line2?: string | null | undefined;
  postal_code?: string | null | undefined;
  city?: string | null | undefined;
  state?: string | null | undefined;
  country: string;
};

/** @internal */
export const Address$outboundSchema: z.ZodType<
  Address$Outbound,
  z.ZodTypeDef,
  Address
> = z.object({
  line1: z.nullable(z.string()).optional(),
  line2: z.nullable(z.string()).optional(),
  postalCode: z.nullable(z.string()).optional(),
  city: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  country: CountryAlpha2$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    postalCode: "postal_code",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Address$ {
  /** @deprecated use `Address$inboundSchema` instead. */
  export const inboundSchema = Address$inboundSchema;
  /** @deprecated use `Address$outboundSchema` instead. */
  export const outboundSchema = Address$outboundSchema;
  /** @deprecated use `Address$Outbound` instead. */
  export type Outbound = Address$Outbound;
}

export function addressToJSON(address: Address): string {
  return JSON.stringify(Address$outboundSchema.parse(address));
}

export function addressFromJSON(
  jsonString: string,
): SafeParseResult<Address, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Address$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Address' from JSON`,
  );
}
