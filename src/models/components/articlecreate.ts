/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  ArticleByline,
  ArticleByline$inboundSchema,
  ArticleByline$outboundSchema,
} from "./articlebyline.js";
import {
  ArticleVisibility,
  ArticleVisibility$inboundSchema,
  ArticleVisibility$outboundSchema,
} from "./articlevisibility.js";

export type ArticleCreate = {
  /**
   * Title of the article.
   */
  title: string;
  /**
   * Slug of the article to be used in URLs. If no slug is provided one will be generated from the title.
   */
  slug?: string | null | undefined;
  /**
   * Body in string format. Either one of body or body_base64 is required.
   */
  body?: string | null | undefined;
  /**
   * Body in base64-encoded format. Can be helpful to bypass Web Application Firewalls (WAF). Either one of body or body_base64 is required.
   */
  bodyBase64?: string | null | undefined;
  /**
   * The ID of the organization owning the article. **Required unless you use an organization token.**
   */
  organizationId?: string | null | undefined;
  byline?: ArticleByline | undefined;
  visibility?: ArticleVisibility | undefined;
  /**
   * Set to true to only make this article available for subscribers to a paid subscription tier in the organization.
   */
  paidSubscribersOnly?: boolean | undefined;
  /**
   * If specified, time at which the article should no longer be restricted to paid subscribers. Only relevant if `paid_subscribers_only` is true.
   */
  paidSubscribersOnlyEndsAt?: Date | null | undefined;
  /**
   * Time of publishing. If this date is in the future, the post will be scheduled to publish at this time. If visibility is 'public', published_at will default to the current time.
   */
  publishedAt?: Date | null | undefined;
  /**
   * Set to true to deliver this article via email and/or notifications to subscribers.
   */
  notifySubscribers?: boolean | null | undefined;
  /**
   * If the article should be pinned
   */
  isPinned?: boolean | null | undefined;
  /**
   * Custom og:image URL value
   */
  ogImageUrl?: string | null | undefined;
  /**
   * Custom og:description value
   */
  ogDescription?: string | null | undefined;
};

/** @internal */
export const ArticleCreate$inboundSchema: z.ZodType<
  ArticleCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string(),
  slug: z.nullable(z.string()).optional(),
  body: z.nullable(z.string()).optional(),
  body_base64: z.nullable(z.string()).optional(),
  organization_id: z.nullable(z.string()).optional(),
  byline: ArticleByline$inboundSchema.optional(),
  visibility: ArticleVisibility$inboundSchema.optional(),
  paid_subscribers_only: z.boolean().default(false),
  paid_subscribers_only_ends_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  published_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  notify_subscribers: z.nullable(z.boolean()).optional(),
  is_pinned: z.nullable(z.boolean()).optional(),
  og_image_url: z.nullable(z.string()).optional(),
  og_description: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "body_base64": "bodyBase64",
    "organization_id": "organizationId",
    "paid_subscribers_only": "paidSubscribersOnly",
    "paid_subscribers_only_ends_at": "paidSubscribersOnlyEndsAt",
    "published_at": "publishedAt",
    "notify_subscribers": "notifySubscribers",
    "is_pinned": "isPinned",
    "og_image_url": "ogImageUrl",
    "og_description": "ogDescription",
  });
});

/** @internal */
export type ArticleCreate$Outbound = {
  title: string;
  slug?: string | null | undefined;
  body?: string | null | undefined;
  body_base64?: string | null | undefined;
  organization_id?: string | null | undefined;
  byline?: string | undefined;
  visibility?: string | undefined;
  paid_subscribers_only: boolean;
  paid_subscribers_only_ends_at?: string | null | undefined;
  published_at?: string | null | undefined;
  notify_subscribers?: boolean | null | undefined;
  is_pinned?: boolean | null | undefined;
  og_image_url?: string | null | undefined;
  og_description?: string | null | undefined;
};

/** @internal */
export const ArticleCreate$outboundSchema: z.ZodType<
  ArticleCreate$Outbound,
  z.ZodTypeDef,
  ArticleCreate
> = z.object({
  title: z.string(),
  slug: z.nullable(z.string()).optional(),
  body: z.nullable(z.string()).optional(),
  bodyBase64: z.nullable(z.string()).optional(),
  organizationId: z.nullable(z.string()).optional(),
  byline: ArticleByline$outboundSchema.optional(),
  visibility: ArticleVisibility$outboundSchema.optional(),
  paidSubscribersOnly: z.boolean().default(false),
  paidSubscribersOnlyEndsAt: z.nullable(
    z.date().transform(v => v.toISOString()),
  ).optional(),
  publishedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  notifySubscribers: z.nullable(z.boolean()).optional(),
  isPinned: z.nullable(z.boolean()).optional(),
  ogImageUrl: z.nullable(z.string()).optional(),
  ogDescription: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    bodyBase64: "body_base64",
    organizationId: "organization_id",
    paidSubscribersOnly: "paid_subscribers_only",
    paidSubscribersOnlyEndsAt: "paid_subscribers_only_ends_at",
    publishedAt: "published_at",
    notifySubscribers: "notify_subscribers",
    isPinned: "is_pinned",
    ogImageUrl: "og_image_url",
    ogDescription: "og_description",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticleCreate$ {
  /** @deprecated use `ArticleCreate$inboundSchema` instead. */
  export const inboundSchema = ArticleCreate$inboundSchema;
  /** @deprecated use `ArticleCreate$outboundSchema` instead. */
  export const outboundSchema = ArticleCreate$outboundSchema;
  /** @deprecated use `ArticleCreate$Outbound` instead. */
  export type Outbound = ArticleCreate$Outbound;
}
