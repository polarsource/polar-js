/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RepositoryProfileSettingsUpdate,
  RepositoryProfileSettingsUpdate$inboundSchema,
  RepositoryProfileSettingsUpdate$Outbound,
  RepositoryProfileSettingsUpdate$outboundSchema,
} from "./repositoryprofilesettingsupdate.js";

export type RepositoryUpdate = {
  profileSettings?: RepositoryProfileSettingsUpdate | null | undefined;
};

/** @internal */
export const RepositoryUpdate$inboundSchema: z.ZodType<
  RepositoryUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  profile_settings: z.nullable(RepositoryProfileSettingsUpdate$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "profile_settings": "profileSettings",
  });
});

/** @internal */
export type RepositoryUpdate$Outbound = {
  profile_settings?:
    | RepositoryProfileSettingsUpdate$Outbound
    | null
    | undefined;
};

/** @internal */
export const RepositoryUpdate$outboundSchema: z.ZodType<
  RepositoryUpdate$Outbound,
  z.ZodTypeDef,
  RepositoryUpdate
> = z.object({
  profileSettings: z.nullable(RepositoryProfileSettingsUpdate$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    profileSettings: "profile_settings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RepositoryUpdate$ {
  /** @deprecated use `RepositoryUpdate$inboundSchema` instead. */
  export const inboundSchema = RepositoryUpdate$inboundSchema;
  /** @deprecated use `RepositoryUpdate$outboundSchema` instead. */
  export const outboundSchema = RepositoryUpdate$outboundSchema;
  /** @deprecated use `RepositoryUpdate$Outbound` instead. */
  export type Outbound = RepositoryUpdate$Outbound;
}

export function repositoryUpdateToJSON(
  repositoryUpdate: RepositoryUpdate,
): string {
  return JSON.stringify(
    RepositoryUpdate$outboundSchema.parse(repositoryUpdate),
  );
}

export function repositoryUpdateFromJSON(
  jsonString: string,
): SafeParseResult<RepositoryUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RepositoryUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RepositoryUpdate' from JSON`,
  );
}
