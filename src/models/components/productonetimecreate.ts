/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AttachedCustomFieldCreate,
  AttachedCustomFieldCreate$inboundSchema,
  AttachedCustomFieldCreate$Outbound,
  AttachedCustomFieldCreate$outboundSchema,
} from "./attachedcustomfieldcreate.js";
import {
  ProductPriceOneTimeCustomCreate,
  ProductPriceOneTimeCustomCreate$inboundSchema,
  ProductPriceOneTimeCustomCreate$Outbound,
  ProductPriceOneTimeCustomCreate$outboundSchema,
} from "./productpriceonetimecustomcreate.js";
import {
  ProductPriceOneTimeFixedCreate,
  ProductPriceOneTimeFixedCreate$inboundSchema,
  ProductPriceOneTimeFixedCreate$Outbound,
  ProductPriceOneTimeFixedCreate$outboundSchema,
} from "./productpriceonetimefixedcreate.js";
import {
  ProductPriceOneTimeFreeCreate,
  ProductPriceOneTimeFreeCreate$inboundSchema,
  ProductPriceOneTimeFreeCreate$Outbound,
  ProductPriceOneTimeFreeCreate$outboundSchema,
} from "./productpriceonetimefreecreate.js";

export type ProductOneTimeCreateMetadata = string | number | boolean;

export type Prices =
  | ProductPriceOneTimeFreeCreate
  | ProductPriceOneTimeFixedCreate
  | ProductPriceOneTimeCustomCreate;

/**
 * Schema to create a one-time product.
 */
export type ProductOneTimeCreate = {
  /**
   * Key-value object allowing you to store additional information.
   *
   * @remarks
   *
   * The key must be a string with a maximum length of **40 characters**.
   * The value must be either:
   *
   * * A string with a maximum length of **500 characters**
   * * An integer
   * * A boolean
   *
   * You can store up to **50 key-value pairs**.
   */
  metadata?: { [k: string]: string | number | boolean } | undefined;
  /**
   * The name of the product.
   */
  name: string;
  /**
   * The description of the product.
   */
  description?: string | null | undefined;
  /**
   * List of available prices for this product.
   */
  prices: Array<
    | ProductPriceOneTimeFreeCreate
    | ProductPriceOneTimeFixedCreate
    | ProductPriceOneTimeCustomCreate
  >;
  /**
   * List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded.
   */
  medias?: Array<string> | null | undefined;
  /**
   * List of custom fields to attach.
   */
  attachedCustomFields?: Array<AttachedCustomFieldCreate> | undefined;
  /**
   * The ID of the organization owning the product. **Required unless you use an organization token.**
   */
  organizationId?: string | null | undefined;
};

/** @internal */
export const ProductOneTimeCreateMetadata$inboundSchema: z.ZodType<
  ProductOneTimeCreateMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number().int(), z.boolean()]);

/** @internal */
export type ProductOneTimeCreateMetadata$Outbound = string | number | boolean;

/** @internal */
export const ProductOneTimeCreateMetadata$outboundSchema: z.ZodType<
  ProductOneTimeCreateMetadata$Outbound,
  z.ZodTypeDef,
  ProductOneTimeCreateMetadata
> = z.union([z.string(), z.number().int(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductOneTimeCreateMetadata$ {
  /** @deprecated use `ProductOneTimeCreateMetadata$inboundSchema` instead. */
  export const inboundSchema = ProductOneTimeCreateMetadata$inboundSchema;
  /** @deprecated use `ProductOneTimeCreateMetadata$outboundSchema` instead. */
  export const outboundSchema = ProductOneTimeCreateMetadata$outboundSchema;
  /** @deprecated use `ProductOneTimeCreateMetadata$Outbound` instead. */
  export type Outbound = ProductOneTimeCreateMetadata$Outbound;
}

export function productOneTimeCreateMetadataToJSON(
  productOneTimeCreateMetadata: ProductOneTimeCreateMetadata,
): string {
  return JSON.stringify(
    ProductOneTimeCreateMetadata$outboundSchema.parse(
      productOneTimeCreateMetadata,
    ),
  );
}

export function productOneTimeCreateMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ProductOneTimeCreateMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductOneTimeCreateMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductOneTimeCreateMetadata' from JSON`,
  );
}

/** @internal */
export const Prices$inboundSchema: z.ZodType<Prices, z.ZodTypeDef, unknown> = z
  .union([
    ProductPriceOneTimeFreeCreate$inboundSchema,
    ProductPriceOneTimeFixedCreate$inboundSchema,
    ProductPriceOneTimeCustomCreate$inboundSchema,
  ]);

/** @internal */
export type Prices$Outbound =
  | ProductPriceOneTimeFreeCreate$Outbound
  | ProductPriceOneTimeFixedCreate$Outbound
  | ProductPriceOneTimeCustomCreate$Outbound;

/** @internal */
export const Prices$outboundSchema: z.ZodType<
  Prices$Outbound,
  z.ZodTypeDef,
  Prices
> = z.union([
  ProductPriceOneTimeFreeCreate$outboundSchema,
  ProductPriceOneTimeFixedCreate$outboundSchema,
  ProductPriceOneTimeCustomCreate$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Prices$ {
  /** @deprecated use `Prices$inboundSchema` instead. */
  export const inboundSchema = Prices$inboundSchema;
  /** @deprecated use `Prices$outboundSchema` instead. */
  export const outboundSchema = Prices$outboundSchema;
  /** @deprecated use `Prices$Outbound` instead. */
  export type Outbound = Prices$Outbound;
}

export function pricesToJSON(prices: Prices): string {
  return JSON.stringify(Prices$outboundSchema.parse(prices));
}

export function pricesFromJSON(
  jsonString: string,
): SafeParseResult<Prices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Prices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Prices' from JSON`,
  );
}

/** @internal */
export const ProductOneTimeCreate$inboundSchema: z.ZodType<
  ProductOneTimeCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
    .optional(),
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  prices: z.array(
    z.union([
      ProductPriceOneTimeFreeCreate$inboundSchema,
      ProductPriceOneTimeFixedCreate$inboundSchema,
      ProductPriceOneTimeCustomCreate$inboundSchema,
    ]),
  ),
  medias: z.nullable(z.array(z.string())).optional(),
  attached_custom_fields: z.array(AttachedCustomFieldCreate$inboundSchema)
    .optional(),
  organization_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "attached_custom_fields": "attachedCustomFields",
    "organization_id": "organizationId",
  });
});

/** @internal */
export type ProductOneTimeCreate$Outbound = {
  metadata?: { [k: string]: string | number | boolean } | undefined;
  name: string;
  description?: string | null | undefined;
  prices: Array<
    | ProductPriceOneTimeFreeCreate$Outbound
    | ProductPriceOneTimeFixedCreate$Outbound
    | ProductPriceOneTimeCustomCreate$Outbound
  >;
  medias?: Array<string> | null | undefined;
  attached_custom_fields?:
    | Array<AttachedCustomFieldCreate$Outbound>
    | undefined;
  organization_id?: string | null | undefined;
};

/** @internal */
export const ProductOneTimeCreate$outboundSchema: z.ZodType<
  ProductOneTimeCreate$Outbound,
  z.ZodTypeDef,
  ProductOneTimeCreate
> = z.object({
  metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
    .optional(),
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  prices: z.array(
    z.union([
      ProductPriceOneTimeFreeCreate$outboundSchema,
      ProductPriceOneTimeFixedCreate$outboundSchema,
      ProductPriceOneTimeCustomCreate$outboundSchema,
    ]),
  ),
  medias: z.nullable(z.array(z.string())).optional(),
  attachedCustomFields: z.array(AttachedCustomFieldCreate$outboundSchema)
    .optional(),
  organizationId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    attachedCustomFields: "attached_custom_fields",
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductOneTimeCreate$ {
  /** @deprecated use `ProductOneTimeCreate$inboundSchema` instead. */
  export const inboundSchema = ProductOneTimeCreate$inboundSchema;
  /** @deprecated use `ProductOneTimeCreate$outboundSchema` instead. */
  export const outboundSchema = ProductOneTimeCreate$outboundSchema;
  /** @deprecated use `ProductOneTimeCreate$Outbound` instead. */
  export type Outbound = ProductOneTimeCreate$Outbound;
}

export function productOneTimeCreateToJSON(
  productOneTimeCreate: ProductOneTimeCreate,
): string {
  return JSON.stringify(
    ProductOneTimeCreate$outboundSchema.parse(productOneTimeCreate),
  );
}

export function productOneTimeCreateFromJSON(
  jsonString: string,
): SafeParseResult<ProductOneTimeCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductOneTimeCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductOneTimeCreate' from JSON`,
  );
}
