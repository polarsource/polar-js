/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Payment status for an order.
 */
export type CustomerOrderPaymentStatus = {
  /**
   * Current payment status.
   */
  status: string;
  /**
   * Error message if payment failed.
   */
  error?: string | null | undefined;
};

/** @internal */
export const CustomerOrderPaymentStatus$inboundSchema: z.ZodType<
  CustomerOrderPaymentStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string(),
  error: z.nullable(z.string()).optional(),
});

/** @internal */
export type CustomerOrderPaymentStatus$Outbound = {
  status: string;
  error?: string | null | undefined;
};

/** @internal */
export const CustomerOrderPaymentStatus$outboundSchema: z.ZodType<
  CustomerOrderPaymentStatus$Outbound,
  z.ZodTypeDef,
  CustomerOrderPaymentStatus
> = z.object({
  status: z.string(),
  error: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerOrderPaymentStatus$ {
  /** @deprecated use `CustomerOrderPaymentStatus$inboundSchema` instead. */
  export const inboundSchema = CustomerOrderPaymentStatus$inboundSchema;
  /** @deprecated use `CustomerOrderPaymentStatus$outboundSchema` instead. */
  export const outboundSchema = CustomerOrderPaymentStatus$outboundSchema;
  /** @deprecated use `CustomerOrderPaymentStatus$Outbound` instead. */
  export type Outbound = CustomerOrderPaymentStatus$Outbound;
}

export function customerOrderPaymentStatusToJSON(
  customerOrderPaymentStatus: CustomerOrderPaymentStatus,
): string {
  return JSON.stringify(
    CustomerOrderPaymentStatus$outboundSchema.parse(customerOrderPaymentStatus),
  );
}

export function customerOrderPaymentStatusFromJSON(
  jsonString: string,
): SafeParseResult<CustomerOrderPaymentStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerOrderPaymentStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerOrderPaymentStatus' from JSON`,
  );
}
