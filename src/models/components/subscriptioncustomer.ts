/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";
import {
  TaxIDFormat,
  TaxIDFormat$inboundSchema,
  TaxIDFormat$outboundSchema,
} from "./taxidformat.js";

export type SubscriptionCustomerMetadata = string | number | boolean;

export type SubscriptionCustomerTaxId = string | TaxIDFormat;

export type SubscriptionCustomer = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The ID of the object.
   */
  id: string;
  metadata: { [k: string]: string | number | boolean };
  /**
   * The ID of the customer in your system. This must be unique within the organization. Once set, it can't be updated.
   */
  externalId: string | null;
  /**
   * The email address of the customer. This must be unique within the organization.
   */
  email: string;
  /**
   * Whether the customer email address is verified. The address is automatically verified when the customer accesses the customer portal using their email address.
   */
  emailVerified: boolean;
  name: string | null;
  billingAddress: Address | null;
  taxId: Array<string | TaxIDFormat | null> | null;
  organizationId: string;
  avatarUrl: string;
};

/** @internal */
export const SubscriptionCustomerMetadata$inboundSchema: z.ZodType<
  SubscriptionCustomerMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number().int(), z.boolean()]);

/** @internal */
export type SubscriptionCustomerMetadata$Outbound = string | number | boolean;

/** @internal */
export const SubscriptionCustomerMetadata$outboundSchema: z.ZodType<
  SubscriptionCustomerMetadata$Outbound,
  z.ZodTypeDef,
  SubscriptionCustomerMetadata
> = z.union([z.string(), z.number().int(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCustomerMetadata$ {
  /** @deprecated use `SubscriptionCustomerMetadata$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCustomerMetadata$inboundSchema;
  /** @deprecated use `SubscriptionCustomerMetadata$outboundSchema` instead. */
  export const outboundSchema = SubscriptionCustomerMetadata$outboundSchema;
  /** @deprecated use `SubscriptionCustomerMetadata$Outbound` instead. */
  export type Outbound = SubscriptionCustomerMetadata$Outbound;
}

export function subscriptionCustomerMetadataToJSON(
  subscriptionCustomerMetadata: SubscriptionCustomerMetadata,
): string {
  return JSON.stringify(
    SubscriptionCustomerMetadata$outboundSchema.parse(
      subscriptionCustomerMetadata,
    ),
  );
}

export function subscriptionCustomerMetadataFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCustomerMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionCustomerMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCustomerMetadata' from JSON`,
  );
}

/** @internal */
export const SubscriptionCustomerTaxId$inboundSchema: z.ZodType<
  SubscriptionCustomerTaxId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), TaxIDFormat$inboundSchema]);

/** @internal */
export type SubscriptionCustomerTaxId$Outbound = string | string;

/** @internal */
export const SubscriptionCustomerTaxId$outboundSchema: z.ZodType<
  SubscriptionCustomerTaxId$Outbound,
  z.ZodTypeDef,
  SubscriptionCustomerTaxId
> = z.union([z.string(), TaxIDFormat$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCustomerTaxId$ {
  /** @deprecated use `SubscriptionCustomerTaxId$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCustomerTaxId$inboundSchema;
  /** @deprecated use `SubscriptionCustomerTaxId$outboundSchema` instead. */
  export const outboundSchema = SubscriptionCustomerTaxId$outboundSchema;
  /** @deprecated use `SubscriptionCustomerTaxId$Outbound` instead. */
  export type Outbound = SubscriptionCustomerTaxId$Outbound;
}

export function subscriptionCustomerTaxIdToJSON(
  subscriptionCustomerTaxId: SubscriptionCustomerTaxId,
): string {
  return JSON.stringify(
    SubscriptionCustomerTaxId$outboundSchema.parse(subscriptionCustomerTaxId),
  );
}

export function subscriptionCustomerTaxIdFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCustomerTaxId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionCustomerTaxId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCustomerTaxId' from JSON`,
  );
}

/** @internal */
export const SubscriptionCustomer$inboundSchema: z.ZodType<
  SubscriptionCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  id: z.string(),
  metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
  external_id: z.nullable(z.string()),
  email: z.string(),
  email_verified: z.boolean(),
  name: z.nullable(z.string()),
  billing_address: z.nullable(Address$inboundSchema),
  tax_id: z.nullable(
    z.array(z.nullable(z.union([z.string(), TaxIDFormat$inboundSchema]))),
  ),
  organization_id: z.string(),
  avatar_url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "external_id": "externalId",
    "email_verified": "emailVerified",
    "billing_address": "billingAddress",
    "tax_id": "taxId",
    "organization_id": "organizationId",
    "avatar_url": "avatarUrl",
  });
});

/** @internal */
export type SubscriptionCustomer$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  metadata: { [k: string]: string | number | boolean };
  external_id: string | null;
  email: string;
  email_verified: boolean;
  name: string | null;
  billing_address: Address$Outbound | null;
  tax_id: Array<string | string | null> | null;
  organization_id: string;
  avatar_url: string;
};

/** @internal */
export const SubscriptionCustomer$outboundSchema: z.ZodType<
  SubscriptionCustomer$Outbound,
  z.ZodTypeDef,
  SubscriptionCustomer
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
  externalId: z.nullable(z.string()),
  email: z.string(),
  emailVerified: z.boolean(),
  name: z.nullable(z.string()),
  billingAddress: z.nullable(Address$outboundSchema),
  taxId: z.nullable(
    z.array(z.nullable(z.union([z.string(), TaxIDFormat$outboundSchema]))),
  ),
  organizationId: z.string(),
  avatarUrl: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    externalId: "external_id",
    emailVerified: "email_verified",
    billingAddress: "billing_address",
    taxId: "tax_id",
    organizationId: "organization_id",
    avatarUrl: "avatar_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCustomer$ {
  /** @deprecated use `SubscriptionCustomer$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCustomer$inboundSchema;
  /** @deprecated use `SubscriptionCustomer$outboundSchema` instead. */
  export const outboundSchema = SubscriptionCustomer$outboundSchema;
  /** @deprecated use `SubscriptionCustomer$Outbound` instead. */
  export type Outbound = SubscriptionCustomer$Outbound;
}

export function subscriptionCustomerToJSON(
  subscriptionCustomer: SubscriptionCustomer,
): string {
  return JSON.stringify(
    SubscriptionCustomer$outboundSchema.parse(subscriptionCustomer),
  );
}

export function subscriptionCustomerFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCustomer' from JSON`,
  );
}
