/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LegacyRecurringProductPriceCustomOutput,
  LegacyRecurringProductPriceCustomOutput$inboundSchema,
  LegacyRecurringProductPriceCustomOutput$Outbound,
  LegacyRecurringProductPriceCustomOutput$outboundSchema,
} from "./legacyrecurringproductpricecustomoutput.js";
import {
  LegacyRecurringProductPriceFixedOutput,
  LegacyRecurringProductPriceFixedOutput$inboundSchema,
  LegacyRecurringProductPriceFixedOutput$Outbound,
  LegacyRecurringProductPriceFixedOutput$outboundSchema,
} from "./legacyrecurringproductpricefixedoutput.js";
import {
  LegacyRecurringProductPriceFreeOutput,
  LegacyRecurringProductPriceFreeOutput$inboundSchema,
  LegacyRecurringProductPriceFreeOutput$Outbound,
  LegacyRecurringProductPriceFreeOutput$outboundSchema,
} from "./legacyrecurringproductpricefreeoutput.js";

export type LegacyRecurringProductPriceOutput =
  | (LegacyRecurringProductPriceCustomOutput & { amountType: "custom" })
  | (LegacyRecurringProductPriceFixedOutput & { amountType: "fixed" })
  | (LegacyRecurringProductPriceFreeOutput & { amountType: "free" });

/** @internal */
export const LegacyRecurringProductPriceOutput$inboundSchema: z.ZodType<
  LegacyRecurringProductPriceOutput,
  z.ZodTypeDef,
  unknown
> = z.union([
  LegacyRecurringProductPriceCustomOutput$inboundSchema.and(
    z.object({ amount_type: z.literal("custom") }).transform((v) => ({
      amountType: v.amount_type,
    })),
  ),
  LegacyRecurringProductPriceFixedOutput$inboundSchema.and(
    z.object({ amount_type: z.literal("fixed") }).transform((v) => ({
      amountType: v.amount_type,
    })),
  ),
  LegacyRecurringProductPriceFreeOutput$inboundSchema.and(
    z.object({ amount_type: z.literal("free") }).transform((v) => ({
      amountType: v.amount_type,
    })),
  ),
]);

/** @internal */
export type LegacyRecurringProductPriceOutput$Outbound =
  | (LegacyRecurringProductPriceCustomOutput$Outbound & {
    amount_type: "custom";
  })
  | (LegacyRecurringProductPriceFixedOutput$Outbound & { amount_type: "fixed" })
  | (LegacyRecurringProductPriceFreeOutput$Outbound & { amount_type: "free" });

/** @internal */
export const LegacyRecurringProductPriceOutput$outboundSchema: z.ZodType<
  LegacyRecurringProductPriceOutput$Outbound,
  z.ZodTypeDef,
  LegacyRecurringProductPriceOutput
> = z.union([
  LegacyRecurringProductPriceCustomOutput$outboundSchema.and(
    z.object({ amountType: z.literal("custom") }).transform((v) => ({
      amount_type: v.amountType,
    })),
  ),
  LegacyRecurringProductPriceFixedOutput$outboundSchema.and(
    z.object({ amountType: z.literal("fixed") }).transform((v) => ({
      amount_type: v.amountType,
    })),
  ),
  LegacyRecurringProductPriceFreeOutput$outboundSchema.and(
    z.object({ amountType: z.literal("free") }).transform((v) => ({
      amount_type: v.amountType,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LegacyRecurringProductPriceOutput$ {
  /** @deprecated use `LegacyRecurringProductPriceOutput$inboundSchema` instead. */
  export const inboundSchema = LegacyRecurringProductPriceOutput$inboundSchema;
  /** @deprecated use `LegacyRecurringProductPriceOutput$outboundSchema` instead. */
  export const outboundSchema =
    LegacyRecurringProductPriceOutput$outboundSchema;
  /** @deprecated use `LegacyRecurringProductPriceOutput$Outbound` instead. */
  export type Outbound = LegacyRecurringProductPriceOutput$Outbound;
}

export function legacyRecurringProductPriceOutputToJSON(
  legacyRecurringProductPriceOutput: LegacyRecurringProductPriceOutput,
): string {
  return JSON.stringify(
    LegacyRecurringProductPriceOutput$outboundSchema.parse(
      legacyRecurringProductPriceOutput,
    ),
  );
}

export function legacyRecurringProductPriceOutputFromJSON(
  jsonString: string,
): SafeParseResult<LegacyRecurringProductPriceOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LegacyRecurringProductPriceOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LegacyRecurringProductPriceOutput' from JSON`,
  );
}
