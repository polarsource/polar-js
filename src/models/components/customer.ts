/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";
import {
  TaxIDFormat,
  TaxIDFormat$inboundSchema,
  TaxIDFormat$outboundSchema,
} from "./taxidformat.js";

export type CustomerMetadata = string | number | boolean;

export type CustomerTaxId = string | TaxIDFormat;

/**
 * A customer in an organization.
 */
export type Customer = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The ID of the object.
   */
  id: string;
  metadata: { [k: string]: string | number | boolean };
  email: string;
  emailVerified: boolean;
  name: string | null;
  billingAddress: Address | null;
  taxId: Array<string | TaxIDFormat> | null;
  organizationId: string;
  avatarUrl: string;
};

/** @internal */
export const CustomerMetadata$inboundSchema: z.ZodType<
  CustomerMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number().int(), z.boolean()]);

/** @internal */
export type CustomerMetadata$Outbound = string | number | boolean;

/** @internal */
export const CustomerMetadata$outboundSchema: z.ZodType<
  CustomerMetadata$Outbound,
  z.ZodTypeDef,
  CustomerMetadata
> = z.union([z.string(), z.number().int(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerMetadata$ {
  /** @deprecated use `CustomerMetadata$inboundSchema` instead. */
  export const inboundSchema = CustomerMetadata$inboundSchema;
  /** @deprecated use `CustomerMetadata$outboundSchema` instead. */
  export const outboundSchema = CustomerMetadata$outboundSchema;
  /** @deprecated use `CustomerMetadata$Outbound` instead. */
  export type Outbound = CustomerMetadata$Outbound;
}

export function customerMetadataToJSON(
  customerMetadata: CustomerMetadata,
): string {
  return JSON.stringify(
    CustomerMetadata$outboundSchema.parse(customerMetadata),
  );
}

export function customerMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CustomerMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerMetadata' from JSON`,
  );
}

/** @internal */
export const CustomerTaxId$inboundSchema: z.ZodType<
  CustomerTaxId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), TaxIDFormat$inboundSchema]);

/** @internal */
export type CustomerTaxId$Outbound = string | string;

/** @internal */
export const CustomerTaxId$outboundSchema: z.ZodType<
  CustomerTaxId$Outbound,
  z.ZodTypeDef,
  CustomerTaxId
> = z.union([z.string(), TaxIDFormat$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerTaxId$ {
  /** @deprecated use `CustomerTaxId$inboundSchema` instead. */
  export const inboundSchema = CustomerTaxId$inboundSchema;
  /** @deprecated use `CustomerTaxId$outboundSchema` instead. */
  export const outboundSchema = CustomerTaxId$outboundSchema;
  /** @deprecated use `CustomerTaxId$Outbound` instead. */
  export type Outbound = CustomerTaxId$Outbound;
}

export function customerTaxIdToJSON(customerTaxId: CustomerTaxId): string {
  return JSON.stringify(CustomerTaxId$outboundSchema.parse(customerTaxId));
}

export function customerTaxIdFromJSON(
  jsonString: string,
): SafeParseResult<CustomerTaxId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerTaxId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerTaxId' from JSON`,
  );
}

/** @internal */
export const Customer$inboundSchema: z.ZodType<
  Customer,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  id: z.string(),
  metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
  email: z.string(),
  email_verified: z.boolean(),
  name: z.nullable(z.string()),
  billing_address: z.nullable(Address$inboundSchema),
  tax_id: z.nullable(z.array(z.union([z.string(), TaxIDFormat$inboundSchema]))),
  organization_id: z.string(),
  avatar_url: z.string(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "email_verified": "emailVerified",
    "billing_address": "billingAddress",
    "tax_id": "taxId",
    "organization_id": "organizationId",
    "avatar_url": "avatarUrl",
  });
});

/** @internal */
export type Customer$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  metadata: { [k: string]: string | number | boolean };
  email: string;
  email_verified: boolean;
  name: string | null;
  billing_address: Address$Outbound | null;
  tax_id: Array<string | string> | null;
  organization_id: string;
  avatar_url: string;
};

/** @internal */
export const Customer$outboundSchema: z.ZodType<
  Customer$Outbound,
  z.ZodTypeDef,
  Customer
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
  email: z.string(),
  emailVerified: z.boolean(),
  name: z.nullable(z.string()),
  billingAddress: z.nullable(Address$outboundSchema),
  taxId: z.nullable(z.array(z.union([z.string(), TaxIDFormat$outboundSchema]))),
  organizationId: z.string(),
  avatarUrl: z.string(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    emailVerified: "email_verified",
    billingAddress: "billing_address",
    taxId: "tax_id",
    organizationId: "organization_id",
    avatarUrl: "avatar_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Customer$ {
  /** @deprecated use `Customer$inboundSchema` instead. */
  export const inboundSchema = Customer$inboundSchema;
  /** @deprecated use `Customer$outboundSchema` instead. */
  export const outboundSchema = Customer$outboundSchema;
  /** @deprecated use `Customer$Outbound` instead. */
  export type Outbound = Customer$Outbound;
}

export function customerToJSON(customer: Customer): string {
  return JSON.stringify(Customer$outboundSchema.parse(customer));
}

export function customerFromJSON(
  jsonString: string,
): SafeParseResult<Customer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Customer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Customer' from JSON`,
  );
}
