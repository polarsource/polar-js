/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { blobLikeSchema } from "../../types/blobs.js";
import * as z from "zod";

export type FileT = {
    fileName: string;
    content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Buffer;
};

export type BodySubscriptionsImport = {
    /**
     * CSV file with emails.
     */
    file: FileT | Blob;
    /**
     * The organization ID on which to import the subscriptions.
     */
    organizationId: string;
};

/** @internal */
export const FileT$inboundSchema: z.ZodType<FileT, z.ZodTypeDef, unknown> = z.object({
    fileName: z.string(),
    content: z.union([
        z.instanceof(ReadableStream<Uint8Array>),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Buffer),
    ]),
});

/** @internal */
export type FileT$Outbound = {
    fileName: string;
    content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Buffer;
};

/** @internal */
export const FileT$outboundSchema: z.ZodType<FileT$Outbound, z.ZodTypeDef, FileT> = z.object({
    fileName: z.string(),
    content: z.union([
        z.instanceof(ReadableStream<Uint8Array>),
        z.instanceof(Blob),
        z.instanceof(ArrayBuffer),
        z.instanceof(Buffer),
    ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileT$ {
    /** @deprecated use `FileT$inboundSchema` instead. */
    export const inboundSchema = FileT$inboundSchema;
    /** @deprecated use `FileT$outboundSchema` instead. */
    export const outboundSchema = FileT$outboundSchema;
    /** @deprecated use `FileT$Outbound` instead. */
    export type Outbound = FileT$Outbound;
}

/** @internal */
export const BodySubscriptionsImport$inboundSchema: z.ZodType<
    BodySubscriptionsImport,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        file: z.lazy(() => FileT$inboundSchema),
        organization_id: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            organization_id: "organizationId",
        });
    });

/** @internal */
export type BodySubscriptionsImport$Outbound = {
    file: FileT$Outbound | Blob;
    organization_id: string;
};

/** @internal */
export const BodySubscriptionsImport$outboundSchema: z.ZodType<
    BodySubscriptionsImport$Outbound,
    z.ZodTypeDef,
    BodySubscriptionsImport
> = z
    .object({
        file: z.lazy(() => FileT$outboundSchema).or(blobLikeSchema),
        organizationId: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            organizationId: "organization_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BodySubscriptionsImport$ {
    /** @deprecated use `BodySubscriptionsImport$inboundSchema` instead. */
    export const inboundSchema = BodySubscriptionsImport$inboundSchema;
    /** @deprecated use `BodySubscriptionsImport$outboundSchema` instead. */
    export const outboundSchema = BodySubscriptionsImport$outboundSchema;
    /** @deprecated use `BodySubscriptionsImport$Outbound` instead. */
    export type Outbound = BodySubscriptionsImport$Outbound;
}
