/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Order,
  Order$inboundSchema,
  Order$Outbound,
  Order$outboundSchema,
} from "./order.js";

/**
 * Sent when an order is paid.
 *
 * @remarks
 *
 * When you receive this event, the order is fully processed and payment has been received.
 *
 * **Discord & Slack support:** Full
 */
export type WebhookOrderPaidPayload = {
  type?: "order.paid" | undefined;
  data: Order;
};

/** @internal */
export const WebhookOrderPaidPayload$inboundSchema: z.ZodType<
  WebhookOrderPaidPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("order.paid").optional(),
  data: Order$inboundSchema,
});

/** @internal */
export type WebhookOrderPaidPayload$Outbound = {
  type: "order.paid";
  data: Order$Outbound;
};

/** @internal */
export const WebhookOrderPaidPayload$outboundSchema: z.ZodType<
  WebhookOrderPaidPayload$Outbound,
  z.ZodTypeDef,
  WebhookOrderPaidPayload
> = z.object({
  type: z.literal("order.paid").default("order.paid" as const),
  data: Order$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookOrderPaidPayload$ {
  /** @deprecated use `WebhookOrderPaidPayload$inboundSchema` instead. */
  export const inboundSchema = WebhookOrderPaidPayload$inboundSchema;
  /** @deprecated use `WebhookOrderPaidPayload$outboundSchema` instead. */
  export const outboundSchema = WebhookOrderPaidPayload$outboundSchema;
  /** @deprecated use `WebhookOrderPaidPayload$Outbound` instead. */
  export type Outbound = WebhookOrderPaidPayload$Outbound;
}

export function webhookOrderPaidPayloadToJSON(
  webhookOrderPaidPayload: WebhookOrderPaidPayload,
): string {
  return JSON.stringify(
    WebhookOrderPaidPayload$outboundSchema.parse(webhookOrderPaidPayload),
  );
}

export function webhookOrderPaidPayloadFromJSON(
  jsonString: string,
): SafeParseResult<WebhookOrderPaidPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookOrderPaidPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookOrderPaidPayload' from JSON`,
  );
}
