/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const WebTokenRequestSubType = {
  User: "user",
  Organization: "organization",
} as const;
export type WebTokenRequestSubType = ClosedEnum<typeof WebTokenRequestSubType>;

export type WebTokenRequest = {
  grantType: "web";
  clientId: string;
  clientSecret: string;
  sessionToken: string;
  subType?: WebTokenRequestSubType | undefined;
  sub?: string | null | undefined;
  scope?: string | null | undefined;
};

/** @internal */
export const WebTokenRequestSubType$inboundSchema: z.ZodNativeEnum<
  typeof WebTokenRequestSubType
> = z.nativeEnum(WebTokenRequestSubType);

/** @internal */
export const WebTokenRequestSubType$outboundSchema: z.ZodNativeEnum<
  typeof WebTokenRequestSubType
> = WebTokenRequestSubType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebTokenRequestSubType$ {
  /** @deprecated use `WebTokenRequestSubType$inboundSchema` instead. */
  export const inboundSchema = WebTokenRequestSubType$inboundSchema;
  /** @deprecated use `WebTokenRequestSubType$outboundSchema` instead. */
  export const outboundSchema = WebTokenRequestSubType$outboundSchema;
}

/** @internal */
export const WebTokenRequest$inboundSchema: z.ZodType<
  WebTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  grant_type: z.literal("web"),
  client_id: z.string(),
  client_secret: z.string(),
  session_token: z.string(),
  sub_type: WebTokenRequestSubType$inboundSchema.default("user"),
  sub: z.nullable(z.string()).optional(),
  scope: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "grant_type": "grantType",
    "client_id": "clientId",
    "client_secret": "clientSecret",
    "session_token": "sessionToken",
    "sub_type": "subType",
  });
});

/** @internal */
export type WebTokenRequest$Outbound = {
  grant_type: "web";
  client_id: string;
  client_secret: string;
  session_token: string;
  sub_type: string;
  sub?: string | null | undefined;
  scope?: string | null | undefined;
};

/** @internal */
export const WebTokenRequest$outboundSchema: z.ZodType<
  WebTokenRequest$Outbound,
  z.ZodTypeDef,
  WebTokenRequest
> = z.object({
  grantType: z.literal("web"),
  clientId: z.string(),
  clientSecret: z.string(),
  sessionToken: z.string(),
  subType: WebTokenRequestSubType$outboundSchema.default("user"),
  sub: z.nullable(z.string()).optional(),
  scope: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    grantType: "grant_type",
    clientId: "client_id",
    clientSecret: "client_secret",
    sessionToken: "session_token",
    subType: "sub_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebTokenRequest$ {
  /** @deprecated use `WebTokenRequest$inboundSchema` instead. */
  export const inboundSchema = WebTokenRequest$inboundSchema;
  /** @deprecated use `WebTokenRequest$outboundSchema` instead. */
  export const outboundSchema = WebTokenRequest$outboundSchema;
  /** @deprecated use `WebTokenRequest$Outbound` instead. */
  export type Outbound = WebTokenRequest$Outbound;
}

export function webTokenRequestToJSON(
  webTokenRequest: WebTokenRequest,
): string {
  return JSON.stringify(WebTokenRequest$outboundSchema.parse(webTokenRequest));
}

export function webTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<WebTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebTokenRequest' from JSON`,
  );
}
