/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Platforms,
  Platforms$inboundSchema,
  Platforms$outboundSchema,
} from "./platforms.js";

export type ExternalOrganization = {
  id: string;
  platform: Platforms;
  name: string;
  avatarUrl: string;
  isPersonal: boolean;
  bio: string | null;
  prettyName: string | null;
  company: string | null;
  blog: string | null;
  location: string | null;
  email: string | null;
  twitterUsername: string | null;
  organizationId: string | null;
};

/** @internal */
export const ExternalOrganization$inboundSchema: z.ZodType<
  ExternalOrganization,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  platform: Platforms$inboundSchema,
  name: z.string(),
  avatar_url: z.string(),
  is_personal: z.boolean(),
  bio: z.nullable(z.string()),
  pretty_name: z.nullable(z.string()),
  company: z.nullable(z.string()),
  blog: z.nullable(z.string()),
  location: z.nullable(z.string()),
  email: z.nullable(z.string()),
  twitter_username: z.nullable(z.string()),
  organization_id: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "avatar_url": "avatarUrl",
    "is_personal": "isPersonal",
    "pretty_name": "prettyName",
    "twitter_username": "twitterUsername",
    "organization_id": "organizationId",
  });
});

/** @internal */
export type ExternalOrganization$Outbound = {
  id: string;
  platform: string;
  name: string;
  avatar_url: string;
  is_personal: boolean;
  bio: string | null;
  pretty_name: string | null;
  company: string | null;
  blog: string | null;
  location: string | null;
  email: string | null;
  twitter_username: string | null;
  organization_id: string | null;
};

/** @internal */
export const ExternalOrganization$outboundSchema: z.ZodType<
  ExternalOrganization$Outbound,
  z.ZodTypeDef,
  ExternalOrganization
> = z.object({
  id: z.string(),
  platform: Platforms$outboundSchema,
  name: z.string(),
  avatarUrl: z.string(),
  isPersonal: z.boolean(),
  bio: z.nullable(z.string()),
  prettyName: z.nullable(z.string()),
  company: z.nullable(z.string()),
  blog: z.nullable(z.string()),
  location: z.nullable(z.string()),
  email: z.nullable(z.string()),
  twitterUsername: z.nullable(z.string()),
  organizationId: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    avatarUrl: "avatar_url",
    isPersonal: "is_personal",
    prettyName: "pretty_name",
    twitterUsername: "twitter_username",
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalOrganization$ {
  /** @deprecated use `ExternalOrganization$inboundSchema` instead. */
  export const inboundSchema = ExternalOrganization$inboundSchema;
  /** @deprecated use `ExternalOrganization$outboundSchema` instead. */
  export const outboundSchema = ExternalOrganization$outboundSchema;
  /** @deprecated use `ExternalOrganization$Outbound` instead. */
  export type Outbound = ExternalOrganization$Outbound;
}

export function externalOrganizationToJSON(
  externalOrganization: ExternalOrganization,
): string {
  return JSON.stringify(
    ExternalOrganization$outboundSchema.parse(externalOrganization),
  );
}

export function externalOrganizationFromJSON(
  jsonString: string,
): SafeParseResult<ExternalOrganization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExternalOrganization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalOrganization' from JSON`,
  );
}
