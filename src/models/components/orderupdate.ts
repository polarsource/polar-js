/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";

/**
 * Schema to update an order.
 */
export type OrderUpdate = {
  /**
   * The name of the customer that should appear on the invoice. Can't be updated after the invoice is generated.
   */
  billingName: string | null;
  /**
   * The address of the customer that should appear on the invoice. Can't be updated after the invoice is generated.
   */
  billingAddress: Address | null;
};

/** @internal */
export const OrderUpdate$inboundSchema: z.ZodType<
  OrderUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  billing_name: z.nullable(z.string()),
  billing_address: z.nullable(Address$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "billing_name": "billingName",
    "billing_address": "billingAddress",
  });
});

/** @internal */
export type OrderUpdate$Outbound = {
  billing_name: string | null;
  billing_address: Address$Outbound | null;
};

/** @internal */
export const OrderUpdate$outboundSchema: z.ZodType<
  OrderUpdate$Outbound,
  z.ZodTypeDef,
  OrderUpdate
> = z.object({
  billingName: z.nullable(z.string()),
  billingAddress: z.nullable(Address$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    billingName: "billing_name",
    billingAddress: "billing_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderUpdate$ {
  /** @deprecated use `OrderUpdate$inboundSchema` instead. */
  export const inboundSchema = OrderUpdate$inboundSchema;
  /** @deprecated use `OrderUpdate$outboundSchema` instead. */
  export const outboundSchema = OrderUpdate$outboundSchema;
  /** @deprecated use `OrderUpdate$Outbound` instead. */
  export type Outbound = OrderUpdate$Outbound;
}

export function orderUpdateToJSON(orderUpdate: OrderUpdate): string {
  return JSON.stringify(OrderUpdate$outboundSchema.parse(orderUpdate));
}

export function orderUpdateFromJSON(
  jsonString: string,
): SafeParseResult<OrderUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderUpdate' from JSON`,
  );
}
