/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ProductPrice,
  ProductPrice$inboundSchema,
  ProductPrice$Outbound,
  ProductPrice$outboundSchema,
} from "./productprice.js";
import {
  UserOrderProduct,
  UserOrderProduct$inboundSchema,
  UserOrderProduct$Outbound,
  UserOrderProduct$outboundSchema,
} from "./userorderproduct.js";
import {
  UserOrderSubscription,
  UserOrderSubscription$inboundSchema,
  UserOrderSubscription$Outbound,
  UserOrderSubscription$outboundSchema,
} from "./userordersubscription.js";

export type UserOrder = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  id: string;
  amount: number;
  taxAmount: number;
  currency: string;
  userId: string;
  productId: string;
  productPriceId: string;
  subscriptionId: string | null;
  product: UserOrderProduct;
  productPrice: ProductPrice;
  subscription: UserOrderSubscription | null;
};

/** @internal */
export const UserOrder$inboundSchema: z.ZodType<
  UserOrder,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  id: z.string(),
  amount: z.number().int(),
  tax_amount: z.number().int(),
  currency: z.string(),
  user_id: z.string(),
  product_id: z.string(),
  product_price_id: z.string(),
  subscription_id: z.nullable(z.string()),
  product: UserOrderProduct$inboundSchema,
  product_price: ProductPrice$inboundSchema,
  subscription: z.nullable(UserOrderSubscription$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "tax_amount": "taxAmount",
    "user_id": "userId",
    "product_id": "productId",
    "product_price_id": "productPriceId",
    "subscription_id": "subscriptionId",
    "product_price": "productPrice",
  });
});

/** @internal */
export type UserOrder$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  amount: number;
  tax_amount: number;
  currency: string;
  user_id: string;
  product_id: string;
  product_price_id: string;
  subscription_id: string | null;
  product: UserOrderProduct$Outbound;
  product_price: ProductPrice$Outbound;
  subscription: UserOrderSubscription$Outbound | null;
};

/** @internal */
export const UserOrder$outboundSchema: z.ZodType<
  UserOrder$Outbound,
  z.ZodTypeDef,
  UserOrder
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  amount: z.number().int(),
  taxAmount: z.number().int(),
  currency: z.string(),
  userId: z.string(),
  productId: z.string(),
  productPriceId: z.string(),
  subscriptionId: z.nullable(z.string()),
  product: UserOrderProduct$outboundSchema,
  productPrice: ProductPrice$outboundSchema,
  subscription: z.nullable(UserOrderSubscription$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    taxAmount: "tax_amount",
    userId: "user_id",
    productId: "product_id",
    productPriceId: "product_price_id",
    subscriptionId: "subscription_id",
    productPrice: "product_price",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserOrder$ {
  /** @deprecated use `UserOrder$inboundSchema` instead. */
  export const inboundSchema = UserOrder$inboundSchema;
  /** @deprecated use `UserOrder$outboundSchema` instead. */
  export const outboundSchema = UserOrder$outboundSchema;
  /** @deprecated use `UserOrder$Outbound` instead. */
  export type Outbound = UserOrder$Outbound;
}

export function userOrderToJSON(userOrder: UserOrder): string {
  return JSON.stringify(UserOrder$outboundSchema.parse(userOrder));
}

export function userOrderFromJSON(
  jsonString: string,
): SafeParseResult<UserOrder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserOrder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserOrder' from JSON`,
  );
}
