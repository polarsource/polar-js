/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  ArticleVisibility,
  ArticleVisibility$inboundSchema,
  ArticleVisibility$outboundSchema,
} from "./articlevisibility.js";
import {
  BylineProfile,
  BylineProfile$inboundSchema,
  BylineProfile$Outbound,
  BylineProfile$outboundSchema,
} from "./bylineprofile.js";
import {
  Organization,
  Organization$inboundSchema,
  Organization$Outbound,
  Organization$outboundSchema,
} from "./organization.js";

export type Article = {
  id: string;
  slug: string;
  title: string;
  body: string;
  byline: BylineProfile;
  visibility: ArticleVisibility;
  userId: string | null;
  organizationId: string;
  organization: Organization;
  publishedAt: Date | null;
  paidSubscribersOnly: boolean | null;
  paidSubscribersOnlyEndsAt: Date | null;
  isPreview: boolean;
  isPinned: boolean;
  notifySubscribers: boolean | null;
  notificationsSentAt: Date | null;
  emailSentToCount: number | null;
  ogImageUrl: string | null;
  ogDescription: string | null;
};

/** @internal */
export const Article$inboundSchema: z.ZodType<Article, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    slug: z.string(),
    title: z.string(),
    body: z.string(),
    byline: BylineProfile$inboundSchema,
    visibility: ArticleVisibility$inboundSchema,
    user_id: z.nullable(z.string()),
    organization_id: z.string(),
    organization: Organization$inboundSchema,
    published_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ),
    paid_subscribers_only: z.nullable(z.boolean()),
    paid_subscribers_only_ends_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ),
    is_preview: z.boolean(),
    is_pinned: z.boolean(),
    notify_subscribers: z.nullable(z.boolean()),
    notifications_sent_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ),
    email_sent_to_count: z.nullable(z.number().int()),
    og_image_url: z.nullable(z.string()),
    og_description: z.nullable(z.string()),
  }).transform((v) => {
    return remap$(v, {
      "user_id": "userId",
      "organization_id": "organizationId",
      "published_at": "publishedAt",
      "paid_subscribers_only": "paidSubscribersOnly",
      "paid_subscribers_only_ends_at": "paidSubscribersOnlyEndsAt",
      "is_preview": "isPreview",
      "is_pinned": "isPinned",
      "notify_subscribers": "notifySubscribers",
      "notifications_sent_at": "notificationsSentAt",
      "email_sent_to_count": "emailSentToCount",
      "og_image_url": "ogImageUrl",
      "og_description": "ogDescription",
    });
  });

/** @internal */
export type Article$Outbound = {
  id: string;
  slug: string;
  title: string;
  body: string;
  byline: BylineProfile$Outbound;
  visibility: string;
  user_id: string | null;
  organization_id: string;
  organization: Organization$Outbound;
  published_at: string | null;
  paid_subscribers_only: boolean | null;
  paid_subscribers_only_ends_at: string | null;
  is_preview: boolean;
  is_pinned: boolean;
  notify_subscribers: boolean | null;
  notifications_sent_at: string | null;
  email_sent_to_count: number | null;
  og_image_url: string | null;
  og_description: string | null;
};

/** @internal */
export const Article$outboundSchema: z.ZodType<
  Article$Outbound,
  z.ZodTypeDef,
  Article
> = z.object({
  id: z.string(),
  slug: z.string(),
  title: z.string(),
  body: z.string(),
  byline: BylineProfile$outboundSchema,
  visibility: ArticleVisibility$outboundSchema,
  userId: z.nullable(z.string()),
  organizationId: z.string(),
  organization: Organization$outboundSchema,
  publishedAt: z.nullable(z.date().transform(v => v.toISOString())),
  paidSubscribersOnly: z.nullable(z.boolean()),
  paidSubscribersOnlyEndsAt: z.nullable(
    z.date().transform(v => v.toISOString()),
  ),
  isPreview: z.boolean(),
  isPinned: z.boolean(),
  notifySubscribers: z.nullable(z.boolean()),
  notificationsSentAt: z.nullable(z.date().transform(v => v.toISOString())),
  emailSentToCount: z.nullable(z.number().int()),
  ogImageUrl: z.nullable(z.string()),
  ogDescription: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    organizationId: "organization_id",
    publishedAt: "published_at",
    paidSubscribersOnly: "paid_subscribers_only",
    paidSubscribersOnlyEndsAt: "paid_subscribers_only_ends_at",
    isPreview: "is_preview",
    isPinned: "is_pinned",
    notifySubscribers: "notify_subscribers",
    notificationsSentAt: "notifications_sent_at",
    emailSentToCount: "email_sent_to_count",
    ogImageUrl: "og_image_url",
    ogDescription: "og_description",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Article$ {
  /** @deprecated use `Article$inboundSchema` instead. */
  export const inboundSchema = Article$inboundSchema;
  /** @deprecated use `Article$outboundSchema` instead. */
  export const outboundSchema = Article$outboundSchema;
  /** @deprecated use `Article$Outbound` instead. */
  export type Outbound = Article$Outbound;
}
