/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ExternalOrganization,
  ExternalOrganization$inboundSchema,
  ExternalOrganization$Outbound,
  ExternalOrganization$outboundSchema,
} from "./externalorganization.js";
import {
  Organization,
  Organization$inboundSchema,
  Organization$Outbound,
  Organization$outboundSchema,
} from "./organization.js";
import {
  Platforms,
  Platforms$inboundSchema,
  Platforms$outboundSchema,
} from "./platforms.js";
import {
  RepositoryProfileSettings,
  RepositoryProfileSettings$inboundSchema,
  RepositoryProfileSettings$Outbound,
  RepositoryProfileSettings$outboundSchema,
} from "./repositoryprofilesettings.js";

export type Repository = {
  id: string;
  platform: Platforms;
  isPrivate: boolean;
  name: string;
  description: string | null;
  stars: number | null;
  license: string | null;
  homepage: string | null;
  /**
   * Settings for the repository profile
   */
  profileSettings: RepositoryProfileSettings | null;
  organization: ExternalOrganization;
  internalOrganization: Organization | null;
};

/** @internal */
export const Repository$inboundSchema: z.ZodType<
  Repository,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  platform: Platforms$inboundSchema,
  is_private: z.boolean(),
  name: z.string(),
  description: z.nullable(z.string()),
  stars: z.nullable(z.number().int()),
  license: z.nullable(z.string()),
  homepage: z.nullable(z.string()),
  profile_settings: z.nullable(RepositoryProfileSettings$inboundSchema),
  organization: ExternalOrganization$inboundSchema,
  internal_organization: z.nullable(Organization$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "is_private": "isPrivate",
    "profile_settings": "profileSettings",
    "internal_organization": "internalOrganization",
  });
});

/** @internal */
export type Repository$Outbound = {
  id: string;
  platform: string;
  is_private: boolean;
  name: string;
  description: string | null;
  stars: number | null;
  license: string | null;
  homepage: string | null;
  profile_settings: RepositoryProfileSettings$Outbound | null;
  organization: ExternalOrganization$Outbound;
  internal_organization: Organization$Outbound | null;
};

/** @internal */
export const Repository$outboundSchema: z.ZodType<
  Repository$Outbound,
  z.ZodTypeDef,
  Repository
> = z.object({
  id: z.string(),
  platform: Platforms$outboundSchema,
  isPrivate: z.boolean(),
  name: z.string(),
  description: z.nullable(z.string()),
  stars: z.nullable(z.number().int()),
  license: z.nullable(z.string()),
  homepage: z.nullable(z.string()),
  profileSettings: z.nullable(RepositoryProfileSettings$outboundSchema),
  organization: ExternalOrganization$outboundSchema,
  internalOrganization: z.nullable(Organization$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    isPrivate: "is_private",
    profileSettings: "profile_settings",
    internalOrganization: "internal_organization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Repository$ {
  /** @deprecated use `Repository$inboundSchema` instead. */
  export const inboundSchema = Repository$inboundSchema;
  /** @deprecated use `Repository$outboundSchema` instead. */
  export const outboundSchema = Repository$outboundSchema;
  /** @deprecated use `Repository$Outbound` instead. */
  export type Outbound = Repository$Outbound;
}

export function repositoryToJSON(repository: Repository): string {
  return JSON.stringify(Repository$outboundSchema.parse(repository));
}

export function repositoryFromJSON(
  jsonString: string,
): SafeParseResult<Repository, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Repository$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Repository' from JSON`,
  );
}
