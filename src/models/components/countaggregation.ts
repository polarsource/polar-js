/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CountAggregation = {
  func?: "count" | undefined;
};

/** @internal */
export const CountAggregation$inboundSchema: z.ZodType<
  CountAggregation,
  z.ZodTypeDef,
  unknown
> = z.object({
  func: z.literal("count").default("count"),
});

/** @internal */
export type CountAggregation$Outbound = {
  func: "count";
};

/** @internal */
export const CountAggregation$outboundSchema: z.ZodType<
  CountAggregation$Outbound,
  z.ZodTypeDef,
  CountAggregation
> = z.object({
  func: z.literal("count").default("count" as const),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CountAggregation$ {
  /** @deprecated use `CountAggregation$inboundSchema` instead. */
  export const inboundSchema = CountAggregation$inboundSchema;
  /** @deprecated use `CountAggregation$outboundSchema` instead. */
  export const outboundSchema = CountAggregation$outboundSchema;
  /** @deprecated use `CountAggregation$Outbound` instead. */
  export type Outbound = CountAggregation$Outbound;
}

export function countAggregationToJSON(
  countAggregation: CountAggregation,
): string {
  return JSON.stringify(
    CountAggregation$outboundSchema.parse(countAggregation),
  );
}

export function countAggregationFromJSON(
  jsonString: string,
): SafeParseResult<CountAggregation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CountAggregation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CountAggregation' from JSON`,
  );
}
