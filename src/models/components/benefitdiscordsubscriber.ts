/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  BenefitDiscordSubscriberProperties,
  BenefitDiscordSubscriberProperties$inboundSchema,
  BenefitDiscordSubscriberProperties$Outbound,
  BenefitDiscordSubscriberProperties$outboundSchema,
} from "./benefitdiscordsubscriberproperties.js";

export const BenefitDiscordSubscriberType = {
  Discord: "discord",
} as const;
export type BenefitDiscordSubscriberType = ClosedEnum<
  typeof BenefitDiscordSubscriberType
>;

export type BenefitDiscordSubscriber = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The ID of the benefit.
   */
  id: string;
  type?: "discord" | undefined;
  /**
   * The description of the benefit.
   */
  description: string;
  /**
   * Whether the benefit is selectable when creating a product.
   */
  selectable: boolean;
  /**
   * Whether the benefit is deletable.
   */
  deletable: boolean;
  /**
   * The ID of the organization owning the benefit.
   */
  organizationId: string;
  /**
   * Properties available to subscribers for a benefit of type `discord`.
   */
  properties: BenefitDiscordSubscriberProperties;
};

/** @internal */
export const BenefitDiscordSubscriberType$inboundSchema: z.ZodNativeEnum<
  typeof BenefitDiscordSubscriberType
> = z.nativeEnum(BenefitDiscordSubscriberType);

/** @internal */
export const BenefitDiscordSubscriberType$outboundSchema: z.ZodNativeEnum<
  typeof BenefitDiscordSubscriberType
> = BenefitDiscordSubscriberType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitDiscordSubscriberType$ {
  /** @deprecated use `BenefitDiscordSubscriberType$inboundSchema` instead. */
  export const inboundSchema = BenefitDiscordSubscriberType$inboundSchema;
  /** @deprecated use `BenefitDiscordSubscriberType$outboundSchema` instead. */
  export const outboundSchema = BenefitDiscordSubscriberType$outboundSchema;
}

/** @internal */
export const BenefitDiscordSubscriber$inboundSchema: z.ZodType<
  BenefitDiscordSubscriber,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  id: z.string(),
  type: z.literal("discord").optional(),
  description: z.string(),
  selectable: z.boolean(),
  deletable: z.boolean(),
  organization_id: z.string(),
  properties: BenefitDiscordSubscriberProperties$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "organization_id": "organizationId",
  });
});

/** @internal */
export type BenefitDiscordSubscriber$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  type: "discord";
  description: string;
  selectable: boolean;
  deletable: boolean;
  organization_id: string;
  properties: BenefitDiscordSubscriberProperties$Outbound;
};

/** @internal */
export const BenefitDiscordSubscriber$outboundSchema: z.ZodType<
  BenefitDiscordSubscriber$Outbound,
  z.ZodTypeDef,
  BenefitDiscordSubscriber
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  type: z.literal("discord").default("discord"),
  description: z.string(),
  selectable: z.boolean(),
  deletable: z.boolean(),
  organizationId: z.string(),
  properties: BenefitDiscordSubscriberProperties$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitDiscordSubscriber$ {
  /** @deprecated use `BenefitDiscordSubscriber$inboundSchema` instead. */
  export const inboundSchema = BenefitDiscordSubscriber$inboundSchema;
  /** @deprecated use `BenefitDiscordSubscriber$outboundSchema` instead. */
  export const outboundSchema = BenefitDiscordSubscriber$outboundSchema;
  /** @deprecated use `BenefitDiscordSubscriber$Outbound` instead. */
  export type Outbound = BenefitDiscordSubscriber$Outbound;
}
