/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MetricsTotalsOrders = number | number;

export type MetricsTotalsRevenue = number | number;

export type MetricsTotalsNetRevenue = number | number;

export type MetricsTotalsCumulativeRevenue = number | number;

export type MetricsTotalsNetCumulativeRevenue = number | number;

export type MetricsTotalsAverageOrderValue = number | number;

export type MetricsTotalsNetAverageOrderValue = number | number;

export type MetricsTotalsOneTimeProducts = number | number;

export type MetricsTotalsOneTimeProductsRevenue = number | number;

export type MetricsTotalsOneTimeProductsNetRevenue = number | number;

export type MetricsTotalsNewSubscriptions = number | number;

export type MetricsTotalsNewSubscriptionsRevenue = number | number;

export type MetricsTotalsNewSubscriptionsNetRevenue = number | number;

export type MetricsTotalsRenewedSubscriptions = number | number;

export type MetricsTotalsRenewedSubscriptionsRevenue = number | number;

export type MetricsTotalsRenewedSubscriptionsNetRevenue = number | number;

export type MetricsTotalsActiveSubscriptions = number | number;

export type MetricsTotalsMonthlyRecurringRevenue = number | number;

export type MetricsTotalsCommittedMonthlyRecurringRevenue = number | number;

export type MetricsTotalsCheckouts = number | number;

export type MetricsTotalsSucceededCheckouts = number | number;

export type MetricsTotalsCheckoutsConversion = number | number;

export type MetricsTotalsCanceledSubscriptions = number | number;

export type MetricsTotalsCanceledSubscriptionsCustomerService = number | number;

export type MetricsTotalsCanceledSubscriptionsLowQuality = number | number;

export type MetricsTotalsCanceledSubscriptionsMissingFeatures = number | number;

export type MetricsTotalsCanceledSubscriptionsSwitchedService = number | number;

export type MetricsTotalsCanceledSubscriptionsTooComplex = number | number;

export type MetricsTotalsCanceledSubscriptionsTooExpensive = number | number;

export type MetricsTotalsCanceledSubscriptionsUnused = number | number;

export type MetricsTotalsCanceledSubscriptionsOther = number | number;

export type MetricsTotals = {
  orders: number | number;
  revenue: number | number;
  netRevenue: number | number;
  cumulativeRevenue: number | number;
  netCumulativeRevenue: number | number;
  averageOrderValue: number | number;
  netAverageOrderValue: number | number;
  oneTimeProducts: number | number;
  oneTimeProductsRevenue: number | number;
  oneTimeProductsNetRevenue: number | number;
  newSubscriptions: number | number;
  newSubscriptionsRevenue: number | number;
  newSubscriptionsNetRevenue: number | number;
  renewedSubscriptions: number | number;
  renewedSubscriptionsRevenue: number | number;
  renewedSubscriptionsNetRevenue: number | number;
  activeSubscriptions: number | number;
  monthlyRecurringRevenue: number | number;
  committedMonthlyRecurringRevenue: number | number;
  checkouts: number | number;
  succeededCheckouts: number | number;
  checkoutsConversion: number | number;
  canceledSubscriptions: number | number;
  canceledSubscriptionsCustomerService: number | number;
  canceledSubscriptionsLowQuality: number | number;
  canceledSubscriptionsMissingFeatures: number | number;
  canceledSubscriptionsSwitchedService: number | number;
  canceledSubscriptionsTooComplex: number | number;
  canceledSubscriptionsTooExpensive: number | number;
  canceledSubscriptionsUnused: number | number;
  canceledSubscriptionsOther: number | number;
};

/** @internal */
export const MetricsTotalsOrders$inboundSchema: z.ZodType<
  MetricsTotalsOrders,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsOrders$Outbound = number | number;

/** @internal */
export const MetricsTotalsOrders$outboundSchema: z.ZodType<
  MetricsTotalsOrders$Outbound,
  z.ZodTypeDef,
  MetricsTotalsOrders
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsOrders$ {
  /** @deprecated use `MetricsTotalsOrders$inboundSchema` instead. */
  export const inboundSchema = MetricsTotalsOrders$inboundSchema;
  /** @deprecated use `MetricsTotalsOrders$outboundSchema` instead. */
  export const outboundSchema = MetricsTotalsOrders$outboundSchema;
  /** @deprecated use `MetricsTotalsOrders$Outbound` instead. */
  export type Outbound = MetricsTotalsOrders$Outbound;
}

export function metricsTotalsOrdersToJSON(
  metricsTotalsOrders: MetricsTotalsOrders,
): string {
  return JSON.stringify(
    MetricsTotalsOrders$outboundSchema.parse(metricsTotalsOrders),
  );
}

export function metricsTotalsOrdersFromJSON(
  jsonString: string,
): SafeParseResult<MetricsTotalsOrders, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricsTotalsOrders$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsTotalsOrders' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsRevenue$inboundSchema: z.ZodType<
  MetricsTotalsRevenue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsRevenue$Outbound = number | number;

/** @internal */
export const MetricsTotalsRevenue$outboundSchema: z.ZodType<
  MetricsTotalsRevenue$Outbound,
  z.ZodTypeDef,
  MetricsTotalsRevenue
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsRevenue$ {
  /** @deprecated use `MetricsTotalsRevenue$inboundSchema` instead. */
  export const inboundSchema = MetricsTotalsRevenue$inboundSchema;
  /** @deprecated use `MetricsTotalsRevenue$outboundSchema` instead. */
  export const outboundSchema = MetricsTotalsRevenue$outboundSchema;
  /** @deprecated use `MetricsTotalsRevenue$Outbound` instead. */
  export type Outbound = MetricsTotalsRevenue$Outbound;
}

export function metricsTotalsRevenueToJSON(
  metricsTotalsRevenue: MetricsTotalsRevenue,
): string {
  return JSON.stringify(
    MetricsTotalsRevenue$outboundSchema.parse(metricsTotalsRevenue),
  );
}

export function metricsTotalsRevenueFromJSON(
  jsonString: string,
): SafeParseResult<MetricsTotalsRevenue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricsTotalsRevenue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsTotalsRevenue' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsNetRevenue$inboundSchema: z.ZodType<
  MetricsTotalsNetRevenue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsNetRevenue$Outbound = number | number;

/** @internal */
export const MetricsTotalsNetRevenue$outboundSchema: z.ZodType<
  MetricsTotalsNetRevenue$Outbound,
  z.ZodTypeDef,
  MetricsTotalsNetRevenue
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsNetRevenue$ {
  /** @deprecated use `MetricsTotalsNetRevenue$inboundSchema` instead. */
  export const inboundSchema = MetricsTotalsNetRevenue$inboundSchema;
  /** @deprecated use `MetricsTotalsNetRevenue$outboundSchema` instead. */
  export const outboundSchema = MetricsTotalsNetRevenue$outboundSchema;
  /** @deprecated use `MetricsTotalsNetRevenue$Outbound` instead. */
  export type Outbound = MetricsTotalsNetRevenue$Outbound;
}

export function metricsTotalsNetRevenueToJSON(
  metricsTotalsNetRevenue: MetricsTotalsNetRevenue,
): string {
  return JSON.stringify(
    MetricsTotalsNetRevenue$outboundSchema.parse(metricsTotalsNetRevenue),
  );
}

export function metricsTotalsNetRevenueFromJSON(
  jsonString: string,
): SafeParseResult<MetricsTotalsNetRevenue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricsTotalsNetRevenue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsTotalsNetRevenue' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsCumulativeRevenue$inboundSchema: z.ZodType<
  MetricsTotalsCumulativeRevenue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsCumulativeRevenue$Outbound = number | number;

/** @internal */
export const MetricsTotalsCumulativeRevenue$outboundSchema: z.ZodType<
  MetricsTotalsCumulativeRevenue$Outbound,
  z.ZodTypeDef,
  MetricsTotalsCumulativeRevenue
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsCumulativeRevenue$ {
  /** @deprecated use `MetricsTotalsCumulativeRevenue$inboundSchema` instead. */
  export const inboundSchema = MetricsTotalsCumulativeRevenue$inboundSchema;
  /** @deprecated use `MetricsTotalsCumulativeRevenue$outboundSchema` instead. */
  export const outboundSchema = MetricsTotalsCumulativeRevenue$outboundSchema;
  /** @deprecated use `MetricsTotalsCumulativeRevenue$Outbound` instead. */
  export type Outbound = MetricsTotalsCumulativeRevenue$Outbound;
}

export function metricsTotalsCumulativeRevenueToJSON(
  metricsTotalsCumulativeRevenue: MetricsTotalsCumulativeRevenue,
): string {
  return JSON.stringify(
    MetricsTotalsCumulativeRevenue$outboundSchema.parse(
      metricsTotalsCumulativeRevenue,
    ),
  );
}

export function metricsTotalsCumulativeRevenueFromJSON(
  jsonString: string,
): SafeParseResult<MetricsTotalsCumulativeRevenue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricsTotalsCumulativeRevenue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsTotalsCumulativeRevenue' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsNetCumulativeRevenue$inboundSchema: z.ZodType<
  MetricsTotalsNetCumulativeRevenue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsNetCumulativeRevenue$Outbound = number | number;

/** @internal */
export const MetricsTotalsNetCumulativeRevenue$outboundSchema: z.ZodType<
  MetricsTotalsNetCumulativeRevenue$Outbound,
  z.ZodTypeDef,
  MetricsTotalsNetCumulativeRevenue
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsNetCumulativeRevenue$ {
  /** @deprecated use `MetricsTotalsNetCumulativeRevenue$inboundSchema` instead. */
  export const inboundSchema = MetricsTotalsNetCumulativeRevenue$inboundSchema;
  /** @deprecated use `MetricsTotalsNetCumulativeRevenue$outboundSchema` instead. */
  export const outboundSchema =
    MetricsTotalsNetCumulativeRevenue$outboundSchema;
  /** @deprecated use `MetricsTotalsNetCumulativeRevenue$Outbound` instead. */
  export type Outbound = MetricsTotalsNetCumulativeRevenue$Outbound;
}

export function metricsTotalsNetCumulativeRevenueToJSON(
  metricsTotalsNetCumulativeRevenue: MetricsTotalsNetCumulativeRevenue,
): string {
  return JSON.stringify(
    MetricsTotalsNetCumulativeRevenue$outboundSchema.parse(
      metricsTotalsNetCumulativeRevenue,
    ),
  );
}

export function metricsTotalsNetCumulativeRevenueFromJSON(
  jsonString: string,
): SafeParseResult<MetricsTotalsNetCumulativeRevenue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricsTotalsNetCumulativeRevenue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsTotalsNetCumulativeRevenue' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsAverageOrderValue$inboundSchema: z.ZodType<
  MetricsTotalsAverageOrderValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsAverageOrderValue$Outbound = number | number;

/** @internal */
export const MetricsTotalsAverageOrderValue$outboundSchema: z.ZodType<
  MetricsTotalsAverageOrderValue$Outbound,
  z.ZodTypeDef,
  MetricsTotalsAverageOrderValue
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsAverageOrderValue$ {
  /** @deprecated use `MetricsTotalsAverageOrderValue$inboundSchema` instead. */
  export const inboundSchema = MetricsTotalsAverageOrderValue$inboundSchema;
  /** @deprecated use `MetricsTotalsAverageOrderValue$outboundSchema` instead. */
  export const outboundSchema = MetricsTotalsAverageOrderValue$outboundSchema;
  /** @deprecated use `MetricsTotalsAverageOrderValue$Outbound` instead. */
  export type Outbound = MetricsTotalsAverageOrderValue$Outbound;
}

export function metricsTotalsAverageOrderValueToJSON(
  metricsTotalsAverageOrderValue: MetricsTotalsAverageOrderValue,
): string {
  return JSON.stringify(
    MetricsTotalsAverageOrderValue$outboundSchema.parse(
      metricsTotalsAverageOrderValue,
    ),
  );
}

export function metricsTotalsAverageOrderValueFromJSON(
  jsonString: string,
): SafeParseResult<MetricsTotalsAverageOrderValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricsTotalsAverageOrderValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsTotalsAverageOrderValue' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsNetAverageOrderValue$inboundSchema: z.ZodType<
  MetricsTotalsNetAverageOrderValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsNetAverageOrderValue$Outbound = number | number;

/** @internal */
export const MetricsTotalsNetAverageOrderValue$outboundSchema: z.ZodType<
  MetricsTotalsNetAverageOrderValue$Outbound,
  z.ZodTypeDef,
  MetricsTotalsNetAverageOrderValue
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsNetAverageOrderValue$ {
  /** @deprecated use `MetricsTotalsNetAverageOrderValue$inboundSchema` instead. */
  export const inboundSchema = MetricsTotalsNetAverageOrderValue$inboundSchema;
  /** @deprecated use `MetricsTotalsNetAverageOrderValue$outboundSchema` instead. */
  export const outboundSchema =
    MetricsTotalsNetAverageOrderValue$outboundSchema;
  /** @deprecated use `MetricsTotalsNetAverageOrderValue$Outbound` instead. */
  export type Outbound = MetricsTotalsNetAverageOrderValue$Outbound;
}

export function metricsTotalsNetAverageOrderValueToJSON(
  metricsTotalsNetAverageOrderValue: MetricsTotalsNetAverageOrderValue,
): string {
  return JSON.stringify(
    MetricsTotalsNetAverageOrderValue$outboundSchema.parse(
      metricsTotalsNetAverageOrderValue,
    ),
  );
}

export function metricsTotalsNetAverageOrderValueFromJSON(
  jsonString: string,
): SafeParseResult<MetricsTotalsNetAverageOrderValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricsTotalsNetAverageOrderValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsTotalsNetAverageOrderValue' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsOneTimeProducts$inboundSchema: z.ZodType<
  MetricsTotalsOneTimeProducts,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsOneTimeProducts$Outbound = number | number;

/** @internal */
export const MetricsTotalsOneTimeProducts$outboundSchema: z.ZodType<
  MetricsTotalsOneTimeProducts$Outbound,
  z.ZodTypeDef,
  MetricsTotalsOneTimeProducts
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsOneTimeProducts$ {
  /** @deprecated use `MetricsTotalsOneTimeProducts$inboundSchema` instead. */
  export const inboundSchema = MetricsTotalsOneTimeProducts$inboundSchema;
  /** @deprecated use `MetricsTotalsOneTimeProducts$outboundSchema` instead. */
  export const outboundSchema = MetricsTotalsOneTimeProducts$outboundSchema;
  /** @deprecated use `MetricsTotalsOneTimeProducts$Outbound` instead. */
  export type Outbound = MetricsTotalsOneTimeProducts$Outbound;
}

export function metricsTotalsOneTimeProductsToJSON(
  metricsTotalsOneTimeProducts: MetricsTotalsOneTimeProducts,
): string {
  return JSON.stringify(
    MetricsTotalsOneTimeProducts$outboundSchema.parse(
      metricsTotalsOneTimeProducts,
    ),
  );
}

export function metricsTotalsOneTimeProductsFromJSON(
  jsonString: string,
): SafeParseResult<MetricsTotalsOneTimeProducts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricsTotalsOneTimeProducts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsTotalsOneTimeProducts' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsOneTimeProductsRevenue$inboundSchema: z.ZodType<
  MetricsTotalsOneTimeProductsRevenue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsOneTimeProductsRevenue$Outbound = number | number;

/** @internal */
export const MetricsTotalsOneTimeProductsRevenue$outboundSchema: z.ZodType<
  MetricsTotalsOneTimeProductsRevenue$Outbound,
  z.ZodTypeDef,
  MetricsTotalsOneTimeProductsRevenue
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsOneTimeProductsRevenue$ {
  /** @deprecated use `MetricsTotalsOneTimeProductsRevenue$inboundSchema` instead. */
  export const inboundSchema =
    MetricsTotalsOneTimeProductsRevenue$inboundSchema;
  /** @deprecated use `MetricsTotalsOneTimeProductsRevenue$outboundSchema` instead. */
  export const outboundSchema =
    MetricsTotalsOneTimeProductsRevenue$outboundSchema;
  /** @deprecated use `MetricsTotalsOneTimeProductsRevenue$Outbound` instead. */
  export type Outbound = MetricsTotalsOneTimeProductsRevenue$Outbound;
}

export function metricsTotalsOneTimeProductsRevenueToJSON(
  metricsTotalsOneTimeProductsRevenue: MetricsTotalsOneTimeProductsRevenue,
): string {
  return JSON.stringify(
    MetricsTotalsOneTimeProductsRevenue$outboundSchema.parse(
      metricsTotalsOneTimeProductsRevenue,
    ),
  );
}

export function metricsTotalsOneTimeProductsRevenueFromJSON(
  jsonString: string,
): SafeParseResult<MetricsTotalsOneTimeProductsRevenue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsTotalsOneTimeProductsRevenue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsTotalsOneTimeProductsRevenue' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsOneTimeProductsNetRevenue$inboundSchema: z.ZodType<
  MetricsTotalsOneTimeProductsNetRevenue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsOneTimeProductsNetRevenue$Outbound = number | number;

/** @internal */
export const MetricsTotalsOneTimeProductsNetRevenue$outboundSchema: z.ZodType<
  MetricsTotalsOneTimeProductsNetRevenue$Outbound,
  z.ZodTypeDef,
  MetricsTotalsOneTimeProductsNetRevenue
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsOneTimeProductsNetRevenue$ {
  /** @deprecated use `MetricsTotalsOneTimeProductsNetRevenue$inboundSchema` instead. */
  export const inboundSchema =
    MetricsTotalsOneTimeProductsNetRevenue$inboundSchema;
  /** @deprecated use `MetricsTotalsOneTimeProductsNetRevenue$outboundSchema` instead. */
  export const outboundSchema =
    MetricsTotalsOneTimeProductsNetRevenue$outboundSchema;
  /** @deprecated use `MetricsTotalsOneTimeProductsNetRevenue$Outbound` instead. */
  export type Outbound = MetricsTotalsOneTimeProductsNetRevenue$Outbound;
}

export function metricsTotalsOneTimeProductsNetRevenueToJSON(
  metricsTotalsOneTimeProductsNetRevenue:
    MetricsTotalsOneTimeProductsNetRevenue,
): string {
  return JSON.stringify(
    MetricsTotalsOneTimeProductsNetRevenue$outboundSchema.parse(
      metricsTotalsOneTimeProductsNetRevenue,
    ),
  );
}

export function metricsTotalsOneTimeProductsNetRevenueFromJSON(
  jsonString: string,
): SafeParseResult<MetricsTotalsOneTimeProductsNetRevenue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsTotalsOneTimeProductsNetRevenue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsTotalsOneTimeProductsNetRevenue' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsNewSubscriptions$inboundSchema: z.ZodType<
  MetricsTotalsNewSubscriptions,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsNewSubscriptions$Outbound = number | number;

/** @internal */
export const MetricsTotalsNewSubscriptions$outboundSchema: z.ZodType<
  MetricsTotalsNewSubscriptions$Outbound,
  z.ZodTypeDef,
  MetricsTotalsNewSubscriptions
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsNewSubscriptions$ {
  /** @deprecated use `MetricsTotalsNewSubscriptions$inboundSchema` instead. */
  export const inboundSchema = MetricsTotalsNewSubscriptions$inboundSchema;
  /** @deprecated use `MetricsTotalsNewSubscriptions$outboundSchema` instead. */
  export const outboundSchema = MetricsTotalsNewSubscriptions$outboundSchema;
  /** @deprecated use `MetricsTotalsNewSubscriptions$Outbound` instead. */
  export type Outbound = MetricsTotalsNewSubscriptions$Outbound;
}

export function metricsTotalsNewSubscriptionsToJSON(
  metricsTotalsNewSubscriptions: MetricsTotalsNewSubscriptions,
): string {
  return JSON.stringify(
    MetricsTotalsNewSubscriptions$outboundSchema.parse(
      metricsTotalsNewSubscriptions,
    ),
  );
}

export function metricsTotalsNewSubscriptionsFromJSON(
  jsonString: string,
): SafeParseResult<MetricsTotalsNewSubscriptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricsTotalsNewSubscriptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsTotalsNewSubscriptions' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsNewSubscriptionsRevenue$inboundSchema: z.ZodType<
  MetricsTotalsNewSubscriptionsRevenue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsNewSubscriptionsRevenue$Outbound = number | number;

/** @internal */
export const MetricsTotalsNewSubscriptionsRevenue$outboundSchema: z.ZodType<
  MetricsTotalsNewSubscriptionsRevenue$Outbound,
  z.ZodTypeDef,
  MetricsTotalsNewSubscriptionsRevenue
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsNewSubscriptionsRevenue$ {
  /** @deprecated use `MetricsTotalsNewSubscriptionsRevenue$inboundSchema` instead. */
  export const inboundSchema =
    MetricsTotalsNewSubscriptionsRevenue$inboundSchema;
  /** @deprecated use `MetricsTotalsNewSubscriptionsRevenue$outboundSchema` instead. */
  export const outboundSchema =
    MetricsTotalsNewSubscriptionsRevenue$outboundSchema;
  /** @deprecated use `MetricsTotalsNewSubscriptionsRevenue$Outbound` instead. */
  export type Outbound = MetricsTotalsNewSubscriptionsRevenue$Outbound;
}

export function metricsTotalsNewSubscriptionsRevenueToJSON(
  metricsTotalsNewSubscriptionsRevenue: MetricsTotalsNewSubscriptionsRevenue,
): string {
  return JSON.stringify(
    MetricsTotalsNewSubscriptionsRevenue$outboundSchema.parse(
      metricsTotalsNewSubscriptionsRevenue,
    ),
  );
}

export function metricsTotalsNewSubscriptionsRevenueFromJSON(
  jsonString: string,
): SafeParseResult<MetricsTotalsNewSubscriptionsRevenue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsTotalsNewSubscriptionsRevenue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsTotalsNewSubscriptionsRevenue' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsNewSubscriptionsNetRevenue$inboundSchema: z.ZodType<
  MetricsTotalsNewSubscriptionsNetRevenue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsNewSubscriptionsNetRevenue$Outbound = number | number;

/** @internal */
export const MetricsTotalsNewSubscriptionsNetRevenue$outboundSchema: z.ZodType<
  MetricsTotalsNewSubscriptionsNetRevenue$Outbound,
  z.ZodTypeDef,
  MetricsTotalsNewSubscriptionsNetRevenue
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsNewSubscriptionsNetRevenue$ {
  /** @deprecated use `MetricsTotalsNewSubscriptionsNetRevenue$inboundSchema` instead. */
  export const inboundSchema =
    MetricsTotalsNewSubscriptionsNetRevenue$inboundSchema;
  /** @deprecated use `MetricsTotalsNewSubscriptionsNetRevenue$outboundSchema` instead. */
  export const outboundSchema =
    MetricsTotalsNewSubscriptionsNetRevenue$outboundSchema;
  /** @deprecated use `MetricsTotalsNewSubscriptionsNetRevenue$Outbound` instead. */
  export type Outbound = MetricsTotalsNewSubscriptionsNetRevenue$Outbound;
}

export function metricsTotalsNewSubscriptionsNetRevenueToJSON(
  metricsTotalsNewSubscriptionsNetRevenue:
    MetricsTotalsNewSubscriptionsNetRevenue,
): string {
  return JSON.stringify(
    MetricsTotalsNewSubscriptionsNetRevenue$outboundSchema.parse(
      metricsTotalsNewSubscriptionsNetRevenue,
    ),
  );
}

export function metricsTotalsNewSubscriptionsNetRevenueFromJSON(
  jsonString: string,
): SafeParseResult<
  MetricsTotalsNewSubscriptionsNetRevenue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsTotalsNewSubscriptionsNetRevenue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MetricsTotalsNewSubscriptionsNetRevenue' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsRenewedSubscriptions$inboundSchema: z.ZodType<
  MetricsTotalsRenewedSubscriptions,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsRenewedSubscriptions$Outbound = number | number;

/** @internal */
export const MetricsTotalsRenewedSubscriptions$outboundSchema: z.ZodType<
  MetricsTotalsRenewedSubscriptions$Outbound,
  z.ZodTypeDef,
  MetricsTotalsRenewedSubscriptions
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsRenewedSubscriptions$ {
  /** @deprecated use `MetricsTotalsRenewedSubscriptions$inboundSchema` instead. */
  export const inboundSchema = MetricsTotalsRenewedSubscriptions$inboundSchema;
  /** @deprecated use `MetricsTotalsRenewedSubscriptions$outboundSchema` instead. */
  export const outboundSchema =
    MetricsTotalsRenewedSubscriptions$outboundSchema;
  /** @deprecated use `MetricsTotalsRenewedSubscriptions$Outbound` instead. */
  export type Outbound = MetricsTotalsRenewedSubscriptions$Outbound;
}

export function metricsTotalsRenewedSubscriptionsToJSON(
  metricsTotalsRenewedSubscriptions: MetricsTotalsRenewedSubscriptions,
): string {
  return JSON.stringify(
    MetricsTotalsRenewedSubscriptions$outboundSchema.parse(
      metricsTotalsRenewedSubscriptions,
    ),
  );
}

export function metricsTotalsRenewedSubscriptionsFromJSON(
  jsonString: string,
): SafeParseResult<MetricsTotalsRenewedSubscriptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricsTotalsRenewedSubscriptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsTotalsRenewedSubscriptions' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsRenewedSubscriptionsRevenue$inboundSchema: z.ZodType<
  MetricsTotalsRenewedSubscriptionsRevenue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsRenewedSubscriptionsRevenue$Outbound = number | number;

/** @internal */
export const MetricsTotalsRenewedSubscriptionsRevenue$outboundSchema: z.ZodType<
  MetricsTotalsRenewedSubscriptionsRevenue$Outbound,
  z.ZodTypeDef,
  MetricsTotalsRenewedSubscriptionsRevenue
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsRenewedSubscriptionsRevenue$ {
  /** @deprecated use `MetricsTotalsRenewedSubscriptionsRevenue$inboundSchema` instead. */
  export const inboundSchema =
    MetricsTotalsRenewedSubscriptionsRevenue$inboundSchema;
  /** @deprecated use `MetricsTotalsRenewedSubscriptionsRevenue$outboundSchema` instead. */
  export const outboundSchema =
    MetricsTotalsRenewedSubscriptionsRevenue$outboundSchema;
  /** @deprecated use `MetricsTotalsRenewedSubscriptionsRevenue$Outbound` instead. */
  export type Outbound = MetricsTotalsRenewedSubscriptionsRevenue$Outbound;
}

export function metricsTotalsRenewedSubscriptionsRevenueToJSON(
  metricsTotalsRenewedSubscriptionsRevenue:
    MetricsTotalsRenewedSubscriptionsRevenue,
): string {
  return JSON.stringify(
    MetricsTotalsRenewedSubscriptionsRevenue$outboundSchema.parse(
      metricsTotalsRenewedSubscriptionsRevenue,
    ),
  );
}

export function metricsTotalsRenewedSubscriptionsRevenueFromJSON(
  jsonString: string,
): SafeParseResult<
  MetricsTotalsRenewedSubscriptionsRevenue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsTotalsRenewedSubscriptionsRevenue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MetricsTotalsRenewedSubscriptionsRevenue' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsRenewedSubscriptionsNetRevenue$inboundSchema:
  z.ZodType<
    MetricsTotalsRenewedSubscriptionsNetRevenue,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsRenewedSubscriptionsNetRevenue$Outbound =
  | number
  | number;

/** @internal */
export const MetricsTotalsRenewedSubscriptionsNetRevenue$outboundSchema:
  z.ZodType<
    MetricsTotalsRenewedSubscriptionsNetRevenue$Outbound,
    z.ZodTypeDef,
    MetricsTotalsRenewedSubscriptionsNetRevenue
  > = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsRenewedSubscriptionsNetRevenue$ {
  /** @deprecated use `MetricsTotalsRenewedSubscriptionsNetRevenue$inboundSchema` instead. */
  export const inboundSchema =
    MetricsTotalsRenewedSubscriptionsNetRevenue$inboundSchema;
  /** @deprecated use `MetricsTotalsRenewedSubscriptionsNetRevenue$outboundSchema` instead. */
  export const outboundSchema =
    MetricsTotalsRenewedSubscriptionsNetRevenue$outboundSchema;
  /** @deprecated use `MetricsTotalsRenewedSubscriptionsNetRevenue$Outbound` instead. */
  export type Outbound = MetricsTotalsRenewedSubscriptionsNetRevenue$Outbound;
}

export function metricsTotalsRenewedSubscriptionsNetRevenueToJSON(
  metricsTotalsRenewedSubscriptionsNetRevenue:
    MetricsTotalsRenewedSubscriptionsNetRevenue,
): string {
  return JSON.stringify(
    MetricsTotalsRenewedSubscriptionsNetRevenue$outboundSchema.parse(
      metricsTotalsRenewedSubscriptionsNetRevenue,
    ),
  );
}

export function metricsTotalsRenewedSubscriptionsNetRevenueFromJSON(
  jsonString: string,
): SafeParseResult<
  MetricsTotalsRenewedSubscriptionsNetRevenue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsTotalsRenewedSubscriptionsNetRevenue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MetricsTotalsRenewedSubscriptionsNetRevenue' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsActiveSubscriptions$inboundSchema: z.ZodType<
  MetricsTotalsActiveSubscriptions,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsActiveSubscriptions$Outbound = number | number;

/** @internal */
export const MetricsTotalsActiveSubscriptions$outboundSchema: z.ZodType<
  MetricsTotalsActiveSubscriptions$Outbound,
  z.ZodTypeDef,
  MetricsTotalsActiveSubscriptions
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsActiveSubscriptions$ {
  /** @deprecated use `MetricsTotalsActiveSubscriptions$inboundSchema` instead. */
  export const inboundSchema = MetricsTotalsActiveSubscriptions$inboundSchema;
  /** @deprecated use `MetricsTotalsActiveSubscriptions$outboundSchema` instead. */
  export const outboundSchema = MetricsTotalsActiveSubscriptions$outboundSchema;
  /** @deprecated use `MetricsTotalsActiveSubscriptions$Outbound` instead. */
  export type Outbound = MetricsTotalsActiveSubscriptions$Outbound;
}

export function metricsTotalsActiveSubscriptionsToJSON(
  metricsTotalsActiveSubscriptions: MetricsTotalsActiveSubscriptions,
): string {
  return JSON.stringify(
    MetricsTotalsActiveSubscriptions$outboundSchema.parse(
      metricsTotalsActiveSubscriptions,
    ),
  );
}

export function metricsTotalsActiveSubscriptionsFromJSON(
  jsonString: string,
): SafeParseResult<MetricsTotalsActiveSubscriptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricsTotalsActiveSubscriptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsTotalsActiveSubscriptions' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsMonthlyRecurringRevenue$inboundSchema: z.ZodType<
  MetricsTotalsMonthlyRecurringRevenue,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsMonthlyRecurringRevenue$Outbound = number | number;

/** @internal */
export const MetricsTotalsMonthlyRecurringRevenue$outboundSchema: z.ZodType<
  MetricsTotalsMonthlyRecurringRevenue$Outbound,
  z.ZodTypeDef,
  MetricsTotalsMonthlyRecurringRevenue
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsMonthlyRecurringRevenue$ {
  /** @deprecated use `MetricsTotalsMonthlyRecurringRevenue$inboundSchema` instead. */
  export const inboundSchema =
    MetricsTotalsMonthlyRecurringRevenue$inboundSchema;
  /** @deprecated use `MetricsTotalsMonthlyRecurringRevenue$outboundSchema` instead. */
  export const outboundSchema =
    MetricsTotalsMonthlyRecurringRevenue$outboundSchema;
  /** @deprecated use `MetricsTotalsMonthlyRecurringRevenue$Outbound` instead. */
  export type Outbound = MetricsTotalsMonthlyRecurringRevenue$Outbound;
}

export function metricsTotalsMonthlyRecurringRevenueToJSON(
  metricsTotalsMonthlyRecurringRevenue: MetricsTotalsMonthlyRecurringRevenue,
): string {
  return JSON.stringify(
    MetricsTotalsMonthlyRecurringRevenue$outboundSchema.parse(
      metricsTotalsMonthlyRecurringRevenue,
    ),
  );
}

export function metricsTotalsMonthlyRecurringRevenueFromJSON(
  jsonString: string,
): SafeParseResult<MetricsTotalsMonthlyRecurringRevenue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsTotalsMonthlyRecurringRevenue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsTotalsMonthlyRecurringRevenue' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsCommittedMonthlyRecurringRevenue$inboundSchema:
  z.ZodType<
    MetricsTotalsCommittedMonthlyRecurringRevenue,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsCommittedMonthlyRecurringRevenue$Outbound =
  | number
  | number;

/** @internal */
export const MetricsTotalsCommittedMonthlyRecurringRevenue$outboundSchema:
  z.ZodType<
    MetricsTotalsCommittedMonthlyRecurringRevenue$Outbound,
    z.ZodTypeDef,
    MetricsTotalsCommittedMonthlyRecurringRevenue
  > = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsCommittedMonthlyRecurringRevenue$ {
  /** @deprecated use `MetricsTotalsCommittedMonthlyRecurringRevenue$inboundSchema` instead. */
  export const inboundSchema =
    MetricsTotalsCommittedMonthlyRecurringRevenue$inboundSchema;
  /** @deprecated use `MetricsTotalsCommittedMonthlyRecurringRevenue$outboundSchema` instead. */
  export const outboundSchema =
    MetricsTotalsCommittedMonthlyRecurringRevenue$outboundSchema;
  /** @deprecated use `MetricsTotalsCommittedMonthlyRecurringRevenue$Outbound` instead. */
  export type Outbound = MetricsTotalsCommittedMonthlyRecurringRevenue$Outbound;
}

export function metricsTotalsCommittedMonthlyRecurringRevenueToJSON(
  metricsTotalsCommittedMonthlyRecurringRevenue:
    MetricsTotalsCommittedMonthlyRecurringRevenue,
): string {
  return JSON.stringify(
    MetricsTotalsCommittedMonthlyRecurringRevenue$outboundSchema.parse(
      metricsTotalsCommittedMonthlyRecurringRevenue,
    ),
  );
}

export function metricsTotalsCommittedMonthlyRecurringRevenueFromJSON(
  jsonString: string,
): SafeParseResult<
  MetricsTotalsCommittedMonthlyRecurringRevenue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsTotalsCommittedMonthlyRecurringRevenue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MetricsTotalsCommittedMonthlyRecurringRevenue' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsCheckouts$inboundSchema: z.ZodType<
  MetricsTotalsCheckouts,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsCheckouts$Outbound = number | number;

/** @internal */
export const MetricsTotalsCheckouts$outboundSchema: z.ZodType<
  MetricsTotalsCheckouts$Outbound,
  z.ZodTypeDef,
  MetricsTotalsCheckouts
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsCheckouts$ {
  /** @deprecated use `MetricsTotalsCheckouts$inboundSchema` instead. */
  export const inboundSchema = MetricsTotalsCheckouts$inboundSchema;
  /** @deprecated use `MetricsTotalsCheckouts$outboundSchema` instead. */
  export const outboundSchema = MetricsTotalsCheckouts$outboundSchema;
  /** @deprecated use `MetricsTotalsCheckouts$Outbound` instead. */
  export type Outbound = MetricsTotalsCheckouts$Outbound;
}

export function metricsTotalsCheckoutsToJSON(
  metricsTotalsCheckouts: MetricsTotalsCheckouts,
): string {
  return JSON.stringify(
    MetricsTotalsCheckouts$outboundSchema.parse(metricsTotalsCheckouts),
  );
}

export function metricsTotalsCheckoutsFromJSON(
  jsonString: string,
): SafeParseResult<MetricsTotalsCheckouts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricsTotalsCheckouts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsTotalsCheckouts' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsSucceededCheckouts$inboundSchema: z.ZodType<
  MetricsTotalsSucceededCheckouts,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsSucceededCheckouts$Outbound = number | number;

/** @internal */
export const MetricsTotalsSucceededCheckouts$outboundSchema: z.ZodType<
  MetricsTotalsSucceededCheckouts$Outbound,
  z.ZodTypeDef,
  MetricsTotalsSucceededCheckouts
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsSucceededCheckouts$ {
  /** @deprecated use `MetricsTotalsSucceededCheckouts$inboundSchema` instead. */
  export const inboundSchema = MetricsTotalsSucceededCheckouts$inboundSchema;
  /** @deprecated use `MetricsTotalsSucceededCheckouts$outboundSchema` instead. */
  export const outboundSchema = MetricsTotalsSucceededCheckouts$outboundSchema;
  /** @deprecated use `MetricsTotalsSucceededCheckouts$Outbound` instead. */
  export type Outbound = MetricsTotalsSucceededCheckouts$Outbound;
}

export function metricsTotalsSucceededCheckoutsToJSON(
  metricsTotalsSucceededCheckouts: MetricsTotalsSucceededCheckouts,
): string {
  return JSON.stringify(
    MetricsTotalsSucceededCheckouts$outboundSchema.parse(
      metricsTotalsSucceededCheckouts,
    ),
  );
}

export function metricsTotalsSucceededCheckoutsFromJSON(
  jsonString: string,
): SafeParseResult<MetricsTotalsSucceededCheckouts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricsTotalsSucceededCheckouts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsTotalsSucceededCheckouts' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsCheckoutsConversion$inboundSchema: z.ZodType<
  MetricsTotalsCheckoutsConversion,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsCheckoutsConversion$Outbound = number | number;

/** @internal */
export const MetricsTotalsCheckoutsConversion$outboundSchema: z.ZodType<
  MetricsTotalsCheckoutsConversion$Outbound,
  z.ZodTypeDef,
  MetricsTotalsCheckoutsConversion
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsCheckoutsConversion$ {
  /** @deprecated use `MetricsTotalsCheckoutsConversion$inboundSchema` instead. */
  export const inboundSchema = MetricsTotalsCheckoutsConversion$inboundSchema;
  /** @deprecated use `MetricsTotalsCheckoutsConversion$outboundSchema` instead. */
  export const outboundSchema = MetricsTotalsCheckoutsConversion$outboundSchema;
  /** @deprecated use `MetricsTotalsCheckoutsConversion$Outbound` instead. */
  export type Outbound = MetricsTotalsCheckoutsConversion$Outbound;
}

export function metricsTotalsCheckoutsConversionToJSON(
  metricsTotalsCheckoutsConversion: MetricsTotalsCheckoutsConversion,
): string {
  return JSON.stringify(
    MetricsTotalsCheckoutsConversion$outboundSchema.parse(
      metricsTotalsCheckoutsConversion,
    ),
  );
}

export function metricsTotalsCheckoutsConversionFromJSON(
  jsonString: string,
): SafeParseResult<MetricsTotalsCheckoutsConversion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricsTotalsCheckoutsConversion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsTotalsCheckoutsConversion' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsCanceledSubscriptions$inboundSchema: z.ZodType<
  MetricsTotalsCanceledSubscriptions,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsCanceledSubscriptions$Outbound = number | number;

/** @internal */
export const MetricsTotalsCanceledSubscriptions$outboundSchema: z.ZodType<
  MetricsTotalsCanceledSubscriptions$Outbound,
  z.ZodTypeDef,
  MetricsTotalsCanceledSubscriptions
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsCanceledSubscriptions$ {
  /** @deprecated use `MetricsTotalsCanceledSubscriptions$inboundSchema` instead. */
  export const inboundSchema = MetricsTotalsCanceledSubscriptions$inboundSchema;
  /** @deprecated use `MetricsTotalsCanceledSubscriptions$outboundSchema` instead. */
  export const outboundSchema =
    MetricsTotalsCanceledSubscriptions$outboundSchema;
  /** @deprecated use `MetricsTotalsCanceledSubscriptions$Outbound` instead. */
  export type Outbound = MetricsTotalsCanceledSubscriptions$Outbound;
}

export function metricsTotalsCanceledSubscriptionsToJSON(
  metricsTotalsCanceledSubscriptions: MetricsTotalsCanceledSubscriptions,
): string {
  return JSON.stringify(
    MetricsTotalsCanceledSubscriptions$outboundSchema.parse(
      metricsTotalsCanceledSubscriptions,
    ),
  );
}

export function metricsTotalsCanceledSubscriptionsFromJSON(
  jsonString: string,
): SafeParseResult<MetricsTotalsCanceledSubscriptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsTotalsCanceledSubscriptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsTotalsCanceledSubscriptions' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsCanceledSubscriptionsCustomerService$inboundSchema:
  z.ZodType<
    MetricsTotalsCanceledSubscriptionsCustomerService,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsCanceledSubscriptionsCustomerService$Outbound =
  | number
  | number;

/** @internal */
export const MetricsTotalsCanceledSubscriptionsCustomerService$outboundSchema:
  z.ZodType<
    MetricsTotalsCanceledSubscriptionsCustomerService$Outbound,
    z.ZodTypeDef,
    MetricsTotalsCanceledSubscriptionsCustomerService
  > = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsCanceledSubscriptionsCustomerService$ {
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsCustomerService$inboundSchema` instead. */
  export const inboundSchema =
    MetricsTotalsCanceledSubscriptionsCustomerService$inboundSchema;
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsCustomerService$outboundSchema` instead. */
  export const outboundSchema =
    MetricsTotalsCanceledSubscriptionsCustomerService$outboundSchema;
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsCustomerService$Outbound` instead. */
  export type Outbound =
    MetricsTotalsCanceledSubscriptionsCustomerService$Outbound;
}

export function metricsTotalsCanceledSubscriptionsCustomerServiceToJSON(
  metricsTotalsCanceledSubscriptionsCustomerService:
    MetricsTotalsCanceledSubscriptionsCustomerService,
): string {
  return JSON.stringify(
    MetricsTotalsCanceledSubscriptionsCustomerService$outboundSchema.parse(
      metricsTotalsCanceledSubscriptionsCustomerService,
    ),
  );
}

export function metricsTotalsCanceledSubscriptionsCustomerServiceFromJSON(
  jsonString: string,
): SafeParseResult<
  MetricsTotalsCanceledSubscriptionsCustomerService,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsTotalsCanceledSubscriptionsCustomerService$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MetricsTotalsCanceledSubscriptionsCustomerService' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsCanceledSubscriptionsLowQuality$inboundSchema:
  z.ZodType<
    MetricsTotalsCanceledSubscriptionsLowQuality,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsCanceledSubscriptionsLowQuality$Outbound =
  | number
  | number;

/** @internal */
export const MetricsTotalsCanceledSubscriptionsLowQuality$outboundSchema:
  z.ZodType<
    MetricsTotalsCanceledSubscriptionsLowQuality$Outbound,
    z.ZodTypeDef,
    MetricsTotalsCanceledSubscriptionsLowQuality
  > = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsCanceledSubscriptionsLowQuality$ {
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsLowQuality$inboundSchema` instead. */
  export const inboundSchema =
    MetricsTotalsCanceledSubscriptionsLowQuality$inboundSchema;
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsLowQuality$outboundSchema` instead. */
  export const outboundSchema =
    MetricsTotalsCanceledSubscriptionsLowQuality$outboundSchema;
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsLowQuality$Outbound` instead. */
  export type Outbound = MetricsTotalsCanceledSubscriptionsLowQuality$Outbound;
}

export function metricsTotalsCanceledSubscriptionsLowQualityToJSON(
  metricsTotalsCanceledSubscriptionsLowQuality:
    MetricsTotalsCanceledSubscriptionsLowQuality,
): string {
  return JSON.stringify(
    MetricsTotalsCanceledSubscriptionsLowQuality$outboundSchema.parse(
      metricsTotalsCanceledSubscriptionsLowQuality,
    ),
  );
}

export function metricsTotalsCanceledSubscriptionsLowQualityFromJSON(
  jsonString: string,
): SafeParseResult<
  MetricsTotalsCanceledSubscriptionsLowQuality,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsTotalsCanceledSubscriptionsLowQuality$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MetricsTotalsCanceledSubscriptionsLowQuality' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsCanceledSubscriptionsMissingFeatures$inboundSchema:
  z.ZodType<
    MetricsTotalsCanceledSubscriptionsMissingFeatures,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsCanceledSubscriptionsMissingFeatures$Outbound =
  | number
  | number;

/** @internal */
export const MetricsTotalsCanceledSubscriptionsMissingFeatures$outboundSchema:
  z.ZodType<
    MetricsTotalsCanceledSubscriptionsMissingFeatures$Outbound,
    z.ZodTypeDef,
    MetricsTotalsCanceledSubscriptionsMissingFeatures
  > = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsCanceledSubscriptionsMissingFeatures$ {
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsMissingFeatures$inboundSchema` instead. */
  export const inboundSchema =
    MetricsTotalsCanceledSubscriptionsMissingFeatures$inboundSchema;
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsMissingFeatures$outboundSchema` instead. */
  export const outboundSchema =
    MetricsTotalsCanceledSubscriptionsMissingFeatures$outboundSchema;
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsMissingFeatures$Outbound` instead. */
  export type Outbound =
    MetricsTotalsCanceledSubscriptionsMissingFeatures$Outbound;
}

export function metricsTotalsCanceledSubscriptionsMissingFeaturesToJSON(
  metricsTotalsCanceledSubscriptionsMissingFeatures:
    MetricsTotalsCanceledSubscriptionsMissingFeatures,
): string {
  return JSON.stringify(
    MetricsTotalsCanceledSubscriptionsMissingFeatures$outboundSchema.parse(
      metricsTotalsCanceledSubscriptionsMissingFeatures,
    ),
  );
}

export function metricsTotalsCanceledSubscriptionsMissingFeaturesFromJSON(
  jsonString: string,
): SafeParseResult<
  MetricsTotalsCanceledSubscriptionsMissingFeatures,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsTotalsCanceledSubscriptionsMissingFeatures$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MetricsTotalsCanceledSubscriptionsMissingFeatures' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsCanceledSubscriptionsSwitchedService$inboundSchema:
  z.ZodType<
    MetricsTotalsCanceledSubscriptionsSwitchedService,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsCanceledSubscriptionsSwitchedService$Outbound =
  | number
  | number;

/** @internal */
export const MetricsTotalsCanceledSubscriptionsSwitchedService$outboundSchema:
  z.ZodType<
    MetricsTotalsCanceledSubscriptionsSwitchedService$Outbound,
    z.ZodTypeDef,
    MetricsTotalsCanceledSubscriptionsSwitchedService
  > = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsCanceledSubscriptionsSwitchedService$ {
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsSwitchedService$inboundSchema` instead. */
  export const inboundSchema =
    MetricsTotalsCanceledSubscriptionsSwitchedService$inboundSchema;
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsSwitchedService$outboundSchema` instead. */
  export const outboundSchema =
    MetricsTotalsCanceledSubscriptionsSwitchedService$outboundSchema;
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsSwitchedService$Outbound` instead. */
  export type Outbound =
    MetricsTotalsCanceledSubscriptionsSwitchedService$Outbound;
}

export function metricsTotalsCanceledSubscriptionsSwitchedServiceToJSON(
  metricsTotalsCanceledSubscriptionsSwitchedService:
    MetricsTotalsCanceledSubscriptionsSwitchedService,
): string {
  return JSON.stringify(
    MetricsTotalsCanceledSubscriptionsSwitchedService$outboundSchema.parse(
      metricsTotalsCanceledSubscriptionsSwitchedService,
    ),
  );
}

export function metricsTotalsCanceledSubscriptionsSwitchedServiceFromJSON(
  jsonString: string,
): SafeParseResult<
  MetricsTotalsCanceledSubscriptionsSwitchedService,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsTotalsCanceledSubscriptionsSwitchedService$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MetricsTotalsCanceledSubscriptionsSwitchedService' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsCanceledSubscriptionsTooComplex$inboundSchema:
  z.ZodType<
    MetricsTotalsCanceledSubscriptionsTooComplex,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsCanceledSubscriptionsTooComplex$Outbound =
  | number
  | number;

/** @internal */
export const MetricsTotalsCanceledSubscriptionsTooComplex$outboundSchema:
  z.ZodType<
    MetricsTotalsCanceledSubscriptionsTooComplex$Outbound,
    z.ZodTypeDef,
    MetricsTotalsCanceledSubscriptionsTooComplex
  > = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsCanceledSubscriptionsTooComplex$ {
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsTooComplex$inboundSchema` instead. */
  export const inboundSchema =
    MetricsTotalsCanceledSubscriptionsTooComplex$inboundSchema;
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsTooComplex$outboundSchema` instead. */
  export const outboundSchema =
    MetricsTotalsCanceledSubscriptionsTooComplex$outboundSchema;
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsTooComplex$Outbound` instead. */
  export type Outbound = MetricsTotalsCanceledSubscriptionsTooComplex$Outbound;
}

export function metricsTotalsCanceledSubscriptionsTooComplexToJSON(
  metricsTotalsCanceledSubscriptionsTooComplex:
    MetricsTotalsCanceledSubscriptionsTooComplex,
): string {
  return JSON.stringify(
    MetricsTotalsCanceledSubscriptionsTooComplex$outboundSchema.parse(
      metricsTotalsCanceledSubscriptionsTooComplex,
    ),
  );
}

export function metricsTotalsCanceledSubscriptionsTooComplexFromJSON(
  jsonString: string,
): SafeParseResult<
  MetricsTotalsCanceledSubscriptionsTooComplex,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsTotalsCanceledSubscriptionsTooComplex$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MetricsTotalsCanceledSubscriptionsTooComplex' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsCanceledSubscriptionsTooExpensive$inboundSchema:
  z.ZodType<
    MetricsTotalsCanceledSubscriptionsTooExpensive,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsCanceledSubscriptionsTooExpensive$Outbound =
  | number
  | number;

/** @internal */
export const MetricsTotalsCanceledSubscriptionsTooExpensive$outboundSchema:
  z.ZodType<
    MetricsTotalsCanceledSubscriptionsTooExpensive$Outbound,
    z.ZodTypeDef,
    MetricsTotalsCanceledSubscriptionsTooExpensive
  > = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsCanceledSubscriptionsTooExpensive$ {
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsTooExpensive$inboundSchema` instead. */
  export const inboundSchema =
    MetricsTotalsCanceledSubscriptionsTooExpensive$inboundSchema;
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsTooExpensive$outboundSchema` instead. */
  export const outboundSchema =
    MetricsTotalsCanceledSubscriptionsTooExpensive$outboundSchema;
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsTooExpensive$Outbound` instead. */
  export type Outbound =
    MetricsTotalsCanceledSubscriptionsTooExpensive$Outbound;
}

export function metricsTotalsCanceledSubscriptionsTooExpensiveToJSON(
  metricsTotalsCanceledSubscriptionsTooExpensive:
    MetricsTotalsCanceledSubscriptionsTooExpensive,
): string {
  return JSON.stringify(
    MetricsTotalsCanceledSubscriptionsTooExpensive$outboundSchema.parse(
      metricsTotalsCanceledSubscriptionsTooExpensive,
    ),
  );
}

export function metricsTotalsCanceledSubscriptionsTooExpensiveFromJSON(
  jsonString: string,
): SafeParseResult<
  MetricsTotalsCanceledSubscriptionsTooExpensive,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsTotalsCanceledSubscriptionsTooExpensive$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MetricsTotalsCanceledSubscriptionsTooExpensive' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsCanceledSubscriptionsUnused$inboundSchema: z.ZodType<
  MetricsTotalsCanceledSubscriptionsUnused,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsCanceledSubscriptionsUnused$Outbound = number | number;

/** @internal */
export const MetricsTotalsCanceledSubscriptionsUnused$outboundSchema: z.ZodType<
  MetricsTotalsCanceledSubscriptionsUnused$Outbound,
  z.ZodTypeDef,
  MetricsTotalsCanceledSubscriptionsUnused
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsCanceledSubscriptionsUnused$ {
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsUnused$inboundSchema` instead. */
  export const inboundSchema =
    MetricsTotalsCanceledSubscriptionsUnused$inboundSchema;
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsUnused$outboundSchema` instead. */
  export const outboundSchema =
    MetricsTotalsCanceledSubscriptionsUnused$outboundSchema;
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsUnused$Outbound` instead. */
  export type Outbound = MetricsTotalsCanceledSubscriptionsUnused$Outbound;
}

export function metricsTotalsCanceledSubscriptionsUnusedToJSON(
  metricsTotalsCanceledSubscriptionsUnused:
    MetricsTotalsCanceledSubscriptionsUnused,
): string {
  return JSON.stringify(
    MetricsTotalsCanceledSubscriptionsUnused$outboundSchema.parse(
      metricsTotalsCanceledSubscriptionsUnused,
    ),
  );
}

export function metricsTotalsCanceledSubscriptionsUnusedFromJSON(
  jsonString: string,
): SafeParseResult<
  MetricsTotalsCanceledSubscriptionsUnused,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsTotalsCanceledSubscriptionsUnused$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MetricsTotalsCanceledSubscriptionsUnused' from JSON`,
  );
}

/** @internal */
export const MetricsTotalsCanceledSubscriptionsOther$inboundSchema: z.ZodType<
  MetricsTotalsCanceledSubscriptionsOther,
  z.ZodTypeDef,
  unknown
> = z.union([z.number().int(), z.number()]);

/** @internal */
export type MetricsTotalsCanceledSubscriptionsOther$Outbound = number | number;

/** @internal */
export const MetricsTotalsCanceledSubscriptionsOther$outboundSchema: z.ZodType<
  MetricsTotalsCanceledSubscriptionsOther$Outbound,
  z.ZodTypeDef,
  MetricsTotalsCanceledSubscriptionsOther
> = z.union([z.number().int(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotalsCanceledSubscriptionsOther$ {
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsOther$inboundSchema` instead. */
  export const inboundSchema =
    MetricsTotalsCanceledSubscriptionsOther$inboundSchema;
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsOther$outboundSchema` instead. */
  export const outboundSchema =
    MetricsTotalsCanceledSubscriptionsOther$outboundSchema;
  /** @deprecated use `MetricsTotalsCanceledSubscriptionsOther$Outbound` instead. */
  export type Outbound = MetricsTotalsCanceledSubscriptionsOther$Outbound;
}

export function metricsTotalsCanceledSubscriptionsOtherToJSON(
  metricsTotalsCanceledSubscriptionsOther:
    MetricsTotalsCanceledSubscriptionsOther,
): string {
  return JSON.stringify(
    MetricsTotalsCanceledSubscriptionsOther$outboundSchema.parse(
      metricsTotalsCanceledSubscriptionsOther,
    ),
  );
}

export function metricsTotalsCanceledSubscriptionsOtherFromJSON(
  jsonString: string,
): SafeParseResult<
  MetricsTotalsCanceledSubscriptionsOther,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MetricsTotalsCanceledSubscriptionsOther$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MetricsTotalsCanceledSubscriptionsOther' from JSON`,
  );
}

/** @internal */
export const MetricsTotals$inboundSchema: z.ZodType<
  MetricsTotals,
  z.ZodTypeDef,
  unknown
> = z.object({
  orders: z.union([z.number().int(), z.number()]),
  revenue: z.union([z.number().int(), z.number()]),
  net_revenue: z.union([z.number().int(), z.number()]),
  cumulative_revenue: z.union([z.number().int(), z.number()]),
  net_cumulative_revenue: z.union([z.number().int(), z.number()]),
  average_order_value: z.union([z.number().int(), z.number()]),
  net_average_order_value: z.union([z.number().int(), z.number()]),
  one_time_products: z.union([z.number().int(), z.number()]),
  one_time_products_revenue: z.union([z.number().int(), z.number()]),
  one_time_products_net_revenue: z.union([z.number().int(), z.number()]),
  new_subscriptions: z.union([z.number().int(), z.number()]),
  new_subscriptions_revenue: z.union([z.number().int(), z.number()]),
  new_subscriptions_net_revenue: z.union([z.number().int(), z.number()]),
  renewed_subscriptions: z.union([z.number().int(), z.number()]),
  renewed_subscriptions_revenue: z.union([z.number().int(), z.number()]),
  renewed_subscriptions_net_revenue: z.union([z.number().int(), z.number()]),
  active_subscriptions: z.union([z.number().int(), z.number()]),
  monthly_recurring_revenue: z.union([z.number().int(), z.number()]),
  committed_monthly_recurring_revenue: z.union([z.number().int(), z.number()]),
  checkouts: z.union([z.number().int(), z.number()]),
  succeeded_checkouts: z.union([z.number().int(), z.number()]),
  checkouts_conversion: z.union([z.number().int(), z.number()]),
  canceled_subscriptions: z.union([z.number().int(), z.number()]),
  canceled_subscriptions_customer_service: z.union([
    z.number().int(),
    z.number(),
  ]),
  canceled_subscriptions_low_quality: z.union([z.number().int(), z.number()]),
  canceled_subscriptions_missing_features: z.union([
    z.number().int(),
    z.number(),
  ]),
  canceled_subscriptions_switched_service: z.union([
    z.number().int(),
    z.number(),
  ]),
  canceled_subscriptions_too_complex: z.union([z.number().int(), z.number()]),
  canceled_subscriptions_too_expensive: z.union([z.number().int(), z.number()]),
  canceled_subscriptions_unused: z.union([z.number().int(), z.number()]),
  canceled_subscriptions_other: z.union([z.number().int(), z.number()]),
}).transform((v) => {
  return remap$(v, {
    "net_revenue": "netRevenue",
    "cumulative_revenue": "cumulativeRevenue",
    "net_cumulative_revenue": "netCumulativeRevenue",
    "average_order_value": "averageOrderValue",
    "net_average_order_value": "netAverageOrderValue",
    "one_time_products": "oneTimeProducts",
    "one_time_products_revenue": "oneTimeProductsRevenue",
    "one_time_products_net_revenue": "oneTimeProductsNetRevenue",
    "new_subscriptions": "newSubscriptions",
    "new_subscriptions_revenue": "newSubscriptionsRevenue",
    "new_subscriptions_net_revenue": "newSubscriptionsNetRevenue",
    "renewed_subscriptions": "renewedSubscriptions",
    "renewed_subscriptions_revenue": "renewedSubscriptionsRevenue",
    "renewed_subscriptions_net_revenue": "renewedSubscriptionsNetRevenue",
    "active_subscriptions": "activeSubscriptions",
    "monthly_recurring_revenue": "monthlyRecurringRevenue",
    "committed_monthly_recurring_revenue": "committedMonthlyRecurringRevenue",
    "succeeded_checkouts": "succeededCheckouts",
    "checkouts_conversion": "checkoutsConversion",
    "canceled_subscriptions": "canceledSubscriptions",
    "canceled_subscriptions_customer_service":
      "canceledSubscriptionsCustomerService",
    "canceled_subscriptions_low_quality": "canceledSubscriptionsLowQuality",
    "canceled_subscriptions_missing_features":
      "canceledSubscriptionsMissingFeatures",
    "canceled_subscriptions_switched_service":
      "canceledSubscriptionsSwitchedService",
    "canceled_subscriptions_too_complex": "canceledSubscriptionsTooComplex",
    "canceled_subscriptions_too_expensive": "canceledSubscriptionsTooExpensive",
    "canceled_subscriptions_unused": "canceledSubscriptionsUnused",
    "canceled_subscriptions_other": "canceledSubscriptionsOther",
  });
});

/** @internal */
export type MetricsTotals$Outbound = {
  orders: number | number;
  revenue: number | number;
  net_revenue: number | number;
  cumulative_revenue: number | number;
  net_cumulative_revenue: number | number;
  average_order_value: number | number;
  net_average_order_value: number | number;
  one_time_products: number | number;
  one_time_products_revenue: number | number;
  one_time_products_net_revenue: number | number;
  new_subscriptions: number | number;
  new_subscriptions_revenue: number | number;
  new_subscriptions_net_revenue: number | number;
  renewed_subscriptions: number | number;
  renewed_subscriptions_revenue: number | number;
  renewed_subscriptions_net_revenue: number | number;
  active_subscriptions: number | number;
  monthly_recurring_revenue: number | number;
  committed_monthly_recurring_revenue: number | number;
  checkouts: number | number;
  succeeded_checkouts: number | number;
  checkouts_conversion: number | number;
  canceled_subscriptions: number | number;
  canceled_subscriptions_customer_service: number | number;
  canceled_subscriptions_low_quality: number | number;
  canceled_subscriptions_missing_features: number | number;
  canceled_subscriptions_switched_service: number | number;
  canceled_subscriptions_too_complex: number | number;
  canceled_subscriptions_too_expensive: number | number;
  canceled_subscriptions_unused: number | number;
  canceled_subscriptions_other: number | number;
};

/** @internal */
export const MetricsTotals$outboundSchema: z.ZodType<
  MetricsTotals$Outbound,
  z.ZodTypeDef,
  MetricsTotals
> = z.object({
  orders: z.union([z.number().int(), z.number()]),
  revenue: z.union([z.number().int(), z.number()]),
  netRevenue: z.union([z.number().int(), z.number()]),
  cumulativeRevenue: z.union([z.number().int(), z.number()]),
  netCumulativeRevenue: z.union([z.number().int(), z.number()]),
  averageOrderValue: z.union([z.number().int(), z.number()]),
  netAverageOrderValue: z.union([z.number().int(), z.number()]),
  oneTimeProducts: z.union([z.number().int(), z.number()]),
  oneTimeProductsRevenue: z.union([z.number().int(), z.number()]),
  oneTimeProductsNetRevenue: z.union([z.number().int(), z.number()]),
  newSubscriptions: z.union([z.number().int(), z.number()]),
  newSubscriptionsRevenue: z.union([z.number().int(), z.number()]),
  newSubscriptionsNetRevenue: z.union([z.number().int(), z.number()]),
  renewedSubscriptions: z.union([z.number().int(), z.number()]),
  renewedSubscriptionsRevenue: z.union([z.number().int(), z.number()]),
  renewedSubscriptionsNetRevenue: z.union([z.number().int(), z.number()]),
  activeSubscriptions: z.union([z.number().int(), z.number()]),
  monthlyRecurringRevenue: z.union([z.number().int(), z.number()]),
  committedMonthlyRecurringRevenue: z.union([z.number().int(), z.number()]),
  checkouts: z.union([z.number().int(), z.number()]),
  succeededCheckouts: z.union([z.number().int(), z.number()]),
  checkoutsConversion: z.union([z.number().int(), z.number()]),
  canceledSubscriptions: z.union([z.number().int(), z.number()]),
  canceledSubscriptionsCustomerService: z.union([z.number().int(), z.number()]),
  canceledSubscriptionsLowQuality: z.union([z.number().int(), z.number()]),
  canceledSubscriptionsMissingFeatures: z.union([z.number().int(), z.number()]),
  canceledSubscriptionsSwitchedService: z.union([z.number().int(), z.number()]),
  canceledSubscriptionsTooComplex: z.union([z.number().int(), z.number()]),
  canceledSubscriptionsTooExpensive: z.union([z.number().int(), z.number()]),
  canceledSubscriptionsUnused: z.union([z.number().int(), z.number()]),
  canceledSubscriptionsOther: z.union([z.number().int(), z.number()]),
}).transform((v) => {
  return remap$(v, {
    netRevenue: "net_revenue",
    cumulativeRevenue: "cumulative_revenue",
    netCumulativeRevenue: "net_cumulative_revenue",
    averageOrderValue: "average_order_value",
    netAverageOrderValue: "net_average_order_value",
    oneTimeProducts: "one_time_products",
    oneTimeProductsRevenue: "one_time_products_revenue",
    oneTimeProductsNetRevenue: "one_time_products_net_revenue",
    newSubscriptions: "new_subscriptions",
    newSubscriptionsRevenue: "new_subscriptions_revenue",
    newSubscriptionsNetRevenue: "new_subscriptions_net_revenue",
    renewedSubscriptions: "renewed_subscriptions",
    renewedSubscriptionsRevenue: "renewed_subscriptions_revenue",
    renewedSubscriptionsNetRevenue: "renewed_subscriptions_net_revenue",
    activeSubscriptions: "active_subscriptions",
    monthlyRecurringRevenue: "monthly_recurring_revenue",
    committedMonthlyRecurringRevenue: "committed_monthly_recurring_revenue",
    succeededCheckouts: "succeeded_checkouts",
    checkoutsConversion: "checkouts_conversion",
    canceledSubscriptions: "canceled_subscriptions",
    canceledSubscriptionsCustomerService:
      "canceled_subscriptions_customer_service",
    canceledSubscriptionsLowQuality: "canceled_subscriptions_low_quality",
    canceledSubscriptionsMissingFeatures:
      "canceled_subscriptions_missing_features",
    canceledSubscriptionsSwitchedService:
      "canceled_subscriptions_switched_service",
    canceledSubscriptionsTooComplex: "canceled_subscriptions_too_complex",
    canceledSubscriptionsTooExpensive: "canceled_subscriptions_too_expensive",
    canceledSubscriptionsUnused: "canceled_subscriptions_unused",
    canceledSubscriptionsOther: "canceled_subscriptions_other",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsTotals$ {
  /** @deprecated use `MetricsTotals$inboundSchema` instead. */
  export const inboundSchema = MetricsTotals$inboundSchema;
  /** @deprecated use `MetricsTotals$outboundSchema` instead. */
  export const outboundSchema = MetricsTotals$outboundSchema;
  /** @deprecated use `MetricsTotals$Outbound` instead. */
  export type Outbound = MetricsTotals$Outbound;
}

export function metricsTotalsToJSON(metricsTotals: MetricsTotals): string {
  return JSON.stringify(MetricsTotals$outboundSchema.parse(metricsTotals));
}

export function metricsTotalsFromJSON(
  jsonString: string,
): SafeParseResult<MetricsTotals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricsTotals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsTotals' from JSON`,
  );
}
