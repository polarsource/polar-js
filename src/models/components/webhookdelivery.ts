/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  WebhookEvent,
  WebhookEvent$inboundSchema,
  WebhookEvent$Outbound,
  WebhookEvent$outboundSchema,
} from "./webhookevent.js";

/**
 * A webhook delivery for a webhook event.
 */
export type WebhookDelivery = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The ID of the object.
   */
  id: string;
  /**
   * The HTTP code returned by the URL. `null` if the endpoint was unreachable.
   */
  httpCode?: number | null | undefined;
  /**
   * Whether the delivery was successful.
   */
  succeeded: boolean;
  /**
   * A webhook event.
   *
   * @remarks
   *
   * An event represent something that happened in the system
   * that should be sent to the webhook endpoint.
   *
   * It can be delivered multiple times until it's marked as succeeded,
   * each one creating a new delivery.
   */
  webhookEvent: WebhookEvent;
};

/** @internal */
export const WebhookDelivery$inboundSchema: z.ZodType<
  WebhookDelivery,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  id: z.string(),
  http_code: z.nullable(z.number().int()).optional(),
  succeeded: z.boolean(),
  webhook_event: WebhookEvent$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "http_code": "httpCode",
    "webhook_event": "webhookEvent",
  });
});

/** @internal */
export type WebhookDelivery$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  http_code?: number | null | undefined;
  succeeded: boolean;
  webhook_event: WebhookEvent$Outbound;
};

/** @internal */
export const WebhookDelivery$outboundSchema: z.ZodType<
  WebhookDelivery$Outbound,
  z.ZodTypeDef,
  WebhookDelivery
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  httpCode: z.nullable(z.number().int()).optional(),
  succeeded: z.boolean(),
  webhookEvent: WebhookEvent$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    httpCode: "http_code",
    webhookEvent: "webhook_event",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookDelivery$ {
  /** @deprecated use `WebhookDelivery$inboundSchema` instead. */
  export const inboundSchema = WebhookDelivery$inboundSchema;
  /** @deprecated use `WebhookDelivery$outboundSchema` instead. */
  export const outboundSchema = WebhookDelivery$outboundSchema;
  /** @deprecated use `WebhookDelivery$Outbound` instead. */
  export type Outbound = WebhookDelivery$Outbound;
}

export function webhookDeliveryToJSON(
  webhookDelivery: WebhookDelivery,
): string {
  return JSON.stringify(WebhookDelivery$outboundSchema.parse(webhookDelivery));
}

export function webhookDeliveryFromJSON(
  jsonString: string,
): SafeParseResult<WebhookDelivery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookDelivery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookDelivery' from JSON`,
  );
}
