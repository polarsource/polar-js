/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";

/**
 * Update an existing checkout session using an access token.
 */
export type CheckoutUpdate = {
  /**
   * ID of the product price to checkout. Must correspond to a price linked to the same product.
   */
  productPriceId?: string | null | undefined;
  amount?: number | null | undefined;
  customerName?: string | null | undefined;
  customerEmail?: string | null | undefined;
  customerBillingAddress?: Address | null | undefined;
  customerTaxId?: string | null | undefined;
  /**
   * Key-value object allowing you to store additional information.
   *
   * @remarks
   *
   * The key must be a string with a maximum length of **40 characters**.
   * The value must be a string with a maximum length of **500 characters**.
   * You can store up to **50 key-value pairs**.
   */
  metadata?: { [k: string]: string } | null | undefined;
  customerIpAddress?: string | null | undefined;
  /**
   * URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id.
   */
  successUrl?: string | null | undefined;
};

/** @internal */
export const CheckoutUpdate$inboundSchema: z.ZodType<
  CheckoutUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  product_price_id: z.nullable(z.string()).optional(),
  amount: z.nullable(z.number().int()).optional(),
  customer_name: z.nullable(z.string()).optional(),
  customer_email: z.nullable(z.string()).optional(),
  customer_billing_address: z.nullable(Address$inboundSchema).optional(),
  customer_tax_id: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  customer_ip_address: z.nullable(z.string()).optional(),
  success_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "product_price_id": "productPriceId",
    "customer_name": "customerName",
    "customer_email": "customerEmail",
    "customer_billing_address": "customerBillingAddress",
    "customer_tax_id": "customerTaxId",
    "customer_ip_address": "customerIpAddress",
    "success_url": "successUrl",
  });
});

/** @internal */
export type CheckoutUpdate$Outbound = {
  product_price_id?: string | null | undefined;
  amount?: number | null | undefined;
  customer_name?: string | null | undefined;
  customer_email?: string | null | undefined;
  customer_billing_address?: Address$Outbound | null | undefined;
  customer_tax_id?: string | null | undefined;
  metadata?: { [k: string]: string } | null | undefined;
  customer_ip_address?: string | null | undefined;
  success_url?: string | null | undefined;
};

/** @internal */
export const CheckoutUpdate$outboundSchema: z.ZodType<
  CheckoutUpdate$Outbound,
  z.ZodTypeDef,
  CheckoutUpdate
> = z.object({
  productPriceId: z.nullable(z.string()).optional(),
  amount: z.nullable(z.number().int()).optional(),
  customerName: z.nullable(z.string()).optional(),
  customerEmail: z.nullable(z.string()).optional(),
  customerBillingAddress: z.nullable(Address$outboundSchema).optional(),
  customerTaxId: z.nullable(z.string()).optional(),
  metadata: z.nullable(z.record(z.string())).optional(),
  customerIpAddress: z.nullable(z.string()).optional(),
  successUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    productPriceId: "product_price_id",
    customerName: "customer_name",
    customerEmail: "customer_email",
    customerBillingAddress: "customer_billing_address",
    customerTaxId: "customer_tax_id",
    customerIpAddress: "customer_ip_address",
    successUrl: "success_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutUpdate$ {
  /** @deprecated use `CheckoutUpdate$inboundSchema` instead. */
  export const inboundSchema = CheckoutUpdate$inboundSchema;
  /** @deprecated use `CheckoutUpdate$outboundSchema` instead. */
  export const outboundSchema = CheckoutUpdate$outboundSchema;
  /** @deprecated use `CheckoutUpdate$Outbound` instead. */
  export type Outbound = CheckoutUpdate$Outbound;
}
