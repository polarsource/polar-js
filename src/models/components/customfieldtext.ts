/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  CustomFieldTextProperties,
  CustomFieldTextProperties$inboundSchema,
  CustomFieldTextProperties$Outbound,
  CustomFieldTextProperties$outboundSchema,
} from "./customfieldtextproperties.js";

export const CustomFieldTextType = {
  Text: "text",
} as const;
export type CustomFieldTextType = ClosedEnum<typeof CustomFieldTextType>;

/**
 * Schema for a custom field of type text.
 */
export type CustomFieldText = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The ID of the object.
   */
  id: string;
  metadata: { [k: string]: string };
  type?: "text" | undefined;
  /**
   * Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.
   */
  slug: string;
  /**
   * Name of the custom field.
   */
  name: string;
  /**
   * The ID of the organization owning the custom field.
   */
  organizationId: string;
  properties: CustomFieldTextProperties;
};

/** @internal */
export const CustomFieldTextType$inboundSchema: z.ZodNativeEnum<
  typeof CustomFieldTextType
> = z.nativeEnum(CustomFieldTextType);

/** @internal */
export const CustomFieldTextType$outboundSchema: z.ZodNativeEnum<
  typeof CustomFieldTextType
> = CustomFieldTextType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFieldTextType$ {
  /** @deprecated use `CustomFieldTextType$inboundSchema` instead. */
  export const inboundSchema = CustomFieldTextType$inboundSchema;
  /** @deprecated use `CustomFieldTextType$outboundSchema` instead. */
  export const outboundSchema = CustomFieldTextType$outboundSchema;
}

/** @internal */
export const CustomFieldText$inboundSchema: z.ZodType<
  CustomFieldText,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  id: z.string(),
  metadata: z.record(z.string()),
  type: z.literal("text").optional(),
  slug: z.string(),
  name: z.string(),
  organization_id: z.string(),
  properties: CustomFieldTextProperties$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "organization_id": "organizationId",
  });
});

/** @internal */
export type CustomFieldText$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  metadata: { [k: string]: string };
  type: "text";
  slug: string;
  name: string;
  organization_id: string;
  properties: CustomFieldTextProperties$Outbound;
};

/** @internal */
export const CustomFieldText$outboundSchema: z.ZodType<
  CustomFieldText$Outbound,
  z.ZodTypeDef,
  CustomFieldText
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  metadata: z.record(z.string()),
  type: z.literal("text").default("text"),
  slug: z.string(),
  name: z.string(),
  organizationId: z.string(),
  properties: CustomFieldTextProperties$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFieldText$ {
  /** @deprecated use `CustomFieldText$inboundSchema` instead. */
  export const inboundSchema = CustomFieldText$inboundSchema;
  /** @deprecated use `CustomFieldText$outboundSchema` instead. */
  export const outboundSchema = CustomFieldText$outboundSchema;
  /** @deprecated use `CustomFieldText$Outbound` instead. */
  export type Outbound = CustomFieldText$Outbound;
}
