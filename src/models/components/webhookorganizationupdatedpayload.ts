/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Organization,
  Organization$inboundSchema,
  Organization$Outbound,
  Organization$outboundSchema,
} from "./organization.js";

export const WebhookOrganizationUpdatedPayloadType = {
  OrganizationUpdated: "organization.updated",
} as const;
export type WebhookOrganizationUpdatedPayloadType = ClosedEnum<
  typeof WebhookOrganizationUpdatedPayloadType
>;

/**
 * Sent when a organization is updated.
 *
 * @remarks
 *
 * **Discord & Slack support:** Basic
 */
export type WebhookOrganizationUpdatedPayload = {
  type?: "organization.updated" | undefined;
  data: Organization;
};

/** @internal */
export const WebhookOrganizationUpdatedPayloadType$inboundSchema:
  z.ZodNativeEnum<typeof WebhookOrganizationUpdatedPayloadType> = z.nativeEnum(
    WebhookOrganizationUpdatedPayloadType,
  );

/** @internal */
export const WebhookOrganizationUpdatedPayloadType$outboundSchema:
  z.ZodNativeEnum<typeof WebhookOrganizationUpdatedPayloadType> =
    WebhookOrganizationUpdatedPayloadType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookOrganizationUpdatedPayloadType$ {
  /** @deprecated use `WebhookOrganizationUpdatedPayloadType$inboundSchema` instead. */
  export const inboundSchema =
    WebhookOrganizationUpdatedPayloadType$inboundSchema;
  /** @deprecated use `WebhookOrganizationUpdatedPayloadType$outboundSchema` instead. */
  export const outboundSchema =
    WebhookOrganizationUpdatedPayloadType$outboundSchema;
}

/** @internal */
export const WebhookOrganizationUpdatedPayload$inboundSchema: z.ZodType<
  WebhookOrganizationUpdatedPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("organization.updated").optional(),
  data: Organization$inboundSchema,
});

/** @internal */
export type WebhookOrganizationUpdatedPayload$Outbound = {
  type: "organization.updated";
  data: Organization$Outbound;
};

/** @internal */
export const WebhookOrganizationUpdatedPayload$outboundSchema: z.ZodType<
  WebhookOrganizationUpdatedPayload$Outbound,
  z.ZodTypeDef,
  WebhookOrganizationUpdatedPayload
> = z.object({
  type: z.literal("organization.updated").default("organization.updated"),
  data: Organization$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookOrganizationUpdatedPayload$ {
  /** @deprecated use `WebhookOrganizationUpdatedPayload$inboundSchema` instead. */
  export const inboundSchema = WebhookOrganizationUpdatedPayload$inboundSchema;
  /** @deprecated use `WebhookOrganizationUpdatedPayload$outboundSchema` instead. */
  export const outboundSchema =
    WebhookOrganizationUpdatedPayload$outboundSchema;
  /** @deprecated use `WebhookOrganizationUpdatedPayload$Outbound` instead. */
  export type Outbound = WebhookOrganizationUpdatedPayload$Outbound;
}

export function webhookOrganizationUpdatedPayloadToJSON(
  webhookOrganizationUpdatedPayload: WebhookOrganizationUpdatedPayload,
): string {
  return JSON.stringify(
    WebhookOrganizationUpdatedPayload$outboundSchema.parse(
      webhookOrganizationUpdatedPayload,
    ),
  );
}

export function webhookOrganizationUpdatedPayloadFromJSON(
  jsonString: string,
): SafeParseResult<WebhookOrganizationUpdatedPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookOrganizationUpdatedPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookOrganizationUpdatedPayload' from JSON`,
  );
}
