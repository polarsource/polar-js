/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerPaymentMethodConfirm = {
  setupIntentId: string;
  setDefault: boolean;
};

/** @internal */
export const CustomerPaymentMethodConfirm$inboundSchema: z.ZodType<
  CustomerPaymentMethodConfirm,
  z.ZodTypeDef,
  unknown
> = z.object({
  setup_intent_id: z.string(),
  set_default: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "setup_intent_id": "setupIntentId",
    "set_default": "setDefault",
  });
});

/** @internal */
export type CustomerPaymentMethodConfirm$Outbound = {
  setup_intent_id: string;
  set_default: boolean;
};

/** @internal */
export const CustomerPaymentMethodConfirm$outboundSchema: z.ZodType<
  CustomerPaymentMethodConfirm$Outbound,
  z.ZodTypeDef,
  CustomerPaymentMethodConfirm
> = z.object({
  setupIntentId: z.string(),
  setDefault: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    setupIntentId: "setup_intent_id",
    setDefault: "set_default",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerPaymentMethodConfirm$ {
  /** @deprecated use `CustomerPaymentMethodConfirm$inboundSchema` instead. */
  export const inboundSchema = CustomerPaymentMethodConfirm$inboundSchema;
  /** @deprecated use `CustomerPaymentMethodConfirm$outboundSchema` instead. */
  export const outboundSchema = CustomerPaymentMethodConfirm$outboundSchema;
  /** @deprecated use `CustomerPaymentMethodConfirm$Outbound` instead. */
  export type Outbound = CustomerPaymentMethodConfirm$Outbound;
}

export function customerPaymentMethodConfirmToJSON(
  customerPaymentMethodConfirm: CustomerPaymentMethodConfirm,
): string {
  return JSON.stringify(
    CustomerPaymentMethodConfirm$outboundSchema.parse(
      customerPaymentMethodConfirm,
    ),
  );
}

export function customerPaymentMethodConfirmFromJSON(
  jsonString: string,
): SafeParseResult<CustomerPaymentMethodConfirm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerPaymentMethodConfirm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerPaymentMethodConfirm' from JSON`,
  );
}
