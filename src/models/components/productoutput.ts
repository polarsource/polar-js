/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  BenefitArticles,
  BenefitArticles$inboundSchema,
  BenefitArticles$Outbound,
  BenefitArticles$outboundSchema,
} from "./benefitarticles.js";
import {
  BenefitBase,
  BenefitBase$inboundSchema,
  BenefitBase$Outbound,
  BenefitBase$outboundSchema,
} from "./benefitbase.js";
import {
  ProductMediaFileReadOutput,
  ProductMediaFileReadOutput$inboundSchema,
  ProductMediaFileReadOutput$Outbound,
  ProductMediaFileReadOutput$outboundSchema,
} from "./productmediafilereadoutput.js";
import {
  ProductPriceOutput,
  ProductPriceOutput$inboundSchema,
  ProductPriceOutput$Outbound,
  ProductPriceOutput$outboundSchema,
} from "./productpriceoutput.js";

export type ProductOutputBenefits = BenefitBase | BenefitArticles;

/**
 * A product.
 */
export type ProductOutput = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The ID of the product.
   */
  id: string;
  /**
   * The name of the product.
   */
  name: string;
  /**
   * The description of the product.
   */
  description: string | null;
  /**
   * Whether the product is a subscription tier.
   */
  isRecurring: boolean;
  /**
   * Whether the product is archived and no longer available.
   */
  isArchived: boolean;
  /**
   * The ID of the organization owning the product.
   */
  organizationId: string;
  /**
   * List of available prices for this product.
   */
  prices: Array<ProductPriceOutput>;
  /**
   * The benefits granted by the product.
   */
  benefits: Array<BenefitBase | BenefitArticles>;
  /**
   * The medias associated to the product.
   */
  medias: Array<ProductMediaFileReadOutput>;
};

/** @internal */
export const ProductOutputBenefits$inboundSchema: z.ZodType<
  ProductOutputBenefits,
  z.ZodTypeDef,
  unknown
> = z.union([BenefitBase$inboundSchema, BenefitArticles$inboundSchema]);

/** @internal */
export type ProductOutputBenefits$Outbound =
  | BenefitBase$Outbound
  | BenefitArticles$Outbound;

/** @internal */
export const ProductOutputBenefits$outboundSchema: z.ZodType<
  ProductOutputBenefits$Outbound,
  z.ZodTypeDef,
  ProductOutputBenefits
> = z.union([BenefitBase$outboundSchema, BenefitArticles$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductOutputBenefits$ {
  /** @deprecated use `ProductOutputBenefits$inboundSchema` instead. */
  export const inboundSchema = ProductOutputBenefits$inboundSchema;
  /** @deprecated use `ProductOutputBenefits$outboundSchema` instead. */
  export const outboundSchema = ProductOutputBenefits$outboundSchema;
  /** @deprecated use `ProductOutputBenefits$Outbound` instead. */
  export type Outbound = ProductOutputBenefits$Outbound;
}

/** @internal */
export const ProductOutput$inboundSchema: z.ZodType<
  ProductOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  id: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  is_recurring: z.boolean(),
  is_archived: z.boolean(),
  organization_id: z.string(),
  prices: z.array(ProductPriceOutput$inboundSchema),
  benefits: z.array(
    z.union([BenefitBase$inboundSchema, BenefitArticles$inboundSchema]),
  ),
  medias: z.array(ProductMediaFileReadOutput$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "is_recurring": "isRecurring",
    "is_archived": "isArchived",
    "organization_id": "organizationId",
  });
});

/** @internal */
export type ProductOutput$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  name: string;
  description: string | null;
  is_recurring: boolean;
  is_archived: boolean;
  organization_id: string;
  prices: Array<ProductPriceOutput$Outbound>;
  benefits: Array<BenefitBase$Outbound | BenefitArticles$Outbound>;
  medias: Array<ProductMediaFileReadOutput$Outbound>;
};

/** @internal */
export const ProductOutput$outboundSchema: z.ZodType<
  ProductOutput$Outbound,
  z.ZodTypeDef,
  ProductOutput
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  name: z.string(),
  description: z.nullable(z.string()),
  isRecurring: z.boolean(),
  isArchived: z.boolean(),
  organizationId: z.string(),
  prices: z.array(ProductPriceOutput$outboundSchema),
  benefits: z.array(
    z.union([BenefitBase$outboundSchema, BenefitArticles$outboundSchema]),
  ),
  medias: z.array(ProductMediaFileReadOutput$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    isRecurring: "is_recurring",
    isArchived: "is_archived",
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductOutput$ {
  /** @deprecated use `ProductOutput$inboundSchema` instead. */
  export const inboundSchema = ProductOutput$inboundSchema;
  /** @deprecated use `ProductOutput$outboundSchema` instead. */
  export const outboundSchema = ProductOutput$outboundSchema;
  /** @deprecated use `ProductOutput$Outbound` instead. */
  export type Outbound = ProductOutput$Outbound;
}
