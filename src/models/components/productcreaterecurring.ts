/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AttachedCustomFieldCreate,
  AttachedCustomFieldCreate$inboundSchema,
  AttachedCustomFieldCreate$Outbound,
  AttachedCustomFieldCreate$outboundSchema,
} from "./attachedcustomfieldcreate.js";
import {
  ProductPriceCustomCreate,
  ProductPriceCustomCreate$inboundSchema,
  ProductPriceCustomCreate$Outbound,
  ProductPriceCustomCreate$outboundSchema,
} from "./productpricecustomcreate.js";
import {
  ProductPriceFixedCreate,
  ProductPriceFixedCreate$inboundSchema,
  ProductPriceFixedCreate$Outbound,
  ProductPriceFixedCreate$outboundSchema,
} from "./productpricefixedcreate.js";
import {
  ProductPriceFreeCreate,
  ProductPriceFreeCreate$inboundSchema,
  ProductPriceFreeCreate$Outbound,
  ProductPriceFreeCreate$outboundSchema,
} from "./productpricefreecreate.js";
import {
  ProductPriceMeteredUnitCreate,
  ProductPriceMeteredUnitCreate$inboundSchema,
  ProductPriceMeteredUnitCreate$Outbound,
  ProductPriceMeteredUnitCreate$outboundSchema,
} from "./productpricemeteredunitcreate.js";
import {
  SubscriptionRecurringInterval,
  SubscriptionRecurringInterval$inboundSchema,
  SubscriptionRecurringInterval$outboundSchema,
} from "./subscriptionrecurringinterval.js";
import {
  TrialInterval,
  TrialInterval$inboundSchema,
  TrialInterval$outboundSchema,
} from "./trialinterval.js";

export type ProductCreateRecurringMetadata = string | number | number | boolean;

export type ProductCreateRecurringPrices =
  | ProductPriceMeteredUnitCreate
  | ProductPriceFixedCreate
  | ProductPriceCustomCreate
  | ProductPriceFreeCreate;

export type ProductCreateRecurring = {
  /**
   * Key-value object allowing you to store additional information.
   *
   * @remarks
   *
   * The key must be a string with a maximum length of **40 characters**.
   * The value must be either:
   *
   * * A string with a maximum length of **500 characters**
   * * An integer
   * * A floating-point number
   * * A boolean
   *
   * You can store up to **50 key-value pairs**.
   */
  metadata?: { [k: string]: string | number | number | boolean } | undefined;
  /**
   * The name of the product.
   */
  name: string;
  /**
   * The description of the product.
   */
  description?: string | null | undefined;
  /**
   * List of available prices for this product. It should contain at most one static price (fixed, custom or free), and any number of metered prices. Metered prices are not supported on one-time purchase products.
   */
  prices: Array<
    | ProductPriceMeteredUnitCreate
    | ProductPriceFixedCreate
    | ProductPriceCustomCreate
    | ProductPriceFreeCreate
  >;
  /**
   * List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded.
   */
  medias?: Array<string> | null | undefined;
  /**
   * List of custom fields to attach.
   */
  attachedCustomFields?: Array<AttachedCustomFieldCreate> | undefined;
  /**
   * The ID of the organization owning the product. **Required unless you use an organization token.**
   */
  organizationId?: string | null | undefined;
  /**
   * The interval unit for the trial period.
   */
  trialInterval?: TrialInterval | null | undefined;
  /**
   * The number of interval units for the trial period.
   */
  trialIntervalCount?: number | null | undefined;
  recurringInterval: SubscriptionRecurringInterval;
};

/** @internal */
export const ProductCreateRecurringMetadata$inboundSchema: z.ZodType<
  ProductCreateRecurringMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);

/** @internal */
export type ProductCreateRecurringMetadata$Outbound =
  | string
  | number
  | number
  | boolean;

/** @internal */
export const ProductCreateRecurringMetadata$outboundSchema: z.ZodType<
  ProductCreateRecurringMetadata$Outbound,
  z.ZodTypeDef,
  ProductCreateRecurringMetadata
> = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductCreateRecurringMetadata$ {
  /** @deprecated use `ProductCreateRecurringMetadata$inboundSchema` instead. */
  export const inboundSchema = ProductCreateRecurringMetadata$inboundSchema;
  /** @deprecated use `ProductCreateRecurringMetadata$outboundSchema` instead. */
  export const outboundSchema = ProductCreateRecurringMetadata$outboundSchema;
  /** @deprecated use `ProductCreateRecurringMetadata$Outbound` instead. */
  export type Outbound = ProductCreateRecurringMetadata$Outbound;
}

export function productCreateRecurringMetadataToJSON(
  productCreateRecurringMetadata: ProductCreateRecurringMetadata,
): string {
  return JSON.stringify(
    ProductCreateRecurringMetadata$outboundSchema.parse(
      productCreateRecurringMetadata,
    ),
  );
}

export function productCreateRecurringMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ProductCreateRecurringMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductCreateRecurringMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductCreateRecurringMetadata' from JSON`,
  );
}

/** @internal */
export const ProductCreateRecurringPrices$inboundSchema: z.ZodType<
  ProductCreateRecurringPrices,
  z.ZodTypeDef,
  unknown
> = z.union([
  ProductPriceMeteredUnitCreate$inboundSchema,
  ProductPriceFixedCreate$inboundSchema,
  ProductPriceCustomCreate$inboundSchema,
  ProductPriceFreeCreate$inboundSchema,
]);

/** @internal */
export type ProductCreateRecurringPrices$Outbound =
  | ProductPriceMeteredUnitCreate$Outbound
  | ProductPriceFixedCreate$Outbound
  | ProductPriceCustomCreate$Outbound
  | ProductPriceFreeCreate$Outbound;

/** @internal */
export const ProductCreateRecurringPrices$outboundSchema: z.ZodType<
  ProductCreateRecurringPrices$Outbound,
  z.ZodTypeDef,
  ProductCreateRecurringPrices
> = z.union([
  ProductPriceMeteredUnitCreate$outboundSchema,
  ProductPriceFixedCreate$outboundSchema,
  ProductPriceCustomCreate$outboundSchema,
  ProductPriceFreeCreate$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductCreateRecurringPrices$ {
  /** @deprecated use `ProductCreateRecurringPrices$inboundSchema` instead. */
  export const inboundSchema = ProductCreateRecurringPrices$inboundSchema;
  /** @deprecated use `ProductCreateRecurringPrices$outboundSchema` instead. */
  export const outboundSchema = ProductCreateRecurringPrices$outboundSchema;
  /** @deprecated use `ProductCreateRecurringPrices$Outbound` instead. */
  export type Outbound = ProductCreateRecurringPrices$Outbound;
}

export function productCreateRecurringPricesToJSON(
  productCreateRecurringPrices: ProductCreateRecurringPrices,
): string {
  return JSON.stringify(
    ProductCreateRecurringPrices$outboundSchema.parse(
      productCreateRecurringPrices,
    ),
  );
}

export function productCreateRecurringPricesFromJSON(
  jsonString: string,
): SafeParseResult<ProductCreateRecurringPrices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductCreateRecurringPrices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductCreateRecurringPrices' from JSON`,
  );
}

/** @internal */
export const ProductCreateRecurring$inboundSchema: z.ZodType<
  ProductCreateRecurring,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.record(
    z.union([z.string(), z.number().int(), z.number(), z.boolean()]),
  ).optional(),
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  prices: z.array(
    z.union([
      ProductPriceMeteredUnitCreate$inboundSchema,
      ProductPriceFixedCreate$inboundSchema,
      ProductPriceCustomCreate$inboundSchema,
      ProductPriceFreeCreate$inboundSchema,
    ]),
  ),
  medias: z.nullable(z.array(z.string())).optional(),
  attached_custom_fields: z.array(AttachedCustomFieldCreate$inboundSchema)
    .optional(),
  organization_id: z.nullable(z.string()).optional(),
  trial_interval: z.nullable(TrialInterval$inboundSchema).optional(),
  trial_interval_count: z.nullable(z.number().int()).optional(),
  recurring_interval: SubscriptionRecurringInterval$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "attached_custom_fields": "attachedCustomFields",
    "organization_id": "organizationId",
    "trial_interval": "trialInterval",
    "trial_interval_count": "trialIntervalCount",
    "recurring_interval": "recurringInterval",
  });
});

/** @internal */
export type ProductCreateRecurring$Outbound = {
  metadata?: { [k: string]: string | number | number | boolean } | undefined;
  name: string;
  description?: string | null | undefined;
  prices: Array<
    | ProductPriceMeteredUnitCreate$Outbound
    | ProductPriceFixedCreate$Outbound
    | ProductPriceCustomCreate$Outbound
    | ProductPriceFreeCreate$Outbound
  >;
  medias?: Array<string> | null | undefined;
  attached_custom_fields?:
    | Array<AttachedCustomFieldCreate$Outbound>
    | undefined;
  organization_id?: string | null | undefined;
  trial_interval?: string | null | undefined;
  trial_interval_count?: number | null | undefined;
  recurring_interval: string;
};

/** @internal */
export const ProductCreateRecurring$outboundSchema: z.ZodType<
  ProductCreateRecurring$Outbound,
  z.ZodTypeDef,
  ProductCreateRecurring
> = z.object({
  metadata: z.record(
    z.union([z.string(), z.number().int(), z.number(), z.boolean()]),
  ).optional(),
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  prices: z.array(
    z.union([
      ProductPriceMeteredUnitCreate$outboundSchema,
      ProductPriceFixedCreate$outboundSchema,
      ProductPriceCustomCreate$outboundSchema,
      ProductPriceFreeCreate$outboundSchema,
    ]),
  ),
  medias: z.nullable(z.array(z.string())).optional(),
  attachedCustomFields: z.array(AttachedCustomFieldCreate$outboundSchema)
    .optional(),
  organizationId: z.nullable(z.string()).optional(),
  trialInterval: z.nullable(TrialInterval$outboundSchema).optional(),
  trialIntervalCount: z.nullable(z.number().int()).optional(),
  recurringInterval: SubscriptionRecurringInterval$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    attachedCustomFields: "attached_custom_fields",
    organizationId: "organization_id",
    trialInterval: "trial_interval",
    trialIntervalCount: "trial_interval_count",
    recurringInterval: "recurring_interval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductCreateRecurring$ {
  /** @deprecated use `ProductCreateRecurring$inboundSchema` instead. */
  export const inboundSchema = ProductCreateRecurring$inboundSchema;
  /** @deprecated use `ProductCreateRecurring$outboundSchema` instead. */
  export const outboundSchema = ProductCreateRecurring$outboundSchema;
  /** @deprecated use `ProductCreateRecurring$Outbound` instead. */
  export type Outbound = ProductCreateRecurring$Outbound;
}

export function productCreateRecurringToJSON(
  productCreateRecurring: ProductCreateRecurring,
): string {
  return JSON.stringify(
    ProductCreateRecurring$outboundSchema.parse(productCreateRecurring),
  );
}

export function productCreateRecurringFromJSON(
  jsonString: string,
): SafeParseResult<ProductCreateRecurring, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductCreateRecurring$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductCreateRecurring' from JSON`,
  );
}
