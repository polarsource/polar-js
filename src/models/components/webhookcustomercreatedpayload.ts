/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Customer,
  Customer$inboundSchema,
  Customer$Outbound,
  Customer$outboundSchema,
} from "./customer.js";

/**
 * Sent when a new customer is created.
 *
 * @remarks
 *
 * A customer can be created:
 *
 * * After a successful checkout.
 * * Programmatically via the API.
 *
 * **Discord & Slack support:** Basic
 */
export type WebhookCustomerCreatedPayload = {
  type?: "customer.created" | undefined;
  /**
   * A customer in an organization.
   */
  data: Customer;
};

/** @internal */
export const WebhookCustomerCreatedPayload$inboundSchema: z.ZodType<
  WebhookCustomerCreatedPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("customer.created").optional(),
  data: Customer$inboundSchema,
});

/** @internal */
export type WebhookCustomerCreatedPayload$Outbound = {
  type: "customer.created";
  data: Customer$Outbound;
};

/** @internal */
export const WebhookCustomerCreatedPayload$outboundSchema: z.ZodType<
  WebhookCustomerCreatedPayload$Outbound,
  z.ZodTypeDef,
  WebhookCustomerCreatedPayload
> = z.object({
  type: z.literal("customer.created").default("customer.created" as const),
  data: Customer$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookCustomerCreatedPayload$ {
  /** @deprecated use `WebhookCustomerCreatedPayload$inboundSchema` instead. */
  export const inboundSchema = WebhookCustomerCreatedPayload$inboundSchema;
  /** @deprecated use `WebhookCustomerCreatedPayload$outboundSchema` instead. */
  export const outboundSchema = WebhookCustomerCreatedPayload$outboundSchema;
  /** @deprecated use `WebhookCustomerCreatedPayload$Outbound` instead. */
  export type Outbound = WebhookCustomerCreatedPayload$Outbound;
}

export function webhookCustomerCreatedPayloadToJSON(
  webhookCustomerCreatedPayload: WebhookCustomerCreatedPayload,
): string {
  return JSON.stringify(
    WebhookCustomerCreatedPayload$outboundSchema.parse(
      webhookCustomerCreatedPayload,
    ),
  );
}

export function webhookCustomerCreatedPayloadFromJSON(
  jsonString: string,
): SafeParseResult<WebhookCustomerCreatedPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookCustomerCreatedPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookCustomerCreatedPayload' from JSON`,
  );
}
