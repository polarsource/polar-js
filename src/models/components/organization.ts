/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OrganizationFeatureSettings,
  OrganizationFeatureSettings$inboundSchema,
  OrganizationFeatureSettings$Outbound,
  OrganizationFeatureSettings$outboundSchema,
} from "./organizationfeaturesettings.js";
import {
  OrganizationProfileSettings,
  OrganizationProfileSettings$inboundSchema,
  OrganizationProfileSettings$Outbound,
  OrganizationProfileSettings$outboundSchema,
} from "./organizationprofilesettings.js";
import {
  OrganizationSocialLink,
  OrganizationSocialLink$inboundSchema,
  OrganizationSocialLink$Outbound,
  OrganizationSocialLink$outboundSchema,
} from "./organizationsociallink.js";
import {
  OrganizationSubscriptionSettings,
  OrganizationSubscriptionSettings$inboundSchema,
  OrganizationSubscriptionSettings$Outbound,
  OrganizationSubscriptionSettings$outboundSchema,
} from "./organizationsubscriptionsettings.js";

export type Organization = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The organization ID.
   */
  id: string;
  /**
   * Organization name shown in checkout, customer portal, emails etc.
   */
  name: string;
  /**
   * Unique organization slug in checkout, customer portal and credit card statements.
   */
  slug: string;
  /**
   * Avatar URL shown in checkout, customer portal, emails etc.
   */
  avatarUrl: string | null;
  /**
   * Public support email.
   */
  email: string | null;
  /**
   * Official website of the organization.
   */
  website: string | null;
  /**
   * Links to social profiles.
   */
  socials: Array<OrganizationSocialLink>;
  /**
   * When the business details were submitted.
   */
  detailsSubmittedAt: Date | null;
  /**
   * Organization feature settings
   */
  featureSettings: OrganizationFeatureSettings | null;
  subscriptionSettings: OrganizationSubscriptionSettings;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  bio: string | null;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  company: string | null;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  blog: string | null;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  location: string | null;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  twitterUsername: string | null;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  pledgeMinimumAmount: number;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  pledgeBadgeShowAmount: boolean;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  defaultUpfrontSplitToContributors: number | null;
  /**
   * Settings for the organization profile
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  profileSettings: OrganizationProfileSettings | null;
};

/** @internal */
export const Organization$inboundSchema: z.ZodType<
  Organization,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  avatar_url: z.nullable(z.string()),
  email: z.nullable(z.string()),
  website: z.nullable(z.string()),
  socials: z.array(OrganizationSocialLink$inboundSchema),
  details_submitted_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  feature_settings: z.nullable(OrganizationFeatureSettings$inboundSchema),
  subscription_settings: OrganizationSubscriptionSettings$inboundSchema,
  bio: z.nullable(z.string()),
  company: z.nullable(z.string()),
  blog: z.nullable(z.string()),
  location: z.nullable(z.string()),
  twitter_username: z.nullable(z.string()),
  pledge_minimum_amount: z.number().int(),
  pledge_badge_show_amount: z.boolean(),
  default_upfront_split_to_contributors: z.nullable(z.number().int()),
  profile_settings: z.nullable(OrganizationProfileSettings$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "avatar_url": "avatarUrl",
    "details_submitted_at": "detailsSubmittedAt",
    "feature_settings": "featureSettings",
    "subscription_settings": "subscriptionSettings",
    "twitter_username": "twitterUsername",
    "pledge_minimum_amount": "pledgeMinimumAmount",
    "pledge_badge_show_amount": "pledgeBadgeShowAmount",
    "default_upfront_split_to_contributors":
      "defaultUpfrontSplitToContributors",
    "profile_settings": "profileSettings",
  });
});

/** @internal */
export type Organization$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  name: string;
  slug: string;
  avatar_url: string | null;
  email: string | null;
  website: string | null;
  socials: Array<OrganizationSocialLink$Outbound>;
  details_submitted_at: string | null;
  feature_settings: OrganizationFeatureSettings$Outbound | null;
  subscription_settings: OrganizationSubscriptionSettings$Outbound;
  bio: string | null;
  company: string | null;
  blog: string | null;
  location: string | null;
  twitter_username: string | null;
  pledge_minimum_amount: number;
  pledge_badge_show_amount: boolean;
  default_upfront_split_to_contributors: number | null;
  profile_settings: OrganizationProfileSettings$Outbound | null;
};

/** @internal */
export const Organization$outboundSchema: z.ZodType<
  Organization$Outbound,
  z.ZodTypeDef,
  Organization
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  avatarUrl: z.nullable(z.string()),
  email: z.nullable(z.string()),
  website: z.nullable(z.string()),
  socials: z.array(OrganizationSocialLink$outboundSchema),
  detailsSubmittedAt: z.nullable(z.date().transform(v => v.toISOString())),
  featureSettings: z.nullable(OrganizationFeatureSettings$outboundSchema),
  subscriptionSettings: OrganizationSubscriptionSettings$outboundSchema,
  bio: z.nullable(z.string()),
  company: z.nullable(z.string()),
  blog: z.nullable(z.string()),
  location: z.nullable(z.string()),
  twitterUsername: z.nullable(z.string()),
  pledgeMinimumAmount: z.number().int(),
  pledgeBadgeShowAmount: z.boolean(),
  defaultUpfrontSplitToContributors: z.nullable(z.number().int()),
  profileSettings: z.nullable(OrganizationProfileSettings$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    avatarUrl: "avatar_url",
    detailsSubmittedAt: "details_submitted_at",
    featureSettings: "feature_settings",
    subscriptionSettings: "subscription_settings",
    twitterUsername: "twitter_username",
    pledgeMinimumAmount: "pledge_minimum_amount",
    pledgeBadgeShowAmount: "pledge_badge_show_amount",
    defaultUpfrontSplitToContributors: "default_upfront_split_to_contributors",
    profileSettings: "profile_settings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Organization$ {
  /** @deprecated use `Organization$inboundSchema` instead. */
  export const inboundSchema = Organization$inboundSchema;
  /** @deprecated use `Organization$outboundSchema` instead. */
  export const outboundSchema = Organization$outboundSchema;
  /** @deprecated use `Organization$Outbound` instead. */
  export type Outbound = Organization$Outbound;
}

export function organizationToJSON(organization: Organization): string {
  return JSON.stringify(Organization$outboundSchema.parse(organization));
}

export function organizationFromJSON(
  jsonString: string,
): SafeParseResult<Organization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Organization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Organization' from JSON`,
  );
}
