/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OrganizationCustomerEmailSettings = {
  orderConfirmation: boolean;
  subscriptionCancellation: boolean;
  subscriptionConfirmation: boolean;
  subscriptionCycled: boolean;
  subscriptionPastDue: boolean;
  subscriptionRevoked: boolean;
  subscriptionUncanceled: boolean;
  subscriptionUpdated: boolean;
};

/** @internal */
export const OrganizationCustomerEmailSettings$inboundSchema: z.ZodType<
  OrganizationCustomerEmailSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  order_confirmation: z.boolean(),
  subscription_cancellation: z.boolean(),
  subscription_confirmation: z.boolean(),
  subscription_cycled: z.boolean(),
  subscription_past_due: z.boolean(),
  subscription_revoked: z.boolean(),
  subscription_uncanceled: z.boolean(),
  subscription_updated: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "order_confirmation": "orderConfirmation",
    "subscription_cancellation": "subscriptionCancellation",
    "subscription_confirmation": "subscriptionConfirmation",
    "subscription_cycled": "subscriptionCycled",
    "subscription_past_due": "subscriptionPastDue",
    "subscription_revoked": "subscriptionRevoked",
    "subscription_uncanceled": "subscriptionUncanceled",
    "subscription_updated": "subscriptionUpdated",
  });
});

/** @internal */
export type OrganizationCustomerEmailSettings$Outbound = {
  order_confirmation: boolean;
  subscription_cancellation: boolean;
  subscription_confirmation: boolean;
  subscription_cycled: boolean;
  subscription_past_due: boolean;
  subscription_revoked: boolean;
  subscription_uncanceled: boolean;
  subscription_updated: boolean;
};

/** @internal */
export const OrganizationCustomerEmailSettings$outboundSchema: z.ZodType<
  OrganizationCustomerEmailSettings$Outbound,
  z.ZodTypeDef,
  OrganizationCustomerEmailSettings
> = z.object({
  orderConfirmation: z.boolean(),
  subscriptionCancellation: z.boolean(),
  subscriptionConfirmation: z.boolean(),
  subscriptionCycled: z.boolean(),
  subscriptionPastDue: z.boolean(),
  subscriptionRevoked: z.boolean(),
  subscriptionUncanceled: z.boolean(),
  subscriptionUpdated: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    orderConfirmation: "order_confirmation",
    subscriptionCancellation: "subscription_cancellation",
    subscriptionConfirmation: "subscription_confirmation",
    subscriptionCycled: "subscription_cycled",
    subscriptionPastDue: "subscription_past_due",
    subscriptionRevoked: "subscription_revoked",
    subscriptionUncanceled: "subscription_uncanceled",
    subscriptionUpdated: "subscription_updated",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationCustomerEmailSettings$ {
  /** @deprecated use `OrganizationCustomerEmailSettings$inboundSchema` instead. */
  export const inboundSchema = OrganizationCustomerEmailSettings$inboundSchema;
  /** @deprecated use `OrganizationCustomerEmailSettings$outboundSchema` instead. */
  export const outboundSchema =
    OrganizationCustomerEmailSettings$outboundSchema;
  /** @deprecated use `OrganizationCustomerEmailSettings$Outbound` instead. */
  export type Outbound = OrganizationCustomerEmailSettings$Outbound;
}

export function organizationCustomerEmailSettingsToJSON(
  organizationCustomerEmailSettings: OrganizationCustomerEmailSettings,
): string {
  return JSON.stringify(
    OrganizationCustomerEmailSettings$outboundSchema.parse(
      organizationCustomerEmailSettings,
    ),
  );
}

export function organizationCustomerEmailSettingsFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationCustomerEmailSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationCustomerEmailSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationCustomerEmailSettings' from JSON`,
  );
}
