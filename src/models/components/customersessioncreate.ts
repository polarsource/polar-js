/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Schema for creating a customer session.
 */
export type CustomerSessionCreate = {
  /**
   * ID of the customer to create a session for.
   */
  customerId: string;
};

/** @internal */
export const CustomerSessionCreate$inboundSchema: z.ZodType<
  CustomerSessionCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
  });
});

/** @internal */
export type CustomerSessionCreate$Outbound = {
  customer_id: string;
};

/** @internal */
export const CustomerSessionCreate$outboundSchema: z.ZodType<
  CustomerSessionCreate$Outbound,
  z.ZodTypeDef,
  CustomerSessionCreate
> = z.object({
  customerId: z.string(),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerSessionCreate$ {
  /** @deprecated use `CustomerSessionCreate$inboundSchema` instead. */
  export const inboundSchema = CustomerSessionCreate$inboundSchema;
  /** @deprecated use `CustomerSessionCreate$outboundSchema` instead. */
  export const outboundSchema = CustomerSessionCreate$outboundSchema;
  /** @deprecated use `CustomerSessionCreate$Outbound` instead. */
  export type Outbound = CustomerSessionCreate$Outbound;
}

export function customerSessionCreateToJSON(
  customerSessionCreate: CustomerSessionCreate,
): string {
  return JSON.stringify(
    CustomerSessionCreate$outboundSchema.parse(customerSessionCreate),
  );
}

export function customerSessionCreateFromJSON(
  jsonString: string,
): SafeParseResult<CustomerSessionCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerSessionCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerSessionCreate' from JSON`,
  );
}
