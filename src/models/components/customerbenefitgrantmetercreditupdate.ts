/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerBenefitGrantMeterCreditUpdate = {
  benefitType: "meter_credit";
};

/** @internal */
export const CustomerBenefitGrantMeterCreditUpdate$inboundSchema: z.ZodType<
  CustomerBenefitGrantMeterCreditUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  benefit_type: z.literal("meter_credit"),
}).transform((v) => {
  return remap$(v, {
    "benefit_type": "benefitType",
  });
});

/** @internal */
export type CustomerBenefitGrantMeterCreditUpdate$Outbound = {
  benefit_type: "meter_credit";
};

/** @internal */
export const CustomerBenefitGrantMeterCreditUpdate$outboundSchema: z.ZodType<
  CustomerBenefitGrantMeterCreditUpdate$Outbound,
  z.ZodTypeDef,
  CustomerBenefitGrantMeterCreditUpdate
> = z.object({
  benefitType: z.literal("meter_credit"),
}).transform((v) => {
  return remap$(v, {
    benefitType: "benefit_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerBenefitGrantMeterCreditUpdate$ {
  /** @deprecated use `CustomerBenefitGrantMeterCreditUpdate$inboundSchema` instead. */
  export const inboundSchema =
    CustomerBenefitGrantMeterCreditUpdate$inboundSchema;
  /** @deprecated use `CustomerBenefitGrantMeterCreditUpdate$outboundSchema` instead. */
  export const outboundSchema =
    CustomerBenefitGrantMeterCreditUpdate$outboundSchema;
  /** @deprecated use `CustomerBenefitGrantMeterCreditUpdate$Outbound` instead. */
  export type Outbound = CustomerBenefitGrantMeterCreditUpdate$Outbound;
}

export function customerBenefitGrantMeterCreditUpdateToJSON(
  customerBenefitGrantMeterCreditUpdate: CustomerBenefitGrantMeterCreditUpdate,
): string {
  return JSON.stringify(
    CustomerBenefitGrantMeterCreditUpdate$outboundSchema.parse(
      customerBenefitGrantMeterCreditUpdate,
    ),
  );
}

export function customerBenefitGrantMeterCreditUpdateFromJSON(
  jsonString: string,
): SafeParseResult<CustomerBenefitGrantMeterCreditUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerBenefitGrantMeterCreditUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerBenefitGrantMeterCreditUpdate' from JSON`,
  );
}
