/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Customer,
  Customer$inboundSchema,
  Customer$Outbound,
  Customer$outboundSchema,
} from "./customer.js";
import {
  Meter,
  Meter$inboundSchema,
  Meter$Outbound,
  Meter$outboundSchema,
} from "./meter.js";

/**
 * An active customer meter, with current consumed and credited units.
 */
export type CustomerMeter = {
  /**
   * The ID of the object.
   */
  id: string;
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The ID of the customer.
   */
  customerId: string;
  /**
   * The ID of the meter.
   */
  meterId: string;
  /**
   * The number of consumed units.
   */
  consumedUnits: number;
  /**
   * The number of credited units.
   */
  creditedUnits: number;
  /**
   * The balance of the meter, i.e. the difference between credited and consumed units.
   */
  balance: number;
  /**
   * A customer in an organization.
   */
  customer: Customer;
  meter: Meter;
};

/** @internal */
export const CustomerMeter$inboundSchema: z.ZodType<
  CustomerMeter,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  customer_id: z.string(),
  meter_id: z.string(),
  consumed_units: z.number(),
  credited_units: z.number().int(),
  balance: z.number(),
  customer: Customer$inboundSchema,
  meter: Meter$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "customer_id": "customerId",
    "meter_id": "meterId",
    "consumed_units": "consumedUnits",
    "credited_units": "creditedUnits",
  });
});

/** @internal */
export type CustomerMeter$Outbound = {
  id: string;
  created_at: string;
  modified_at: string | null;
  customer_id: string;
  meter_id: string;
  consumed_units: number;
  credited_units: number;
  balance: number;
  customer: Customer$Outbound;
  meter: Meter$Outbound;
};

/** @internal */
export const CustomerMeter$outboundSchema: z.ZodType<
  CustomerMeter$Outbound,
  z.ZodTypeDef,
  CustomerMeter
> = z.object({
  id: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  customerId: z.string(),
  meterId: z.string(),
  consumedUnits: z.number(),
  creditedUnits: z.number().int(),
  balance: z.number(),
  customer: Customer$outboundSchema,
  meter: Meter$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    customerId: "customer_id",
    meterId: "meter_id",
    consumedUnits: "consumed_units",
    creditedUnits: "credited_units",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerMeter$ {
  /** @deprecated use `CustomerMeter$inboundSchema` instead. */
  export const inboundSchema = CustomerMeter$inboundSchema;
  /** @deprecated use `CustomerMeter$outboundSchema` instead. */
  export const outboundSchema = CustomerMeter$outboundSchema;
  /** @deprecated use `CustomerMeter$Outbound` instead. */
  export type Outbound = CustomerMeter$Outbound;
}

export function customerMeterToJSON(customerMeter: CustomerMeter): string {
  return JSON.stringify(CustomerMeter$outboundSchema.parse(customerMeter));
}

export function customerMeterFromJSON(
  jsonString: string,
): SafeParseResult<CustomerMeter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerMeter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerMeter' from JSON`,
  );
}
