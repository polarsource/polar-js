/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OrganizationFeatureSettings = {
  /**
   * If this organization has issue funding enabled
   */
  issueFundingEnabled?: boolean | undefined;
  /**
   * If this organization has seat-based pricing enabled
   */
  seatBasedPricingEnabled?: boolean | undefined;
  /**
   * If this organization has RevOps enabled
   */
  revopsEnabled?: boolean | undefined;
  /**
   * If this organization has Wallets enabled
   */
  walletsEnabled?: boolean | undefined;
};

/** @internal */
export const OrganizationFeatureSettings$inboundSchema: z.ZodType<
  OrganizationFeatureSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  issue_funding_enabled: z.boolean().default(false),
  seat_based_pricing_enabled: z.boolean().default(false),
  revops_enabled: z.boolean().default(false),
  wallets_enabled: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "issue_funding_enabled": "issueFundingEnabled",
    "seat_based_pricing_enabled": "seatBasedPricingEnabled",
    "revops_enabled": "revopsEnabled",
    "wallets_enabled": "walletsEnabled",
  });
});

/** @internal */
export type OrganizationFeatureSettings$Outbound = {
  issue_funding_enabled: boolean;
  seat_based_pricing_enabled: boolean;
  revops_enabled: boolean;
  wallets_enabled: boolean;
};

/** @internal */
export const OrganizationFeatureSettings$outboundSchema: z.ZodType<
  OrganizationFeatureSettings$Outbound,
  z.ZodTypeDef,
  OrganizationFeatureSettings
> = z.object({
  issueFundingEnabled: z.boolean().default(false),
  seatBasedPricingEnabled: z.boolean().default(false),
  revopsEnabled: z.boolean().default(false),
  walletsEnabled: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    issueFundingEnabled: "issue_funding_enabled",
    seatBasedPricingEnabled: "seat_based_pricing_enabled",
    revopsEnabled: "revops_enabled",
    walletsEnabled: "wallets_enabled",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationFeatureSettings$ {
  /** @deprecated use `OrganizationFeatureSettings$inboundSchema` instead. */
  export const inboundSchema = OrganizationFeatureSettings$inboundSchema;
  /** @deprecated use `OrganizationFeatureSettings$outboundSchema` instead. */
  export const outboundSchema = OrganizationFeatureSettings$outboundSchema;
  /** @deprecated use `OrganizationFeatureSettings$Outbound` instead. */
  export type Outbound = OrganizationFeatureSettings$Outbound;
}

export function organizationFeatureSettingsToJSON(
  organizationFeatureSettings: OrganizationFeatureSettings,
): string {
  return JSON.stringify(
    OrganizationFeatureSettings$outboundSchema.parse(
      organizationFeatureSettings,
    ),
  );
}

export function organizationFeatureSettingsFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationFeatureSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationFeatureSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationFeatureSettings' from JSON`,
  );
}
