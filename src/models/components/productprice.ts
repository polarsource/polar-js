/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ProductPriceCustom,
  ProductPriceCustom$inboundSchema,
  ProductPriceCustom$Outbound,
  ProductPriceCustom$outboundSchema,
} from "./productpricecustom.js";
import {
  ProductPriceFixed,
  ProductPriceFixed$inboundSchema,
  ProductPriceFixed$Outbound,
  ProductPriceFixed$outboundSchema,
} from "./productpricefixed.js";
import {
  ProductPriceFree,
  ProductPriceFree$inboundSchema,
  ProductPriceFree$Outbound,
  ProductPriceFree$outboundSchema,
} from "./productpricefree.js";

export type ProductPrice =
  | ProductPriceFree
  | ProductPriceFixed
  | ProductPriceCustom;

/** @internal */
export const ProductPrice$inboundSchema: z.ZodType<
  ProductPrice,
  z.ZodTypeDef,
  unknown
> = z.union([
  ProductPriceFree$inboundSchema,
  ProductPriceFixed$inboundSchema,
  ProductPriceCustom$inboundSchema,
]);

/** @internal */
export type ProductPrice$Outbound =
  | ProductPriceFree$Outbound
  | ProductPriceFixed$Outbound
  | ProductPriceCustom$Outbound;

/** @internal */
export const ProductPrice$outboundSchema: z.ZodType<
  ProductPrice$Outbound,
  z.ZodTypeDef,
  ProductPrice
> = z.union([
  ProductPriceFree$outboundSchema,
  ProductPriceFixed$outboundSchema,
  ProductPriceCustom$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductPrice$ {
  /** @deprecated use `ProductPrice$inboundSchema` instead. */
  export const inboundSchema = ProductPrice$inboundSchema;
  /** @deprecated use `ProductPrice$outboundSchema` instead. */
  export const outboundSchema = ProductPrice$outboundSchema;
  /** @deprecated use `ProductPrice$Outbound` instead. */
  export type Outbound = ProductPrice$Outbound;
}

export function productPriceToJSON(productPrice: ProductPrice): string {
  return JSON.stringify(ProductPrice$outboundSchema.parse(productPrice));
}

export function productPriceFromJSON(
  jsonString: string,
): SafeParseResult<ProductPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductPrice' from JSON`,
  );
}
