/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Issue,
  Issue$inboundSchema,
  Issue$Outbound,
  Issue$outboundSchema,
} from "./issue.js";
import {
  Pledger,
  Pledger$inboundSchema,
  Pledger$Outbound,
  Pledger$outboundSchema,
} from "./pledger.js";
import {
  PledgeState,
  PledgeState$inboundSchema,
  PledgeState$outboundSchema,
} from "./pledgestate.js";
import {
  PledgeType,
  PledgeType$inboundSchema,
  PledgeType$outboundSchema,
} from "./pledgetype.js";

export type Pledge = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The ID of the object.
   */
  id: string;
  /**
   * Amount pledged towards the issue
   */
  amount: number;
  currency: string;
  state: PledgeState;
  type: PledgeType;
  /**
   * If and when the pledge was refunded to the pledger
   */
  refundedAt?: Date | null | undefined;
  /**
   * When the payout is scheduled to be made to the maintainers behind the issue. Disputes must be made before this date.
   */
  scheduledPayoutAt?: Date | null | undefined;
  issue: Issue;
  /**
   * The user or organization that made this pledge
   */
  pledger?: Pledger | null | undefined;
  /**
   * URL of invoice for this pledge
   */
  hostedInvoiceUrl?: string | null | undefined;
  /**
   * If the currently authenticated subject can perform admin actions on behalf of the maker of the peldge
   */
  authedCanAdminSender?: boolean | undefined;
  /**
   * If the currently authenticated subject can perform admin actions on behalf of the receiver of the peldge
   */
  authedCanAdminReceived?: boolean | undefined;
  /**
   * For pledges made by an organization, or on behalf of an organization. This is the user that made the pledge. Only visible for members of said organization.
   */
  createdBy?: Pledger | null | undefined;
};

/** @internal */
export const Pledge$inboundSchema: z.ZodType<Pledge, z.ZodTypeDef, unknown> = z
  .object({
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    modified_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ),
    id: z.string(),
    amount: z.number().int(),
    currency: z.string(),
    state: PledgeState$inboundSchema,
    type: PledgeType$inboundSchema,
    refunded_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    scheduled_payout_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    issue: Issue$inboundSchema,
    pledger: z.nullable(Pledger$inboundSchema).optional(),
    hosted_invoice_url: z.nullable(z.string()).optional(),
    authed_can_admin_sender: z.boolean().default(false),
    authed_can_admin_received: z.boolean().default(false),
    created_by: z.nullable(Pledger$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "modified_at": "modifiedAt",
      "refunded_at": "refundedAt",
      "scheduled_payout_at": "scheduledPayoutAt",
      "hosted_invoice_url": "hostedInvoiceUrl",
      "authed_can_admin_sender": "authedCanAdminSender",
      "authed_can_admin_received": "authedCanAdminReceived",
      "created_by": "createdBy",
    });
  });

/** @internal */
export type Pledge$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  amount: number;
  currency: string;
  state: string;
  type: string;
  refunded_at?: string | null | undefined;
  scheduled_payout_at?: string | null | undefined;
  issue: Issue$Outbound;
  pledger?: Pledger$Outbound | null | undefined;
  hosted_invoice_url?: string | null | undefined;
  authed_can_admin_sender: boolean;
  authed_can_admin_received: boolean;
  created_by?: Pledger$Outbound | null | undefined;
};

/** @internal */
export const Pledge$outboundSchema: z.ZodType<
  Pledge$Outbound,
  z.ZodTypeDef,
  Pledge
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  amount: z.number().int(),
  currency: z.string(),
  state: PledgeState$outboundSchema,
  type: PledgeType$outboundSchema,
  refundedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  scheduledPayoutAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  issue: Issue$outboundSchema,
  pledger: z.nullable(Pledger$outboundSchema).optional(),
  hostedInvoiceUrl: z.nullable(z.string()).optional(),
  authedCanAdminSender: z.boolean().default(false),
  authedCanAdminReceived: z.boolean().default(false),
  createdBy: z.nullable(Pledger$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    refundedAt: "refunded_at",
    scheduledPayoutAt: "scheduled_payout_at",
    hostedInvoiceUrl: "hosted_invoice_url",
    authedCanAdminSender: "authed_can_admin_sender",
    authedCanAdminReceived: "authed_can_admin_received",
    createdBy: "created_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Pledge$ {
  /** @deprecated use `Pledge$inboundSchema` instead. */
  export const inboundSchema = Pledge$inboundSchema;
  /** @deprecated use `Pledge$outboundSchema` instead. */
  export const outboundSchema = Pledge$outboundSchema;
  /** @deprecated use `Pledge$Outbound` instead. */
  export type Outbound = Pledge$Outbound;
}

export function pledgeToJSON(pledge: Pledge): string {
  return JSON.stringify(Pledge$outboundSchema.parse(pledge));
}

export function pledgeFromJSON(
  jsonString: string,
): SafeParseResult<Pledge, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Pledge$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Pledge' from JSON`,
  );
}
