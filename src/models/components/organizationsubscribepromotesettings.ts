/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OrganizationSubscribePromoteSettings = {
  /**
   * Promote email subscription (free)
   */
  promote?: boolean | undefined;
  /**
   * Show subscription count publicly
   */
  showCount?: boolean | undefined;
  /**
   * Include free subscribers in total count
   */
  countFree?: boolean | undefined;
};

/** @internal */
export const OrganizationSubscribePromoteSettings$inboundSchema: z.ZodType<
  OrganizationSubscribePromoteSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  promote: z.boolean().default(true),
  show_count: z.boolean().default(true),
  count_free: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "show_count": "showCount",
    "count_free": "countFree",
  });
});

/** @internal */
export type OrganizationSubscribePromoteSettings$Outbound = {
  promote: boolean;
  show_count: boolean;
  count_free: boolean;
};

/** @internal */
export const OrganizationSubscribePromoteSettings$outboundSchema: z.ZodType<
  OrganizationSubscribePromoteSettings$Outbound,
  z.ZodTypeDef,
  OrganizationSubscribePromoteSettings
> = z.object({
  promote: z.boolean().default(true),
  showCount: z.boolean().default(true),
  countFree: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    showCount: "show_count",
    countFree: "count_free",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationSubscribePromoteSettings$ {
  /** @deprecated use `OrganizationSubscribePromoteSettings$inboundSchema` instead. */
  export const inboundSchema =
    OrganizationSubscribePromoteSettings$inboundSchema;
  /** @deprecated use `OrganizationSubscribePromoteSettings$outboundSchema` instead. */
  export const outboundSchema =
    OrganizationSubscribePromoteSettings$outboundSchema;
  /** @deprecated use `OrganizationSubscribePromoteSettings$Outbound` instead. */
  export type Outbound = OrganizationSubscribePromoteSettings$Outbound;
}

export function organizationSubscribePromoteSettingsToJSON(
  organizationSubscribePromoteSettings: OrganizationSubscribePromoteSettings,
): string {
  return JSON.stringify(
    OrganizationSubscribePromoteSettings$outboundSchema.parse(
      organizationSubscribePromoteSettings,
    ),
  );
}

export function organizationSubscribePromoteSettingsFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationSubscribePromoteSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OrganizationSubscribePromoteSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationSubscribePromoteSettings' from JSON`,
  );
}
