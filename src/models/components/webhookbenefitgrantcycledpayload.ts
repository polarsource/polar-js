/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BenefitGrantWebhook,
  BenefitGrantWebhook$inboundSchema,
  BenefitGrantWebhook$Outbound,
  BenefitGrantWebhook$outboundSchema,
} from "./benefitgrantwebhook.js";

/**
 * Sent when a benefit grant is cycled,
 *
 * @remarks
 * meaning the related subscription has been renewed for another period.
 *
 * **Discord & Slack support:** Basic
 */
export type WebhookBenefitGrantCycledPayload = {
  type: "benefit_grant.cycled";
  data: BenefitGrantWebhook;
};

/** @internal */
export const WebhookBenefitGrantCycledPayload$inboundSchema: z.ZodType<
  WebhookBenefitGrantCycledPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("benefit_grant.cycled"),
  data: BenefitGrantWebhook$inboundSchema,
});

/** @internal */
export type WebhookBenefitGrantCycledPayload$Outbound = {
  type: "benefit_grant.cycled";
  data: BenefitGrantWebhook$Outbound;
};

/** @internal */
export const WebhookBenefitGrantCycledPayload$outboundSchema: z.ZodType<
  WebhookBenefitGrantCycledPayload$Outbound,
  z.ZodTypeDef,
  WebhookBenefitGrantCycledPayload
> = z.object({
  type: z.literal("benefit_grant.cycled"),
  data: BenefitGrantWebhook$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookBenefitGrantCycledPayload$ {
  /** @deprecated use `WebhookBenefitGrantCycledPayload$inboundSchema` instead. */
  export const inboundSchema = WebhookBenefitGrantCycledPayload$inboundSchema;
  /** @deprecated use `WebhookBenefitGrantCycledPayload$outboundSchema` instead. */
  export const outboundSchema = WebhookBenefitGrantCycledPayload$outboundSchema;
  /** @deprecated use `WebhookBenefitGrantCycledPayload$Outbound` instead. */
  export type Outbound = WebhookBenefitGrantCycledPayload$Outbound;
}

export function webhookBenefitGrantCycledPayloadToJSON(
  webhookBenefitGrantCycledPayload: WebhookBenefitGrantCycledPayload,
): string {
  return JSON.stringify(
    WebhookBenefitGrantCycledPayload$outboundSchema.parse(
      webhookBenefitGrantCycledPayload,
    ),
  );
}

export function webhookBenefitGrantCycledPayloadFromJSON(
  jsonString: string,
): SafeParseResult<WebhookBenefitGrantCycledPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookBenefitGrantCycledPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookBenefitGrantCycledPayload' from JSON`,
  );
}
