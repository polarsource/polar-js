/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CustomerSeat,
  CustomerSeat$inboundSchema,
  CustomerSeat$Outbound,
  CustomerSeat$outboundSchema,
} from "./customerseat.js";

/**
 * Sent when a new customer seat is assigned.
 *
 * @remarks
 *
 * This event is triggered when a seat is assigned to a customer by the organization.
 * The customer will receive an invitation email to claim the seat.
 */
export type WebhookCustomerSeatAssignedPayload = {
  type: "customer_seat.assigned";
  timestamp: Date;
  data: CustomerSeat;
};

/** @internal */
export const WebhookCustomerSeatAssignedPayload$inboundSchema: z.ZodType<
  WebhookCustomerSeatAssignedPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("customer_seat.assigned"),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  data: CustomerSeat$inboundSchema,
});

/** @internal */
export type WebhookCustomerSeatAssignedPayload$Outbound = {
  type: "customer_seat.assigned";
  timestamp: string;
  data: CustomerSeat$Outbound;
};

/** @internal */
export const WebhookCustomerSeatAssignedPayload$outboundSchema: z.ZodType<
  WebhookCustomerSeatAssignedPayload$Outbound,
  z.ZodTypeDef,
  WebhookCustomerSeatAssignedPayload
> = z.object({
  type: z.literal("customer_seat.assigned"),
  timestamp: z.date().transform(v => v.toISOString()),
  data: CustomerSeat$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookCustomerSeatAssignedPayload$ {
  /** @deprecated use `WebhookCustomerSeatAssignedPayload$inboundSchema` instead. */
  export const inboundSchema = WebhookCustomerSeatAssignedPayload$inboundSchema;
  /** @deprecated use `WebhookCustomerSeatAssignedPayload$outboundSchema` instead. */
  export const outboundSchema =
    WebhookCustomerSeatAssignedPayload$outboundSchema;
  /** @deprecated use `WebhookCustomerSeatAssignedPayload$Outbound` instead. */
  export type Outbound = WebhookCustomerSeatAssignedPayload$Outbound;
}

export function webhookCustomerSeatAssignedPayloadToJSON(
  webhookCustomerSeatAssignedPayload: WebhookCustomerSeatAssignedPayload,
): string {
  return JSON.stringify(
    WebhookCustomerSeatAssignedPayload$outboundSchema.parse(
      webhookCustomerSeatAssignedPayload,
    ),
  );
}

export function webhookCustomerSeatAssignedPayloadFromJSON(
  jsonString: string,
): SafeParseResult<WebhookCustomerSeatAssignedPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      WebhookCustomerSeatAssignedPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookCustomerSeatAssignedPayload' from JSON`,
  );
}
