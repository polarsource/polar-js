/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RefundReason,
  RefundReason$inboundSchema,
  RefundReason$outboundSchema,
} from "./refundreason.js";
import {
  RefundStatus,
  RefundStatus$inboundSchema,
  RefundStatus$outboundSchema,
} from "./refundstatus.js";

export type RefundMetadata = string | number | boolean;

export type Refund = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The ID of the object.
   */
  id: string;
  metadata: { [k: string]: string | number | boolean };
  status: RefundStatus;
  reason: RefundReason;
  amount: number;
  taxAmount: number;
  currency: string;
  organizationId: string;
  orderId: string;
  subscriptionId: string | null;
  customerId: string;
  revokeBenefits: boolean;
};

/** @internal */
export const RefundMetadata$inboundSchema: z.ZodType<
  RefundMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number().int(), z.boolean()]);

/** @internal */
export type RefundMetadata$Outbound = string | number | boolean;

/** @internal */
export const RefundMetadata$outboundSchema: z.ZodType<
  RefundMetadata$Outbound,
  z.ZodTypeDef,
  RefundMetadata
> = z.union([z.string(), z.number().int(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefundMetadata$ {
  /** @deprecated use `RefundMetadata$inboundSchema` instead. */
  export const inboundSchema = RefundMetadata$inboundSchema;
  /** @deprecated use `RefundMetadata$outboundSchema` instead. */
  export const outboundSchema = RefundMetadata$outboundSchema;
  /** @deprecated use `RefundMetadata$Outbound` instead. */
  export type Outbound = RefundMetadata$Outbound;
}

export function refundMetadataToJSON(refundMetadata: RefundMetadata): string {
  return JSON.stringify(RefundMetadata$outboundSchema.parse(refundMetadata));
}

export function refundMetadataFromJSON(
  jsonString: string,
): SafeParseResult<RefundMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefundMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefundMetadata' from JSON`,
  );
}

/** @internal */
export const Refund$inboundSchema: z.ZodType<Refund, z.ZodTypeDef, unknown> = z
  .object({
    created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    modified_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ),
    id: z.string(),
    metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
    status: RefundStatus$inboundSchema,
    reason: RefundReason$inboundSchema,
    amount: z.number().int(),
    tax_amount: z.number().int(),
    currency: z.string(),
    organization_id: z.string(),
    order_id: z.string(),
    subscription_id: z.nullable(z.string()),
    customer_id: z.string(),
    revoke_benefits: z.boolean(),
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "modified_at": "modifiedAt",
      "tax_amount": "taxAmount",
      "organization_id": "organizationId",
      "order_id": "orderId",
      "subscription_id": "subscriptionId",
      "customer_id": "customerId",
      "revoke_benefits": "revokeBenefits",
    });
  });

/** @internal */
export type Refund$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  metadata: { [k: string]: string | number | boolean };
  status: string;
  reason: string;
  amount: number;
  tax_amount: number;
  currency: string;
  organization_id: string;
  order_id: string;
  subscription_id: string | null;
  customer_id: string;
  revoke_benefits: boolean;
};

/** @internal */
export const Refund$outboundSchema: z.ZodType<
  Refund$Outbound,
  z.ZodTypeDef,
  Refund
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
  status: RefundStatus$outboundSchema,
  reason: RefundReason$outboundSchema,
  amount: z.number().int(),
  taxAmount: z.number().int(),
  currency: z.string(),
  organizationId: z.string(),
  orderId: z.string(),
  subscriptionId: z.nullable(z.string()),
  customerId: z.string(),
  revokeBenefits: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    taxAmount: "tax_amount",
    organizationId: "organization_id",
    orderId: "order_id",
    subscriptionId: "subscription_id",
    customerId: "customer_id",
    revokeBenefits: "revoke_benefits",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Refund$ {
  /** @deprecated use `Refund$inboundSchema` instead. */
  export const inboundSchema = Refund$inboundSchema;
  /** @deprecated use `Refund$outboundSchema` instead. */
  export const outboundSchema = Refund$outboundSchema;
  /** @deprecated use `Refund$Outbound` instead. */
  export type Outbound = Refund$Outbound;
}

export function refundToJSON(refund: Refund): string {
  return JSON.stringify(Refund$outboundSchema.parse(refund));
}

export function refundFromJSON(
  jsonString: string,
): SafeParseResult<Refund, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Refund$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Refund' from JSON`,
  );
}
