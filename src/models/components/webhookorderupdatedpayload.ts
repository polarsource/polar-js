/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Order,
  Order$inboundSchema,
  Order$Outbound,
  Order$outboundSchema,
} from "./order.js";

/**
 * Sent when an order is updated.
 *
 * @remarks
 *
 * An order is updated when:
 *
 * * Its status changes, e.g. from `pending` to `paid`.
 * * It's refunded, partially or fully.
 *
 * **Discord & Slack support:** Full
 */
export type WebhookOrderUpdatedPayload = {
  type?: "order.updated" | undefined;
  data: Order;
};

/** @internal */
export const WebhookOrderUpdatedPayload$inboundSchema: z.ZodType<
  WebhookOrderUpdatedPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("order.updated").optional(),
  data: Order$inboundSchema,
});

/** @internal */
export type WebhookOrderUpdatedPayload$Outbound = {
  type: "order.updated";
  data: Order$Outbound;
};

/** @internal */
export const WebhookOrderUpdatedPayload$outboundSchema: z.ZodType<
  WebhookOrderUpdatedPayload$Outbound,
  z.ZodTypeDef,
  WebhookOrderUpdatedPayload
> = z.object({
  type: z.literal("order.updated").default("order.updated" as const),
  data: Order$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookOrderUpdatedPayload$ {
  /** @deprecated use `WebhookOrderUpdatedPayload$inboundSchema` instead. */
  export const inboundSchema = WebhookOrderUpdatedPayload$inboundSchema;
  /** @deprecated use `WebhookOrderUpdatedPayload$outboundSchema` instead. */
  export const outboundSchema = WebhookOrderUpdatedPayload$outboundSchema;
  /** @deprecated use `WebhookOrderUpdatedPayload$Outbound` instead. */
  export type Outbound = WebhookOrderUpdatedPayload$Outbound;
}

export function webhookOrderUpdatedPayloadToJSON(
  webhookOrderUpdatedPayload: WebhookOrderUpdatedPayload,
): string {
  return JSON.stringify(
    WebhookOrderUpdatedPayload$outboundSchema.parse(webhookOrderUpdatedPayload),
  );
}

export function webhookOrderUpdatedPayloadFromJSON(
  jsonString: string,
): SafeParseResult<WebhookOrderUpdatedPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookOrderUpdatedPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookOrderUpdatedPayload' from JSON`,
  );
}
