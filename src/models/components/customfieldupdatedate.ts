/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import {
  CustomFieldDateProperties,
  CustomFieldDateProperties$inboundSchema,
  CustomFieldDateProperties$Outbound,
  CustomFieldDateProperties$outboundSchema,
} from "./customfielddateproperties.js";

export const CustomFieldUpdateDateType = {
  Date: "date",
} as const;
export type CustomFieldUpdateDateType = ClosedEnum<
  typeof CustomFieldUpdateDateType
>;

/**
 * Schema to update a custom field of type date.
 */
export type CustomFieldUpdateDate = {
  /**
   * Key-value object allowing you to store additional information.
   *
   * @remarks
   *
   * The key must be a string with a maximum length of **40 characters**.
   * The value must be a string with a maximum length of **500 characters**.
   * You can store up to **50 key-value pairs**.
   */
  metadata?: { [k: string]: string } | null | undefined;
  name?: string | null | undefined;
  slug?: string | null | undefined;
  type?: "date" | undefined;
  properties?: CustomFieldDateProperties | null | undefined;
};

/** @internal */
export const CustomFieldUpdateDateType$inboundSchema: z.ZodNativeEnum<
  typeof CustomFieldUpdateDateType
> = z.nativeEnum(CustomFieldUpdateDateType);

/** @internal */
export const CustomFieldUpdateDateType$outboundSchema: z.ZodNativeEnum<
  typeof CustomFieldUpdateDateType
> = CustomFieldUpdateDateType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFieldUpdateDateType$ {
  /** @deprecated use `CustomFieldUpdateDateType$inboundSchema` instead. */
  export const inboundSchema = CustomFieldUpdateDateType$inboundSchema;
  /** @deprecated use `CustomFieldUpdateDateType$outboundSchema` instead. */
  export const outboundSchema = CustomFieldUpdateDateType$outboundSchema;
}

/** @internal */
export const CustomFieldUpdateDate$inboundSchema: z.ZodType<
  CustomFieldUpdateDate,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.nullable(z.record(z.string())).optional(),
  name: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  type: z.literal("date").optional(),
  properties: z.nullable(CustomFieldDateProperties$inboundSchema).optional(),
});

/** @internal */
export type CustomFieldUpdateDate$Outbound = {
  metadata?: { [k: string]: string } | null | undefined;
  name?: string | null | undefined;
  slug?: string | null | undefined;
  type: "date";
  properties?: CustomFieldDateProperties$Outbound | null | undefined;
};

/** @internal */
export const CustomFieldUpdateDate$outboundSchema: z.ZodType<
  CustomFieldUpdateDate$Outbound,
  z.ZodTypeDef,
  CustomFieldUpdateDate
> = z.object({
  metadata: z.nullable(z.record(z.string())).optional(),
  name: z.nullable(z.string()).optional(),
  slug: z.nullable(z.string()).optional(),
  type: z.literal("date").default("date"),
  properties: z.nullable(CustomFieldDateProperties$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFieldUpdateDate$ {
  /** @deprecated use `CustomFieldUpdateDate$inboundSchema` instead. */
  export const inboundSchema = CustomFieldUpdateDate$inboundSchema;
  /** @deprecated use `CustomFieldUpdateDate$outboundSchema` instead. */
  export const outboundSchema = CustomFieldUpdateDate$outboundSchema;
  /** @deprecated use `CustomFieldUpdateDate$Outbound` instead. */
  export type Outbound = CustomFieldUpdateDate$Outbound;
}
