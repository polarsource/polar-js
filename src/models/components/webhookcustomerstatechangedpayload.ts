/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CustomerState,
  CustomerState$inboundSchema,
  CustomerState$Outbound,
  CustomerState$outboundSchema,
} from "./customerstate.js";

/**
 * Sent when a customer state has changed.
 *
 * @remarks
 *
 * It's triggered when:
 *
 * * Customer is created, updated or deleted.
 * * A subscription is created or updated.
 * * A benefit is granted or revoked.
 *
 * **Discord & Slack support:** Basic
 */
export type WebhookCustomerStateChangedPayload = {
  type?: "customer.state_changed" | undefined;
  /**
   * A customer along with additional state information:
   *
   * @remarks
   *
   * * Active subscriptions
   * * Active benefits
   */
  data: CustomerState;
};

/** @internal */
export const WebhookCustomerStateChangedPayload$inboundSchema: z.ZodType<
  WebhookCustomerStateChangedPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("customer.state_changed").optional(),
  data: CustomerState$inboundSchema,
});

/** @internal */
export type WebhookCustomerStateChangedPayload$Outbound = {
  type: "customer.state_changed";
  data: CustomerState$Outbound;
};

/** @internal */
export const WebhookCustomerStateChangedPayload$outboundSchema: z.ZodType<
  WebhookCustomerStateChangedPayload$Outbound,
  z.ZodTypeDef,
  WebhookCustomerStateChangedPayload
> = z.object({
  type: z.literal("customer.state_changed").default(
    "customer.state_changed" as const,
  ),
  data: CustomerState$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookCustomerStateChangedPayload$ {
  /** @deprecated use `WebhookCustomerStateChangedPayload$inboundSchema` instead. */
  export const inboundSchema = WebhookCustomerStateChangedPayload$inboundSchema;
  /** @deprecated use `WebhookCustomerStateChangedPayload$outboundSchema` instead. */
  export const outboundSchema =
    WebhookCustomerStateChangedPayload$outboundSchema;
  /** @deprecated use `WebhookCustomerStateChangedPayload$Outbound` instead. */
  export type Outbound = WebhookCustomerStateChangedPayload$Outbound;
}

export function webhookCustomerStateChangedPayloadToJSON(
  webhookCustomerStateChangedPayload: WebhookCustomerStateChangedPayload,
): string {
  return JSON.stringify(
    WebhookCustomerStateChangedPayload$outboundSchema.parse(
      webhookCustomerStateChangedPayload,
    ),
  );
}

export function webhookCustomerStateChangedPayloadFromJSON(
  jsonString: string,
): SafeParseResult<WebhookCustomerStateChangedPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      WebhookCustomerStateChangedPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookCustomerStateChangedPayload' from JSON`,
  );
}
