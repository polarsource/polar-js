/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GrantType = {
  AuthorizationCode: "authorization_code",
} as const;
export type GrantType = ClosedEnum<typeof GrantType>;

export type Onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest = {
  grantType?: "authorization_code" | undefined;
  clientId: string;
  clientSecret: string;
  code: string;
  redirectUri: string;
};

/** @internal */
export const GrantType$inboundSchema: z.ZodNativeEnum<typeof GrantType> = z
  .nativeEnum(GrantType);

/** @internal */
export const GrantType$outboundSchema: z.ZodNativeEnum<typeof GrantType> =
  GrantType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantType$ {
  /** @deprecated use `GrantType$inboundSchema` instead. */
  export const inboundSchema = GrantType$inboundSchema;
  /** @deprecated use `GrantType$outboundSchema` instead. */
  export const outboundSchema = GrantType$outboundSchema;
}

/** @internal */
export const Onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest$inboundSchema:
  z.ZodType<
    Onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    grant_type: z.literal("authorization_code").optional(),
    client_id: z.string(),
    client_secret: z.string(),
    code: z.string(),
    redirect_uri: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "grant_type": "grantType",
      "client_id": "clientId",
      "client_secret": "clientSecret",
      "redirect_uri": "redirectUri",
    });
  });

/** @internal */
export type Onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest$Outbound =
  {
    grant_type: "authorization_code";
    client_id: string;
    client_secret: string;
    code: string;
    redirect_uri: string;
  };

/** @internal */
export const Onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest$outboundSchema:
  z.ZodType<
    Onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest$Outbound,
    z.ZodTypeDef,
    Onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest
  > = z.object({
    grantType: z.literal("authorization_code").default("authorization_code"),
    clientId: z.string(),
    clientSecret: z.string(),
    code: z.string(),
    redirectUri: z.string(),
  }).transform((v) => {
    return remap$(v, {
      grantType: "grant_type",
      clientId: "client_id",
      clientSecret: "client_secret",
      redirectUri: "redirect_uri",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest$ {
  /** @deprecated use `Onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest$inboundSchema` instead. */
  export const inboundSchema =
    Onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest$inboundSchema;
  /** @deprecated use `Onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest$outboundSchema` instead. */
  export const outboundSchema =
    Onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest$outboundSchema;
  /** @deprecated use `Onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest$Outbound` instead. */
  export type Outbound =
    Onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest$Outbound;
}

export function onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequestToJSON(
  onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest:
    Onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest,
): string {
  return JSON.stringify(
    Onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest$outboundSchema
      .parse(onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest),
  );
}

export function onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  Onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      Onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'Onev11oauth21tokenPostXComponentsAuthorizationCodeTokenRequest' from JSON`,
  );
}
