/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";
import {
  TaxIDFormat,
  TaxIDFormat$inboundSchema,
  TaxIDFormat$outboundSchema,
} from "./taxidformat.js";

export type CustomerCreateTaxId = string | TaxIDFormat;

export type CustomerCreate = {
  email: string;
  name?: string | null | undefined;
  billingAddress?: Address | null | undefined;
  taxId?: Array<string | TaxIDFormat> | null | undefined;
  /**
   * The ID of the organization owning the customer. **Required unless you use an organization token.**
   */
  organizationId?: string | null | undefined;
};

/** @internal */
export const CustomerCreateTaxId$inboundSchema: z.ZodType<
  CustomerCreateTaxId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), TaxIDFormat$inboundSchema]);

/** @internal */
export type CustomerCreateTaxId$Outbound = string | string;

/** @internal */
export const CustomerCreateTaxId$outboundSchema: z.ZodType<
  CustomerCreateTaxId$Outbound,
  z.ZodTypeDef,
  CustomerCreateTaxId
> = z.union([z.string(), TaxIDFormat$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerCreateTaxId$ {
  /** @deprecated use `CustomerCreateTaxId$inboundSchema` instead. */
  export const inboundSchema = CustomerCreateTaxId$inboundSchema;
  /** @deprecated use `CustomerCreateTaxId$outboundSchema` instead. */
  export const outboundSchema = CustomerCreateTaxId$outboundSchema;
  /** @deprecated use `CustomerCreateTaxId$Outbound` instead. */
  export type Outbound = CustomerCreateTaxId$Outbound;
}

export function customerCreateTaxIdToJSON(
  customerCreateTaxId: CustomerCreateTaxId,
): string {
  return JSON.stringify(
    CustomerCreateTaxId$outboundSchema.parse(customerCreateTaxId),
  );
}

export function customerCreateTaxIdFromJSON(
  jsonString: string,
): SafeParseResult<CustomerCreateTaxId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerCreateTaxId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerCreateTaxId' from JSON`,
  );
}

/** @internal */
export const CustomerCreate$inboundSchema: z.ZodType<
  CustomerCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  name: z.nullable(z.string()).optional(),
  billing_address: z.nullable(Address$inboundSchema).optional(),
  tax_id: z.nullable(z.array(z.union([z.string(), TaxIDFormat$inboundSchema])))
    .optional(),
  organization_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "billing_address": "billingAddress",
    "tax_id": "taxId",
    "organization_id": "organizationId",
  });
});

/** @internal */
export type CustomerCreate$Outbound = {
  email: string;
  name?: string | null | undefined;
  billing_address?: Address$Outbound | null | undefined;
  tax_id?: Array<string | string> | null | undefined;
  organization_id?: string | null | undefined;
};

/** @internal */
export const CustomerCreate$outboundSchema: z.ZodType<
  CustomerCreate$Outbound,
  z.ZodTypeDef,
  CustomerCreate
> = z.object({
  email: z.string(),
  name: z.nullable(z.string()).optional(),
  billingAddress: z.nullable(Address$outboundSchema).optional(),
  taxId: z.nullable(z.array(z.union([z.string(), TaxIDFormat$outboundSchema])))
    .optional(),
  organizationId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    billingAddress: "billing_address",
    taxId: "tax_id",
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerCreate$ {
  /** @deprecated use `CustomerCreate$inboundSchema` instead. */
  export const inboundSchema = CustomerCreate$inboundSchema;
  /** @deprecated use `CustomerCreate$outboundSchema` instead. */
  export const outboundSchema = CustomerCreate$outboundSchema;
  /** @deprecated use `CustomerCreate$Outbound` instead. */
  export type Outbound = CustomerCreate$Outbound;
}

export function customerCreateToJSON(customerCreate: CustomerCreate): string {
  return JSON.stringify(CustomerCreate$outboundSchema.parse(customerCreate));
}

export function customerCreateFromJSON(
  jsonString: string,
): SafeParseResult<CustomerCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerCreate' from JSON`,
  );
}
