/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ArticlePreview = {
  /**
   * Email address to send the preview to. The user must be registered on Polar.
   */
  email: string;
};

/** @internal */
export const ArticlePreview$inboundSchema: z.ZodType<
  ArticlePreview,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
});

/** @internal */
export type ArticlePreview$Outbound = {
  email: string;
};

/** @internal */
export const ArticlePreview$outboundSchema: z.ZodType<
  ArticlePreview$Outbound,
  z.ZodTypeDef,
  ArticlePreview
> = z.object({
  email: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArticlePreview$ {
  /** @deprecated use `ArticlePreview$inboundSchema` instead. */
  export const inboundSchema = ArticlePreview$inboundSchema;
  /** @deprecated use `ArticlePreview$outboundSchema` instead. */
  export const outboundSchema = ArticlePreview$outboundSchema;
  /** @deprecated use `ArticlePreview$Outbound` instead. */
  export type Outbound = ArticlePreview$Outbound;
}

export function articlePreviewToJSON(articlePreview: ArticlePreview): string {
  return JSON.stringify(ArticlePreview$outboundSchema.parse(articlePreview));
}

export function articlePreviewFromJSON(
  jsonString: string,
): SafeParseResult<ArticlePreview, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArticlePreview$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArticlePreview' from JSON`,
  );
}
