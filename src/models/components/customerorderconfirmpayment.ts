/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PaymentProcessor,
  PaymentProcessor$inboundSchema,
  PaymentProcessor$outboundSchema,
} from "./paymentprocessor.js";

/**
 * Schema to confirm a retry payment using either a saved payment method or a new confirmation token.
 */
export type CustomerOrderConfirmPayment = {
  /**
   * ID of the Stripe confirmation token for new payment methods.
   */
  confirmationTokenId?: string | null | undefined;
  /**
   * ID of an existing saved payment method.
   */
  paymentMethodId?: string | null | undefined;
  paymentProcessor?: PaymentProcessor | undefined;
};

/** @internal */
export const CustomerOrderConfirmPayment$inboundSchema: z.ZodType<
  CustomerOrderConfirmPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  confirmation_token_id: z.nullable(z.string()).optional(),
  payment_method_id: z.nullable(z.string()).optional(),
  payment_processor: PaymentProcessor$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "confirmation_token_id": "confirmationTokenId",
    "payment_method_id": "paymentMethodId",
    "payment_processor": "paymentProcessor",
  });
});

/** @internal */
export type CustomerOrderConfirmPayment$Outbound = {
  confirmation_token_id?: string | null | undefined;
  payment_method_id?: string | null | undefined;
  payment_processor?: string | undefined;
};

/** @internal */
export const CustomerOrderConfirmPayment$outboundSchema: z.ZodType<
  CustomerOrderConfirmPayment$Outbound,
  z.ZodTypeDef,
  CustomerOrderConfirmPayment
> = z.object({
  confirmationTokenId: z.nullable(z.string()).optional(),
  paymentMethodId: z.nullable(z.string()).optional(),
  paymentProcessor: PaymentProcessor$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    confirmationTokenId: "confirmation_token_id",
    paymentMethodId: "payment_method_id",
    paymentProcessor: "payment_processor",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerOrderConfirmPayment$ {
  /** @deprecated use `CustomerOrderConfirmPayment$inboundSchema` instead. */
  export const inboundSchema = CustomerOrderConfirmPayment$inboundSchema;
  /** @deprecated use `CustomerOrderConfirmPayment$outboundSchema` instead. */
  export const outboundSchema = CustomerOrderConfirmPayment$outboundSchema;
  /** @deprecated use `CustomerOrderConfirmPayment$Outbound` instead. */
  export type Outbound = CustomerOrderConfirmPayment$Outbound;
}

export function customerOrderConfirmPaymentToJSON(
  customerOrderConfirmPayment: CustomerOrderConfirmPayment,
): string {
  return JSON.stringify(
    CustomerOrderConfirmPayment$outboundSchema.parse(
      customerOrderConfirmPayment,
    ),
  );
}

export function customerOrderConfirmPaymentFromJSON(
  jsonString: string,
): SafeParseResult<CustomerOrderConfirmPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerOrderConfirmPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerOrderConfirmPayment' from JSON`,
  );
}
