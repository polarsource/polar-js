/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscriptionUser = {
  email: string;
  publicName: string;
  githubUsername: string | null;
  avatarUrl: string | null;
};

/** @internal */
export const SubscriptionUser$inboundSchema: z.ZodType<
  SubscriptionUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  public_name: z.string(),
  github_username: z.nullable(z.string()),
  avatar_url: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "public_name": "publicName",
    "github_username": "githubUsername",
    "avatar_url": "avatarUrl",
  });
});

/** @internal */
export type SubscriptionUser$Outbound = {
  email: string;
  public_name: string;
  github_username: string | null;
  avatar_url: string | null;
};

/** @internal */
export const SubscriptionUser$outboundSchema: z.ZodType<
  SubscriptionUser$Outbound,
  z.ZodTypeDef,
  SubscriptionUser
> = z.object({
  email: z.string(),
  publicName: z.string(),
  githubUsername: z.nullable(z.string()),
  avatarUrl: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    publicName: "public_name",
    githubUsername: "github_username",
    avatarUrl: "avatar_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUser$ {
  /** @deprecated use `SubscriptionUser$inboundSchema` instead. */
  export const inboundSchema = SubscriptionUser$inboundSchema;
  /** @deprecated use `SubscriptionUser$outboundSchema` instead. */
  export const outboundSchema = SubscriptionUser$outboundSchema;
  /** @deprecated use `SubscriptionUser$Outbound` instead. */
  export type Outbound = SubscriptionUser$Outbound;
}

export function subscriptionUserToJSON(
  subscriptionUser: SubscriptionUser,
): string {
  return JSON.stringify(
    SubscriptionUser$outboundSchema.parse(subscriptionUser),
  );
}

export function subscriptionUserFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionUser' from JSON`,
  );
}
