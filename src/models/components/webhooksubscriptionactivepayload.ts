/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Subscription,
  Subscription$inboundSchema,
  Subscription$Outbound,
  Subscription$outboundSchema,
} from "./subscription.js";

/**
 * Sent when a subscription becomes active,
 *
 * @remarks
 * whether because it's a new paid subscription or because payment was recovered.
 *
 * **Discord & Slack support:** Full
 */
export type WebhookSubscriptionActivePayload = {
  type?: "subscription.active" | undefined;
  data: Subscription;
};

/** @internal */
export const WebhookSubscriptionActivePayload$inboundSchema: z.ZodType<
  WebhookSubscriptionActivePayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("subscription.active").optional(),
  data: Subscription$inboundSchema,
});

/** @internal */
export type WebhookSubscriptionActivePayload$Outbound = {
  type: "subscription.active";
  data: Subscription$Outbound;
};

/** @internal */
export const WebhookSubscriptionActivePayload$outboundSchema: z.ZodType<
  WebhookSubscriptionActivePayload$Outbound,
  z.ZodTypeDef,
  WebhookSubscriptionActivePayload
> = z.object({
  type: z.literal("subscription.active").default(
    "subscription.active" as const,
  ),
  data: Subscription$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookSubscriptionActivePayload$ {
  /** @deprecated use `WebhookSubscriptionActivePayload$inboundSchema` instead. */
  export const inboundSchema = WebhookSubscriptionActivePayload$inboundSchema;
  /** @deprecated use `WebhookSubscriptionActivePayload$outboundSchema` instead. */
  export const outboundSchema = WebhookSubscriptionActivePayload$outboundSchema;
  /** @deprecated use `WebhookSubscriptionActivePayload$Outbound` instead. */
  export type Outbound = WebhookSubscriptionActivePayload$Outbound;
}

export function webhookSubscriptionActivePayloadToJSON(
  webhookSubscriptionActivePayload: WebhookSubscriptionActivePayload,
): string {
  return JSON.stringify(
    WebhookSubscriptionActivePayload$outboundSchema.parse(
      webhookSubscriptionActivePayload,
    ),
  );
}

export function webhookSubscriptionActivePayloadFromJSON(
  jsonString: string,
): SafeParseResult<WebhookSubscriptionActivePayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookSubscriptionActivePayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookSubscriptionActivePayload' from JSON`,
  );
}
