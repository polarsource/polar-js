/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Properties for a benefit of type `articles`.
 */
export type BenefitArticlesProperties = {
  /**
   * Whether the user can access paid articles.
   */
  paidArticles: boolean;
};

/** @internal */
export const BenefitArticlesProperties$inboundSchema: z.ZodType<
  BenefitArticlesProperties,
  z.ZodTypeDef,
  unknown
> = z.object({
  paid_articles: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "paid_articles": "paidArticles",
  });
});

/** @internal */
export type BenefitArticlesProperties$Outbound = {
  paid_articles: boolean;
};

/** @internal */
export const BenefitArticlesProperties$outboundSchema: z.ZodType<
  BenefitArticlesProperties$Outbound,
  z.ZodTypeDef,
  BenefitArticlesProperties
> = z.object({
  paidArticles: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    paidArticles: "paid_articles",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitArticlesProperties$ {
  /** @deprecated use `BenefitArticlesProperties$inboundSchema` instead. */
  export const inboundSchema = BenefitArticlesProperties$inboundSchema;
  /** @deprecated use `BenefitArticlesProperties$outboundSchema` instead. */
  export const outboundSchema = BenefitArticlesProperties$outboundSchema;
  /** @deprecated use `BenefitArticlesProperties$Outbound` instead. */
  export type Outbound = BenefitArticlesProperties$Outbound;
}

export function benefitArticlesPropertiesToJSON(
  benefitArticlesProperties: BenefitArticlesProperties,
): string {
  return JSON.stringify(
    BenefitArticlesProperties$outboundSchema.parse(benefitArticlesProperties),
  );
}

export function benefitArticlesPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<BenefitArticlesProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BenefitArticlesProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BenefitArticlesProperties' from JSON`,
  );
}
