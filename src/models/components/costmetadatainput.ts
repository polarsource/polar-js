/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount in cents.
 */
export type Amount = number | string;

export type CostMetadataInput = {
  /**
   * The amount in cents.
   */
  amount: number | string;
  /**
   * The currency. Currently, only `usd` is supported.
   */
  currency: string;
};

/** @internal */
export const Amount$inboundSchema: z.ZodType<Amount, z.ZodTypeDef, unknown> = z
  .union([z.number(), z.string()]);

/** @internal */
export type Amount$Outbound = number | string;

/** @internal */
export const Amount$outboundSchema: z.ZodType<
  Amount$Outbound,
  z.ZodTypeDef,
  Amount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Amount$ {
  /** @deprecated use `Amount$inboundSchema` instead. */
  export const inboundSchema = Amount$inboundSchema;
  /** @deprecated use `Amount$outboundSchema` instead. */
  export const outboundSchema = Amount$outboundSchema;
  /** @deprecated use `Amount$Outbound` instead. */
  export type Outbound = Amount$Outbound;
}

export function amountToJSON(amount: Amount): string {
  return JSON.stringify(Amount$outboundSchema.parse(amount));
}

export function amountFromJSON(
  jsonString: string,
): SafeParseResult<Amount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Amount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Amount' from JSON`,
  );
}

/** @internal */
export const CostMetadataInput$inboundSchema: z.ZodType<
  CostMetadataInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.union([z.number(), z.string()]),
  currency: z.string(),
});

/** @internal */
export type CostMetadataInput$Outbound = {
  amount: number | string;
  currency: string;
};

/** @internal */
export const CostMetadataInput$outboundSchema: z.ZodType<
  CostMetadataInput$Outbound,
  z.ZodTypeDef,
  CostMetadataInput
> = z.object({
  amount: z.union([z.number(), z.string()]),
  currency: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CostMetadataInput$ {
  /** @deprecated use `CostMetadataInput$inboundSchema` instead. */
  export const inboundSchema = CostMetadataInput$inboundSchema;
  /** @deprecated use `CostMetadataInput$outboundSchema` instead. */
  export const outboundSchema = CostMetadataInput$outboundSchema;
  /** @deprecated use `CostMetadataInput$Outbound` instead. */
  export type Outbound = CostMetadataInput$Outbound;
}

export function costMetadataInputToJSON(
  costMetadataInput: CostMetadataInput,
): string {
  return JSON.stringify(
    CostMetadataInput$outboundSchema.parse(costMetadataInput),
  );
}

export function costMetadataInputFromJSON(
  jsonString: string,
): SafeParseResult<CostMetadataInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CostMetadataInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CostMetadataInput' from JSON`,
  );
}
