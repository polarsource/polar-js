/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Refund,
  Refund$inboundSchema,
  Refund$Outbound,
  Refund$outboundSchema,
} from "./refund.js";

/**
 * Sent when a refund is updated.
 *
 * @remarks
 *
 * **Discord & Slack support:** Full
 */
export type WebhookRefundUpdatedPayload = {
  type?: "refund.updated" | undefined;
  data: Refund;
};

/** @internal */
export const WebhookRefundUpdatedPayload$inboundSchema: z.ZodType<
  WebhookRefundUpdatedPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("refund.updated").optional(),
  data: Refund$inboundSchema,
});

/** @internal */
export type WebhookRefundUpdatedPayload$Outbound = {
  type: "refund.updated";
  data: Refund$Outbound;
};

/** @internal */
export const WebhookRefundUpdatedPayload$outboundSchema: z.ZodType<
  WebhookRefundUpdatedPayload$Outbound,
  z.ZodTypeDef,
  WebhookRefundUpdatedPayload
> = z.object({
  type: z.literal("refund.updated").default("refund.updated" as const),
  data: Refund$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookRefundUpdatedPayload$ {
  /** @deprecated use `WebhookRefundUpdatedPayload$inboundSchema` instead. */
  export const inboundSchema = WebhookRefundUpdatedPayload$inboundSchema;
  /** @deprecated use `WebhookRefundUpdatedPayload$outboundSchema` instead. */
  export const outboundSchema = WebhookRefundUpdatedPayload$outboundSchema;
  /** @deprecated use `WebhookRefundUpdatedPayload$Outbound` instead. */
  export type Outbound = WebhookRefundUpdatedPayload$Outbound;
}

export function webhookRefundUpdatedPayloadToJSON(
  webhookRefundUpdatedPayload: WebhookRefundUpdatedPayload,
): string {
  return JSON.stringify(
    WebhookRefundUpdatedPayload$outboundSchema.parse(
      webhookRefundUpdatedPayload,
    ),
  );
}

export function webhookRefundUpdatedPayloadFromJSON(
  jsonString: string,
): SafeParseResult<WebhookRefundUpdatedPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookRefundUpdatedPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookRefundUpdatedPayload' from JSON`,
  );
}
