/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SubscriptionRecurringInterval,
  SubscriptionRecurringInterval$inboundSchema,
  SubscriptionRecurringInterval$outboundSchema,
} from "./subscriptionrecurringinterval.js";

export const AmountType = {
  Fixed: "fixed",
} as const;
export type AmountType = ClosedEnum<typeof AmountType>;

/**
 * The type of the price.
 */
export const ProductPriceRecurringFixedType = {
  Recurring: "recurring",
} as const;
/**
 * The type of the price.
 */
export type ProductPriceRecurringFixedType = ClosedEnum<
  typeof ProductPriceRecurringFixedType
>;

/**
 * A recurring price for a product, i.e. a subscription.
 */
export type ProductPriceRecurringFixed = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The ID of the price.
   */
  id: string;
  amountType?: "fixed" | undefined;
  /**
   * Whether the price is archived and no longer available.
   */
  isArchived: boolean;
  /**
   * The ID of the product owning the price.
   */
  productId: string;
  /**
   * The currency.
   */
  priceCurrency: string;
  /**
   * The price in cents.
   */
  priceAmount: number;
  /**
   * The type of the price.
   */
  type?: "recurring" | undefined;
  recurringInterval: SubscriptionRecurringInterval;
};

/** @internal */
export const AmountType$inboundSchema: z.ZodNativeEnum<typeof AmountType> = z
  .nativeEnum(AmountType);

/** @internal */
export const AmountType$outboundSchema: z.ZodNativeEnum<typeof AmountType> =
  AmountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AmountType$ {
  /** @deprecated use `AmountType$inboundSchema` instead. */
  export const inboundSchema = AmountType$inboundSchema;
  /** @deprecated use `AmountType$outboundSchema` instead. */
  export const outboundSchema = AmountType$outboundSchema;
}

/** @internal */
export const ProductPriceRecurringFixedType$inboundSchema: z.ZodNativeEnum<
  typeof ProductPriceRecurringFixedType
> = z.nativeEnum(ProductPriceRecurringFixedType);

/** @internal */
export const ProductPriceRecurringFixedType$outboundSchema: z.ZodNativeEnum<
  typeof ProductPriceRecurringFixedType
> = ProductPriceRecurringFixedType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductPriceRecurringFixedType$ {
  /** @deprecated use `ProductPriceRecurringFixedType$inboundSchema` instead. */
  export const inboundSchema = ProductPriceRecurringFixedType$inboundSchema;
  /** @deprecated use `ProductPriceRecurringFixedType$outboundSchema` instead. */
  export const outboundSchema = ProductPriceRecurringFixedType$outboundSchema;
}

/** @internal */
export const ProductPriceRecurringFixed$inboundSchema: z.ZodType<
  ProductPriceRecurringFixed,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  id: z.string(),
  amount_type: z.literal("fixed").optional(),
  is_archived: z.boolean(),
  product_id: z.string(),
  price_currency: z.string(),
  price_amount: z.number().int(),
  type: z.literal("recurring").optional(),
  recurring_interval: SubscriptionRecurringInterval$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "amount_type": "amountType",
    "is_archived": "isArchived",
    "product_id": "productId",
    "price_currency": "priceCurrency",
    "price_amount": "priceAmount",
    "recurring_interval": "recurringInterval",
  });
});

/** @internal */
export type ProductPriceRecurringFixed$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  amount_type: "fixed";
  is_archived: boolean;
  product_id: string;
  price_currency: string;
  price_amount: number;
  type: "recurring";
  recurring_interval: string;
};

/** @internal */
export const ProductPriceRecurringFixed$outboundSchema: z.ZodType<
  ProductPriceRecurringFixed$Outbound,
  z.ZodTypeDef,
  ProductPriceRecurringFixed
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  amountType: z.literal("fixed").default("fixed"),
  isArchived: z.boolean(),
  productId: z.string(),
  priceCurrency: z.string(),
  priceAmount: z.number().int(),
  type: z.literal("recurring").default("recurring"),
  recurringInterval: SubscriptionRecurringInterval$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    amountType: "amount_type",
    isArchived: "is_archived",
    productId: "product_id",
    priceCurrency: "price_currency",
    priceAmount: "price_amount",
    recurringInterval: "recurring_interval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductPriceRecurringFixed$ {
  /** @deprecated use `ProductPriceRecurringFixed$inboundSchema` instead. */
  export const inboundSchema = ProductPriceRecurringFixed$inboundSchema;
  /** @deprecated use `ProductPriceRecurringFixed$outboundSchema` instead. */
  export const outboundSchema = ProductPriceRecurringFixed$outboundSchema;
  /** @deprecated use `ProductPriceRecurringFixed$Outbound` instead. */
  export type Outbound = ProductPriceRecurringFixed$Outbound;
}

export function productPriceRecurringFixedToJSON(
  productPriceRecurringFixed: ProductPriceRecurringFixed,
): string {
  return JSON.stringify(
    ProductPriceRecurringFixed$outboundSchema.parse(productPriceRecurringFixed),
  );
}

export function productPriceRecurringFixedFromJSON(
  jsonString: string,
): SafeParseResult<ProductPriceRecurringFixed, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductPriceRecurringFixed$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductPriceRecurringFixed' from JSON`,
  );
}
