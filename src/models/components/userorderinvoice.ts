/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Order's invoice data.
 */
export type UserOrderInvoice = {
  /**
   * The URL to the invoice.
   */
  url: string;
};

/** @internal */
export const UserOrderInvoice$inboundSchema: z.ZodType<
  UserOrderInvoice,
  z.ZodTypeDef,
  unknown
> = z.object({
  url: z.string(),
});

/** @internal */
export type UserOrderInvoice$Outbound = {
  url: string;
};

/** @internal */
export const UserOrderInvoice$outboundSchema: z.ZodType<
  UserOrderInvoice$Outbound,
  z.ZodTypeDef,
  UserOrderInvoice
> = z.object({
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserOrderInvoice$ {
  /** @deprecated use `UserOrderInvoice$inboundSchema` instead. */
  export const inboundSchema = UserOrderInvoice$inboundSchema;
  /** @deprecated use `UserOrderInvoice$outboundSchema` instead. */
  export const outboundSchema = UserOrderInvoice$outboundSchema;
  /** @deprecated use `UserOrderInvoice$Outbound` instead. */
  export type Outbound = UserOrderInvoice$Outbound;
}

export function userOrderInvoiceToJSON(
  userOrderInvoice: UserOrderInvoice,
): string {
  return JSON.stringify(
    UserOrderInvoice$outboundSchema.parse(userOrderInvoice),
  );
}

export function userOrderInvoiceFromJSON(
  jsonString: string,
): SafeParseResult<UserOrderInvoice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserOrderInvoice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserOrderInvoice' from JSON`,
  );
}
