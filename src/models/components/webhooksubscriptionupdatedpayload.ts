/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import {
  SubscriptionInput,
  SubscriptionInput$inboundSchema,
  SubscriptionInput$Outbound,
  SubscriptionInput$outboundSchema,
} from "./subscriptioninput.js";

export const WebhookSubscriptionUpdatedPayloadType = {
  SubscriptionUpdated: "subscription.updated",
} as const;
export type WebhookSubscriptionUpdatedPayloadType = ClosedEnum<
  typeof WebhookSubscriptionUpdatedPayloadType
>;

/**
 * Sent when a subscription is updated. This event fires for all changes to the subscription, including renewals.
 *
 * @remarks
 *
 * If you want more specific events, you can listen to `subscription.active`, `subscription.canceled`, and `subscription.revoked`.
 *
 * To listen specifically for renewals, you can listen to `order.created` events and check the `billing_reason` field.
 *
 * **Discord & Slack support:** On cancellation and revocation. Renewals are skipped.
 */
export type WebhookSubscriptionUpdatedPayload = {
  type?: "subscription.updated" | undefined;
  data: SubscriptionInput;
};

/** @internal */
export const WebhookSubscriptionUpdatedPayloadType$inboundSchema:
  z.ZodNativeEnum<typeof WebhookSubscriptionUpdatedPayloadType> = z.nativeEnum(
    WebhookSubscriptionUpdatedPayloadType,
  );

/** @internal */
export const WebhookSubscriptionUpdatedPayloadType$outboundSchema:
  z.ZodNativeEnum<typeof WebhookSubscriptionUpdatedPayloadType> =
    WebhookSubscriptionUpdatedPayloadType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookSubscriptionUpdatedPayloadType$ {
  /** @deprecated use `WebhookSubscriptionUpdatedPayloadType$inboundSchema` instead. */
  export const inboundSchema =
    WebhookSubscriptionUpdatedPayloadType$inboundSchema;
  /** @deprecated use `WebhookSubscriptionUpdatedPayloadType$outboundSchema` instead. */
  export const outboundSchema =
    WebhookSubscriptionUpdatedPayloadType$outboundSchema;
}

/** @internal */
export const WebhookSubscriptionUpdatedPayload$inboundSchema: z.ZodType<
  WebhookSubscriptionUpdatedPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("subscription.updated").optional(),
  data: SubscriptionInput$inboundSchema,
});

/** @internal */
export type WebhookSubscriptionUpdatedPayload$Outbound = {
  type: "subscription.updated";
  data: SubscriptionInput$Outbound;
};

/** @internal */
export const WebhookSubscriptionUpdatedPayload$outboundSchema: z.ZodType<
  WebhookSubscriptionUpdatedPayload$Outbound,
  z.ZodTypeDef,
  WebhookSubscriptionUpdatedPayload
> = z.object({
  type: z.literal("subscription.updated").default("subscription.updated"),
  data: SubscriptionInput$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookSubscriptionUpdatedPayload$ {
  /** @deprecated use `WebhookSubscriptionUpdatedPayload$inboundSchema` instead. */
  export const inboundSchema = WebhookSubscriptionUpdatedPayload$inboundSchema;
  /** @deprecated use `WebhookSubscriptionUpdatedPayload$outboundSchema` instead. */
  export const outboundSchema =
    WebhookSubscriptionUpdatedPayload$outboundSchema;
  /** @deprecated use `WebhookSubscriptionUpdatedPayload$Outbound` instead. */
  export type Outbound = WebhookSubscriptionUpdatedPayload$Outbound;
}
