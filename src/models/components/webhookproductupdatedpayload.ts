/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Product,
  Product$inboundSchema,
  Product$Outbound,
  Product$outboundSchema,
} from "./product.js";

/**
 * Sent when a product is updated.
 *
 * @remarks
 *
 * **Discord & Slack support:** Basic
 */
export type WebhookProductUpdatedPayload = {
  type?: "product.updated" | undefined;
  /**
   * A product.
   */
  data: Product;
};

/** @internal */
export const WebhookProductUpdatedPayload$inboundSchema: z.ZodType<
  WebhookProductUpdatedPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("product.updated").optional(),
  data: Product$inboundSchema,
});

/** @internal */
export type WebhookProductUpdatedPayload$Outbound = {
  type: "product.updated";
  data: Product$Outbound;
};

/** @internal */
export const WebhookProductUpdatedPayload$outboundSchema: z.ZodType<
  WebhookProductUpdatedPayload$Outbound,
  z.ZodTypeDef,
  WebhookProductUpdatedPayload
> = z.object({
  type: z.literal("product.updated").default("product.updated" as const),
  data: Product$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookProductUpdatedPayload$ {
  /** @deprecated use `WebhookProductUpdatedPayload$inboundSchema` instead. */
  export const inboundSchema = WebhookProductUpdatedPayload$inboundSchema;
  /** @deprecated use `WebhookProductUpdatedPayload$outboundSchema` instead. */
  export const outboundSchema = WebhookProductUpdatedPayload$outboundSchema;
  /** @deprecated use `WebhookProductUpdatedPayload$Outbound` instead. */
  export type Outbound = WebhookProductUpdatedPayload$Outbound;
}

export function webhookProductUpdatedPayloadToJSON(
  webhookProductUpdatedPayload: WebhookProductUpdatedPayload,
): string {
  return JSON.stringify(
    WebhookProductUpdatedPayload$outboundSchema.parse(
      webhookProductUpdatedPayload,
    ),
  );
}

export function webhookProductUpdatedPayloadFromJSON(
  jsonString: string,
): SafeParseResult<WebhookProductUpdatedPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookProductUpdatedPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookProductUpdatedPayload' from JSON`,
  );
}
