/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BenefitMeterCreditCreateProperties,
  BenefitMeterCreditCreateProperties$inboundSchema,
  BenefitMeterCreditCreateProperties$Outbound,
  BenefitMeterCreditCreateProperties$outboundSchema,
} from "./benefitmetercreditcreateproperties.js";

/**
 * Schema to create a benefit of type `meter_unit`.
 */
export type BenefitMeterCreditCreate = {
  type?: "meter_credit" | undefined;
  /**
   * The description of the benefit. Will be displayed on products having this benefit.
   */
  description: string;
  /**
   * The ID of the organization owning the benefit. **Required unless you use an organization token.**
   */
  organizationId?: string | null | undefined;
  /**
   * Properties for creating a benefit of type `meter_unit`.
   */
  properties: BenefitMeterCreditCreateProperties;
};

/** @internal */
export const BenefitMeterCreditCreate$inboundSchema: z.ZodType<
  BenefitMeterCreditCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("meter_credit").optional(),
  description: z.string(),
  organization_id: z.nullable(z.string()).optional(),
  properties: BenefitMeterCreditCreateProperties$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
  });
});

/** @internal */
export type BenefitMeterCreditCreate$Outbound = {
  type: "meter_credit";
  description: string;
  organization_id?: string | null | undefined;
  properties: BenefitMeterCreditCreateProperties$Outbound;
};

/** @internal */
export const BenefitMeterCreditCreate$outboundSchema: z.ZodType<
  BenefitMeterCreditCreate$Outbound,
  z.ZodTypeDef,
  BenefitMeterCreditCreate
> = z.object({
  type: z.literal("meter_credit").default("meter_credit" as const),
  description: z.string(),
  organizationId: z.nullable(z.string()).optional(),
  properties: BenefitMeterCreditCreateProperties$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitMeterCreditCreate$ {
  /** @deprecated use `BenefitMeterCreditCreate$inboundSchema` instead. */
  export const inboundSchema = BenefitMeterCreditCreate$inboundSchema;
  /** @deprecated use `BenefitMeterCreditCreate$outboundSchema` instead. */
  export const outboundSchema = BenefitMeterCreditCreate$outboundSchema;
  /** @deprecated use `BenefitMeterCreditCreate$Outbound` instead. */
  export type Outbound = BenefitMeterCreditCreate$Outbound;
}

export function benefitMeterCreditCreateToJSON(
  benefitMeterCreditCreate: BenefitMeterCreditCreate,
): string {
  return JSON.stringify(
    BenefitMeterCreditCreate$outboundSchema.parse(benefitMeterCreditCreate),
  );
}

export function benefitMeterCreditCreateFromJSON(
  jsonString: string,
): SafeParseResult<BenefitMeterCreditCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BenefitMeterCreditCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BenefitMeterCreditCreate' from JSON`,
  );
}
