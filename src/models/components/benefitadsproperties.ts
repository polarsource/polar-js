/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Properties for a benefit of type `ads`.
 */
export type BenefitAdsProperties = {
  /**
   * The height of the displayed ad.
   */
  imageHeight?: number | undefined;
  /**
   * The width of the displayed ad.
   */
  imageWidth?: number | undefined;
};

/** @internal */
export const BenefitAdsProperties$inboundSchema: z.ZodType<
  BenefitAdsProperties,
  z.ZodTypeDef,
  unknown
> = z.object({
  image_height: z.number().int().default(400),
  image_width: z.number().int().default(400),
}).transform((v) => {
  return remap$(v, {
    "image_height": "imageHeight",
    "image_width": "imageWidth",
  });
});

/** @internal */
export type BenefitAdsProperties$Outbound = {
  image_height: number;
  image_width: number;
};

/** @internal */
export const BenefitAdsProperties$outboundSchema: z.ZodType<
  BenefitAdsProperties$Outbound,
  z.ZodTypeDef,
  BenefitAdsProperties
> = z.object({
  imageHeight: z.number().int().default(400),
  imageWidth: z.number().int().default(400),
}).transform((v) => {
  return remap$(v, {
    imageHeight: "image_height",
    imageWidth: "image_width",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitAdsProperties$ {
  /** @deprecated use `BenefitAdsProperties$inboundSchema` instead. */
  export const inboundSchema = BenefitAdsProperties$inboundSchema;
  /** @deprecated use `BenefitAdsProperties$outboundSchema` instead. */
  export const outboundSchema = BenefitAdsProperties$outboundSchema;
  /** @deprecated use `BenefitAdsProperties$Outbound` instead. */
  export type Outbound = BenefitAdsProperties$Outbound;
}

export function benefitAdsPropertiesToJSON(
  benefitAdsProperties: BenefitAdsProperties,
): string {
  return JSON.stringify(
    BenefitAdsProperties$outboundSchema.parse(benefitAdsProperties),
  );
}

export function benefitAdsPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<BenefitAdsProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BenefitAdsProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BenefitAdsProperties' from JSON`,
  );
}
