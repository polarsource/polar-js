/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerCustomerSession = {
  expiresAt: Date;
  returnUrl: string | null;
};

/** @internal */
export const CustomerCustomerSession$inboundSchema: z.ZodType<
  CustomerCustomerSession,
  z.ZodTypeDef,
  unknown
> = z.object({
  expires_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  return_url: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "expires_at": "expiresAt",
    "return_url": "returnUrl",
  });
});

/** @internal */
export type CustomerCustomerSession$Outbound = {
  expires_at: string;
  return_url: string | null;
};

/** @internal */
export const CustomerCustomerSession$outboundSchema: z.ZodType<
  CustomerCustomerSession$Outbound,
  z.ZodTypeDef,
  CustomerCustomerSession
> = z.object({
  expiresAt: z.date().transform(v => v.toISOString()),
  returnUrl: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    expiresAt: "expires_at",
    returnUrl: "return_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerCustomerSession$ {
  /** @deprecated use `CustomerCustomerSession$inboundSchema` instead. */
  export const inboundSchema = CustomerCustomerSession$inboundSchema;
  /** @deprecated use `CustomerCustomerSession$outboundSchema` instead. */
  export const outboundSchema = CustomerCustomerSession$outboundSchema;
  /** @deprecated use `CustomerCustomerSession$Outbound` instead. */
  export type Outbound = CustomerCustomerSession$Outbound;
}

export function customerCustomerSessionToJSON(
  customerCustomerSession: CustomerCustomerSession,
): string {
  return JSON.stringify(
    CustomerCustomerSession$outboundSchema.parse(customerCustomerSession),
  );
}

export function customerCustomerSessionFromJSON(
  jsonString: string,
): SafeParseResult<CustomerCustomerSession, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerCustomerSession$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerCustomerSession' from JSON`,
  );
}
