/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscriptionCreateExternalCustomerMetadata =
  | string
  | number
  | number
  | boolean;

/**
 * Create a subscription for an existing customer identified by an external ID.
 */
export type SubscriptionCreateExternalCustomer = {
  /**
   * Key-value object allowing you to store additional information.
   *
   * @remarks
   *
   * The key must be a string with a maximum length of **40 characters**.
   * The value must be either:
   *
   * * A string with a maximum length of **500 characters**
   * * An integer
   * * A floating-point number
   * * A boolean
   *
   * You can store up to **50 key-value pairs**.
   */
  metadata?: { [k: string]: string | number | number | boolean } | undefined;
  /**
   * The ID of the recurring product to subscribe to. Must be a free product, otherwise the customer should go through a checkout flow.
   */
  productId: string;
  /**
   * The ID of the customer in your system to create the subscription for. It must already exist in Polar.
   */
  externalCustomerId: string;
};

/** @internal */
export const SubscriptionCreateExternalCustomerMetadata$inboundSchema:
  z.ZodType<SubscriptionCreateExternalCustomerMetadata, z.ZodTypeDef, unknown> =
    z.union([z.string(), z.number().int(), z.number(), z.boolean()]);

/** @internal */
export type SubscriptionCreateExternalCustomerMetadata$Outbound =
  | string
  | number
  | number
  | boolean;

/** @internal */
export const SubscriptionCreateExternalCustomerMetadata$outboundSchema:
  z.ZodType<
    SubscriptionCreateExternalCustomerMetadata$Outbound,
    z.ZodTypeDef,
    SubscriptionCreateExternalCustomerMetadata
  > = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateExternalCustomerMetadata$ {
  /** @deprecated use `SubscriptionCreateExternalCustomerMetadata$inboundSchema` instead. */
  export const inboundSchema =
    SubscriptionCreateExternalCustomerMetadata$inboundSchema;
  /** @deprecated use `SubscriptionCreateExternalCustomerMetadata$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCreateExternalCustomerMetadata$outboundSchema;
  /** @deprecated use `SubscriptionCreateExternalCustomerMetadata$Outbound` instead. */
  export type Outbound = SubscriptionCreateExternalCustomerMetadata$Outbound;
}

export function subscriptionCreateExternalCustomerMetadataToJSON(
  subscriptionCreateExternalCustomerMetadata:
    SubscriptionCreateExternalCustomerMetadata,
): string {
  return JSON.stringify(
    SubscriptionCreateExternalCustomerMetadata$outboundSchema.parse(
      subscriptionCreateExternalCustomerMetadata,
    ),
  );
}

export function subscriptionCreateExternalCustomerMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  SubscriptionCreateExternalCustomerMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCreateExternalCustomerMetadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'SubscriptionCreateExternalCustomerMetadata' from JSON`,
  );
}

/** @internal */
export const SubscriptionCreateExternalCustomer$inboundSchema: z.ZodType<
  SubscriptionCreateExternalCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.record(
    z.union([z.string(), z.number().int(), z.number(), z.boolean()]),
  ).optional(),
  product_id: z.string(),
  external_customer_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "product_id": "productId",
    "external_customer_id": "externalCustomerId",
  });
});

/** @internal */
export type SubscriptionCreateExternalCustomer$Outbound = {
  metadata?: { [k: string]: string | number | number | boolean } | undefined;
  product_id: string;
  external_customer_id: string;
};

/** @internal */
export const SubscriptionCreateExternalCustomer$outboundSchema: z.ZodType<
  SubscriptionCreateExternalCustomer$Outbound,
  z.ZodTypeDef,
  SubscriptionCreateExternalCustomer
> = z.object({
  metadata: z.record(
    z.union([z.string(), z.number().int(), z.number(), z.boolean()]),
  ).optional(),
  productId: z.string(),
  externalCustomerId: z.string(),
}).transform((v) => {
  return remap$(v, {
    productId: "product_id",
    externalCustomerId: "external_customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionCreateExternalCustomer$ {
  /** @deprecated use `SubscriptionCreateExternalCustomer$inboundSchema` instead. */
  export const inboundSchema = SubscriptionCreateExternalCustomer$inboundSchema;
  /** @deprecated use `SubscriptionCreateExternalCustomer$outboundSchema` instead. */
  export const outboundSchema =
    SubscriptionCreateExternalCustomer$outboundSchema;
  /** @deprecated use `SubscriptionCreateExternalCustomer$Outbound` instead. */
  export type Outbound = SubscriptionCreateExternalCustomer$Outbound;
}

export function subscriptionCreateExternalCustomerToJSON(
  subscriptionCreateExternalCustomer: SubscriptionCreateExternalCustomer,
): string {
  return JSON.stringify(
    SubscriptionCreateExternalCustomer$outboundSchema.parse(
      subscriptionCreateExternalCustomer,
    ),
  );
}

export function subscriptionCreateExternalCustomerFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionCreateExternalCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SubscriptionCreateExternalCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionCreateExternalCustomer' from JSON`,
  );
}
