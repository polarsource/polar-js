/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CustomerCancellationReason,
  CustomerCancellationReason$inboundSchema,
  CustomerCancellationReason$outboundSchema,
} from "./customercancellationreason.js";
import {
  DiscountFixedOnceForeverDurationBase,
  DiscountFixedOnceForeverDurationBase$inboundSchema,
  DiscountFixedOnceForeverDurationBase$Outbound,
  DiscountFixedOnceForeverDurationBase$outboundSchema,
} from "./discountfixedonceforeverdurationbase.js";
import {
  DiscountFixedRepeatDurationBase,
  DiscountFixedRepeatDurationBase$inboundSchema,
  DiscountFixedRepeatDurationBase$Outbound,
  DiscountFixedRepeatDurationBase$outboundSchema,
} from "./discountfixedrepeatdurationbase.js";
import {
  DiscountPercentageOnceForeverDurationBase,
  DiscountPercentageOnceForeverDurationBase$inboundSchema,
  DiscountPercentageOnceForeverDurationBase$Outbound,
  DiscountPercentageOnceForeverDurationBase$outboundSchema,
} from "./discountpercentageonceforeverdurationbase.js";
import {
  DiscountPercentageRepeatDurationBase,
  DiscountPercentageRepeatDurationBase$inboundSchema,
  DiscountPercentageRepeatDurationBase$Outbound,
  DiscountPercentageRepeatDurationBase$outboundSchema,
} from "./discountpercentagerepeatdurationbase.js";
import {
  LegacyRecurringProductPrice,
  LegacyRecurringProductPrice$inboundSchema,
  LegacyRecurringProductPrice$Outbound,
  LegacyRecurringProductPrice$outboundSchema,
} from "./legacyrecurringproductprice.js";
import {
  Product,
  Product$inboundSchema,
  Product$Outbound,
  Product$outboundSchema,
} from "./product.js";
import {
  ProductPrice,
  ProductPrice$inboundSchema,
  ProductPrice$Outbound,
  ProductPrice$outboundSchema,
} from "./productprice.js";
import {
  SubscriptionCustomer,
  SubscriptionCustomer$inboundSchema,
  SubscriptionCustomer$Outbound,
  SubscriptionCustomer$outboundSchema,
} from "./subscriptioncustomer.js";
import {
  SubscriptionRecurringInterval,
  SubscriptionRecurringInterval$inboundSchema,
  SubscriptionRecurringInterval$outboundSchema,
} from "./subscriptionrecurringinterval.js";
import {
  SubscriptionStatus,
  SubscriptionStatus$inboundSchema,
  SubscriptionStatus$outboundSchema,
} from "./subscriptionstatus.js";
import {
  SubscriptionUser,
  SubscriptionUser$inboundSchema,
  SubscriptionUser$Outbound,
  SubscriptionUser$outboundSchema,
} from "./subscriptionuser.js";

export type Metadata = string | number | boolean;

export type CustomFieldData = string | number | boolean | Date;

export type SubscriptionDiscount =
  | DiscountPercentageOnceForeverDurationBase
  | DiscountFixedOnceForeverDurationBase
  | DiscountPercentageRepeatDurationBase
  | DiscountFixedRepeatDurationBase;

/**
 * @deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type Price = LegacyRecurringProductPrice | ProductPrice;

export type SubscriptionPrices = LegacyRecurringProductPrice | ProductPrice;

export type Subscription = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The ID of the object.
   */
  id: string;
  /**
   * The amount of the subscription.
   */
  amount: number;
  /**
   * The currency of the subscription.
   */
  currency: string;
  recurringInterval: SubscriptionRecurringInterval;
  status: SubscriptionStatus;
  /**
   * The start timestamp of the current billing period.
   */
  currentPeriodStart: Date;
  /**
   * The end timestamp of the current billing period.
   */
  currentPeriodEnd: Date | null;
  /**
   * Whether the subscription will be canceled at the end of the current period.
   */
  cancelAtPeriodEnd: boolean;
  /**
   * The timestamp when the subscription was canceled. The subscription might still be active if `cancel_at_period_end` is `true`.
   */
  canceledAt: Date | null;
  /**
   * The timestamp when the subscription started.
   */
  startedAt: Date | null;
  /**
   * The timestamp when the subscription will end.
   */
  endsAt: Date | null;
  /**
   * The timestamp when the subscription ended.
   */
  endedAt: Date | null;
  /**
   * The ID of the subscribed customer.
   */
  customerId: string;
  /**
   * The ID of the subscribed product.
   */
  productId: string;
  /**
   * The ID of the applied discount, if any.
   */
  discountId: string | null;
  checkoutId: string | null;
  customerCancellationReason: CustomerCancellationReason | null;
  customerCancellationComment: string | null;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  priceId: string;
  metadata: { [k: string]: string | number | boolean };
  /**
   * Key-value object storing custom field values.
   */
  customFieldData?:
    | { [k: string]: string | number | boolean | Date | null }
    | undefined;
  customer: SubscriptionCustomer;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  userId: string;
  user: SubscriptionUser;
  /**
   * A product.
   */
  product: Product;
  discount:
    | DiscountPercentageOnceForeverDurationBase
    | DiscountFixedOnceForeverDurationBase
    | DiscountPercentageRepeatDurationBase
    | DiscountFixedRepeatDurationBase
    | null;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  price: LegacyRecurringProductPrice | ProductPrice;
  /**
   * List of enabled prices for the subscription.
   */
  prices: Array<LegacyRecurringProductPrice | ProductPrice>;
};

/** @internal */
export const Metadata$inboundSchema: z.ZodType<
  Metadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number().int(), z.boolean()]);

/** @internal */
export type Metadata$Outbound = string | number | boolean;

/** @internal */
export const Metadata$outboundSchema: z.ZodType<
  Metadata$Outbound,
  z.ZodTypeDef,
  Metadata
> = z.union([z.string(), z.number().int(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
  /** @deprecated use `Metadata$inboundSchema` instead. */
  export const inboundSchema = Metadata$inboundSchema;
  /** @deprecated use `Metadata$outboundSchema` instead. */
  export const outboundSchema = Metadata$outboundSchema;
  /** @deprecated use `Metadata$Outbound` instead. */
  export type Outbound = Metadata$Outbound;
}

export function metadataToJSON(metadata: Metadata): string {
  return JSON.stringify(Metadata$outboundSchema.parse(metadata));
}

export function metadataFromJSON(
  jsonString: string,
): SafeParseResult<Metadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metadata' from JSON`,
  );
}

/** @internal */
export const CustomFieldData$inboundSchema: z.ZodType<
  CustomFieldData,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number().int(),
  z.boolean(),
  z.string().datetime({ offset: true }).transform(v => new Date(v)),
]);

/** @internal */
export type CustomFieldData$Outbound = string | number | boolean | string;

/** @internal */
export const CustomFieldData$outboundSchema: z.ZodType<
  CustomFieldData$Outbound,
  z.ZodTypeDef,
  CustomFieldData
> = z.union([
  z.string(),
  z.number().int(),
  z.boolean(),
  z.date().transform(v => v.toISOString()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFieldData$ {
  /** @deprecated use `CustomFieldData$inboundSchema` instead. */
  export const inboundSchema = CustomFieldData$inboundSchema;
  /** @deprecated use `CustomFieldData$outboundSchema` instead. */
  export const outboundSchema = CustomFieldData$outboundSchema;
  /** @deprecated use `CustomFieldData$Outbound` instead. */
  export type Outbound = CustomFieldData$Outbound;
}

export function customFieldDataToJSON(
  customFieldData: CustomFieldData,
): string {
  return JSON.stringify(CustomFieldData$outboundSchema.parse(customFieldData));
}

export function customFieldDataFromJSON(
  jsonString: string,
): SafeParseResult<CustomFieldData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomFieldData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomFieldData' from JSON`,
  );
}

/** @internal */
export const SubscriptionDiscount$inboundSchema: z.ZodType<
  SubscriptionDiscount,
  z.ZodTypeDef,
  unknown
> = z.union([
  DiscountPercentageOnceForeverDurationBase$inboundSchema,
  DiscountFixedOnceForeverDurationBase$inboundSchema,
  DiscountPercentageRepeatDurationBase$inboundSchema,
  DiscountFixedRepeatDurationBase$inboundSchema,
]);

/** @internal */
export type SubscriptionDiscount$Outbound =
  | DiscountPercentageOnceForeverDurationBase$Outbound
  | DiscountFixedOnceForeverDurationBase$Outbound
  | DiscountPercentageRepeatDurationBase$Outbound
  | DiscountFixedRepeatDurationBase$Outbound;

/** @internal */
export const SubscriptionDiscount$outboundSchema: z.ZodType<
  SubscriptionDiscount$Outbound,
  z.ZodTypeDef,
  SubscriptionDiscount
> = z.union([
  DiscountPercentageOnceForeverDurationBase$outboundSchema,
  DiscountFixedOnceForeverDurationBase$outboundSchema,
  DiscountPercentageRepeatDurationBase$outboundSchema,
  DiscountFixedRepeatDurationBase$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionDiscount$ {
  /** @deprecated use `SubscriptionDiscount$inboundSchema` instead. */
  export const inboundSchema = SubscriptionDiscount$inboundSchema;
  /** @deprecated use `SubscriptionDiscount$outboundSchema` instead. */
  export const outboundSchema = SubscriptionDiscount$outboundSchema;
  /** @deprecated use `SubscriptionDiscount$Outbound` instead. */
  export type Outbound = SubscriptionDiscount$Outbound;
}

export function subscriptionDiscountToJSON(
  subscriptionDiscount: SubscriptionDiscount,
): string {
  return JSON.stringify(
    SubscriptionDiscount$outboundSchema.parse(subscriptionDiscount),
  );
}

export function subscriptionDiscountFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionDiscount' from JSON`,
  );
}

/** @internal */
export const Price$inboundSchema: z.ZodType<Price, z.ZodTypeDef, unknown> = z
  .union([
    LegacyRecurringProductPrice$inboundSchema,
    ProductPrice$inboundSchema,
  ]);

/** @internal */
export type Price$Outbound =
  | LegacyRecurringProductPrice$Outbound
  | ProductPrice$Outbound;

/** @internal */
export const Price$outboundSchema: z.ZodType<
  Price$Outbound,
  z.ZodTypeDef,
  Price
> = z.union([
  LegacyRecurringProductPrice$outboundSchema,
  ProductPrice$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Price$ {
  /** @deprecated use `Price$inboundSchema` instead. */
  export const inboundSchema = Price$inboundSchema;
  /** @deprecated use `Price$outboundSchema` instead. */
  export const outboundSchema = Price$outboundSchema;
  /** @deprecated use `Price$Outbound` instead. */
  export type Outbound = Price$Outbound;
}

export function priceToJSON(price: Price): string {
  return JSON.stringify(Price$outboundSchema.parse(price));
}

export function priceFromJSON(
  jsonString: string,
): SafeParseResult<Price, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Price$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Price' from JSON`,
  );
}

/** @internal */
export const SubscriptionPrices$inboundSchema: z.ZodType<
  SubscriptionPrices,
  z.ZodTypeDef,
  unknown
> = z.union([
  LegacyRecurringProductPrice$inboundSchema,
  ProductPrice$inboundSchema,
]);

/** @internal */
export type SubscriptionPrices$Outbound =
  | LegacyRecurringProductPrice$Outbound
  | ProductPrice$Outbound;

/** @internal */
export const SubscriptionPrices$outboundSchema: z.ZodType<
  SubscriptionPrices$Outbound,
  z.ZodTypeDef,
  SubscriptionPrices
> = z.union([
  LegacyRecurringProductPrice$outboundSchema,
  ProductPrice$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionPrices$ {
  /** @deprecated use `SubscriptionPrices$inboundSchema` instead. */
  export const inboundSchema = SubscriptionPrices$inboundSchema;
  /** @deprecated use `SubscriptionPrices$outboundSchema` instead. */
  export const outboundSchema = SubscriptionPrices$outboundSchema;
  /** @deprecated use `SubscriptionPrices$Outbound` instead. */
  export type Outbound = SubscriptionPrices$Outbound;
}

export function subscriptionPricesToJSON(
  subscriptionPrices: SubscriptionPrices,
): string {
  return JSON.stringify(
    SubscriptionPrices$outboundSchema.parse(subscriptionPrices),
  );
}

export function subscriptionPricesFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionPrices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionPrices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionPrices' from JSON`,
  );
}

/** @internal */
export const Subscription$inboundSchema: z.ZodType<
  Subscription,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  id: z.string(),
  amount: z.number().int(),
  currency: z.string(),
  recurring_interval: SubscriptionRecurringInterval$inboundSchema,
  status: SubscriptionStatus$inboundSchema,
  current_period_start: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  current_period_end: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  cancel_at_period_end: z.boolean(),
  canceled_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  started_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  ends_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  ended_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  customer_id: z.string(),
  product_id: z.string(),
  discount_id: z.nullable(z.string()),
  checkout_id: z.nullable(z.string()),
  customer_cancellation_reason: z.nullable(
    CustomerCancellationReason$inboundSchema,
  ),
  customer_cancellation_comment: z.nullable(z.string()),
  price_id: z.string(),
  metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
  custom_field_data: z.record(
    z.nullable(
      z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.string().datetime({ offset: true }).transform(v => new Date(v)),
      ]),
    ),
  ).optional(),
  customer: SubscriptionCustomer$inboundSchema,
  user_id: z.string(),
  user: SubscriptionUser$inboundSchema,
  product: Product$inboundSchema,
  discount: z.nullable(
    z.union([
      DiscountPercentageOnceForeverDurationBase$inboundSchema,
      DiscountFixedOnceForeverDurationBase$inboundSchema,
      DiscountPercentageRepeatDurationBase$inboundSchema,
      DiscountFixedRepeatDurationBase$inboundSchema,
    ]),
  ),
  price: z.union([
    LegacyRecurringProductPrice$inboundSchema,
    ProductPrice$inboundSchema,
  ]),
  prices: z.array(
    z.union([
      LegacyRecurringProductPrice$inboundSchema,
      ProductPrice$inboundSchema,
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "recurring_interval": "recurringInterval",
    "current_period_start": "currentPeriodStart",
    "current_period_end": "currentPeriodEnd",
    "cancel_at_period_end": "cancelAtPeriodEnd",
    "canceled_at": "canceledAt",
    "started_at": "startedAt",
    "ends_at": "endsAt",
    "ended_at": "endedAt",
    "customer_id": "customerId",
    "product_id": "productId",
    "discount_id": "discountId",
    "checkout_id": "checkoutId",
    "customer_cancellation_reason": "customerCancellationReason",
    "customer_cancellation_comment": "customerCancellationComment",
    "price_id": "priceId",
    "custom_field_data": "customFieldData",
    "user_id": "userId",
  });
});

/** @internal */
export type Subscription$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  amount: number;
  currency: string;
  recurring_interval: string;
  status: string;
  current_period_start: string;
  current_period_end: string | null;
  cancel_at_period_end: boolean;
  canceled_at: string | null;
  started_at: string | null;
  ends_at: string | null;
  ended_at: string | null;
  customer_id: string;
  product_id: string;
  discount_id: string | null;
  checkout_id: string | null;
  customer_cancellation_reason: string | null;
  customer_cancellation_comment: string | null;
  price_id: string;
  metadata: { [k: string]: string | number | boolean };
  custom_field_data?:
    | { [k: string]: string | number | boolean | string | null }
    | undefined;
  customer: SubscriptionCustomer$Outbound;
  user_id: string;
  user: SubscriptionUser$Outbound;
  product: Product$Outbound;
  discount:
    | DiscountPercentageOnceForeverDurationBase$Outbound
    | DiscountFixedOnceForeverDurationBase$Outbound
    | DiscountPercentageRepeatDurationBase$Outbound
    | DiscountFixedRepeatDurationBase$Outbound
    | null;
  price: LegacyRecurringProductPrice$Outbound | ProductPrice$Outbound;
  prices: Array<LegacyRecurringProductPrice$Outbound | ProductPrice$Outbound>;
};

/** @internal */
export const Subscription$outboundSchema: z.ZodType<
  Subscription$Outbound,
  z.ZodTypeDef,
  Subscription
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  amount: z.number().int(),
  currency: z.string(),
  recurringInterval: SubscriptionRecurringInterval$outboundSchema,
  status: SubscriptionStatus$outboundSchema,
  currentPeriodStart: z.date().transform(v => v.toISOString()),
  currentPeriodEnd: z.nullable(z.date().transform(v => v.toISOString())),
  cancelAtPeriodEnd: z.boolean(),
  canceledAt: z.nullable(z.date().transform(v => v.toISOString())),
  startedAt: z.nullable(z.date().transform(v => v.toISOString())),
  endsAt: z.nullable(z.date().transform(v => v.toISOString())),
  endedAt: z.nullable(z.date().transform(v => v.toISOString())),
  customerId: z.string(),
  productId: z.string(),
  discountId: z.nullable(z.string()),
  checkoutId: z.nullable(z.string()),
  customerCancellationReason: z.nullable(
    CustomerCancellationReason$outboundSchema,
  ),
  customerCancellationComment: z.nullable(z.string()),
  priceId: z.string(),
  metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()])),
  customFieldData: z.record(
    z.nullable(
      z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.date().transform(v => v.toISOString()),
      ]),
    ),
  ).optional(),
  customer: SubscriptionCustomer$outboundSchema,
  userId: z.string(),
  user: SubscriptionUser$outboundSchema,
  product: Product$outboundSchema,
  discount: z.nullable(
    z.union([
      DiscountPercentageOnceForeverDurationBase$outboundSchema,
      DiscountFixedOnceForeverDurationBase$outboundSchema,
      DiscountPercentageRepeatDurationBase$outboundSchema,
      DiscountFixedRepeatDurationBase$outboundSchema,
    ]),
  ),
  price: z.union([
    LegacyRecurringProductPrice$outboundSchema,
    ProductPrice$outboundSchema,
  ]),
  prices: z.array(
    z.union([
      LegacyRecurringProductPrice$outboundSchema,
      ProductPrice$outboundSchema,
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    recurringInterval: "recurring_interval",
    currentPeriodStart: "current_period_start",
    currentPeriodEnd: "current_period_end",
    cancelAtPeriodEnd: "cancel_at_period_end",
    canceledAt: "canceled_at",
    startedAt: "started_at",
    endsAt: "ends_at",
    endedAt: "ended_at",
    customerId: "customer_id",
    productId: "product_id",
    discountId: "discount_id",
    checkoutId: "checkout_id",
    customerCancellationReason: "customer_cancellation_reason",
    customerCancellationComment: "customer_cancellation_comment",
    priceId: "price_id",
    customFieldData: "custom_field_data",
    userId: "user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Subscription$ {
  /** @deprecated use `Subscription$inboundSchema` instead. */
  export const inboundSchema = Subscription$inboundSchema;
  /** @deprecated use `Subscription$outboundSchema` instead. */
  export const outboundSchema = Subscription$outboundSchema;
  /** @deprecated use `Subscription$Outbound` instead. */
  export type Outbound = Subscription$Outbound;
}

export function subscriptionToJSON(subscription: Subscription): string {
  return JSON.stringify(Subscription$outboundSchema.parse(subscription));
}

export function subscriptionFromJSON(
  jsonString: string,
): SafeParseResult<Subscription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Subscription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Subscription' from JSON`,
  );
}
