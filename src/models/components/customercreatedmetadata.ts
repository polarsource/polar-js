/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CustomerCreatedMetadata = {
  customerId: string;
  customerEmail: string;
  customerName: string | null;
  customerExternalId: string | null;
};

/** @internal */
export const CustomerCreatedMetadata$inboundSchema: z.ZodType<
  CustomerCreatedMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_id: z.string(),
  customer_email: z.string(),
  customer_name: z.nullable(z.string()),
  customer_external_id: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "customer_id": "customerId",
    "customer_email": "customerEmail",
    "customer_name": "customerName",
    "customer_external_id": "customerExternalId",
  });
});

/** @internal */
export type CustomerCreatedMetadata$Outbound = {
  customer_id: string;
  customer_email: string;
  customer_name: string | null;
  customer_external_id: string | null;
};

/** @internal */
export const CustomerCreatedMetadata$outboundSchema: z.ZodType<
  CustomerCreatedMetadata$Outbound,
  z.ZodTypeDef,
  CustomerCreatedMetadata
> = z.object({
  customerId: z.string(),
  customerEmail: z.string(),
  customerName: z.nullable(z.string()),
  customerExternalId: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    customerId: "customer_id",
    customerEmail: "customer_email",
    customerName: "customer_name",
    customerExternalId: "customer_external_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerCreatedMetadata$ {
  /** @deprecated use `CustomerCreatedMetadata$inboundSchema` instead. */
  export const inboundSchema = CustomerCreatedMetadata$inboundSchema;
  /** @deprecated use `CustomerCreatedMetadata$outboundSchema` instead. */
  export const outboundSchema = CustomerCreatedMetadata$outboundSchema;
  /** @deprecated use `CustomerCreatedMetadata$Outbound` instead. */
  export type Outbound = CustomerCreatedMetadata$Outbound;
}

export function customerCreatedMetadataToJSON(
  customerCreatedMetadata: CustomerCreatedMetadata,
): string {
  return JSON.stringify(
    CustomerCreatedMetadata$outboundSchema.parse(customerCreatedMetadata),
  );
}

export function customerCreatedMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CustomerCreatedMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerCreatedMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerCreatedMetadata' from JSON`,
  );
}
