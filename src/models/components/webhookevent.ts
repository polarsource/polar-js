/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  WebhookEventType,
  WebhookEventType$inboundSchema,
  WebhookEventType$outboundSchema,
} from "./webhookeventtype.js";

/**
 * A webhook event.
 *
 * @remarks
 *
 * An event represent something that happened in the system
 * that should be sent to the webhook endpoint.
 *
 * It can be delivered multiple times until it's marked as succeeded,
 * each one creating a new delivery.
 */
export type WebhookEvent = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The ID of the object.
   */
  id: string;
  /**
   * Last HTTP code returned by the URL. `null` if no delviery has been attempted or if the endpoint was unreachable.
   */
  lastHttpCode?: number | null | undefined;
  /**
   * Whether this event was successfully delivered. `null` if no delivery has been attempted.
   */
  succeeded?: boolean | null | undefined;
  /**
   * The payload of the webhook event.
   */
  payload: string | null;
  type: WebhookEventType;
  /**
   * Whether this event is archived. Archived events can't be redelivered, and the payload is not accessible anymore.
   */
  isArchived: boolean;
};

/** @internal */
export const WebhookEvent$inboundSchema: z.ZodType<
  WebhookEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  id: z.string(),
  last_http_code: z.nullable(z.number().int()).optional(),
  succeeded: z.nullable(z.boolean()).optional(),
  payload: z.nullable(z.string()),
  type: WebhookEventType$inboundSchema,
  is_archived: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "last_http_code": "lastHttpCode",
    "is_archived": "isArchived",
  });
});

/** @internal */
export type WebhookEvent$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  last_http_code?: number | null | undefined;
  succeeded?: boolean | null | undefined;
  payload: string | null;
  type: string;
  is_archived: boolean;
};

/** @internal */
export const WebhookEvent$outboundSchema: z.ZodType<
  WebhookEvent$Outbound,
  z.ZodTypeDef,
  WebhookEvent
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  lastHttpCode: z.nullable(z.number().int()).optional(),
  succeeded: z.nullable(z.boolean()).optional(),
  payload: z.nullable(z.string()),
  type: WebhookEventType$outboundSchema,
  isArchived: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    lastHttpCode: "last_http_code",
    isArchived: "is_archived",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookEvent$ {
  /** @deprecated use `WebhookEvent$inboundSchema` instead. */
  export const inboundSchema = WebhookEvent$inboundSchema;
  /** @deprecated use `WebhookEvent$outboundSchema` instead. */
  export const outboundSchema = WebhookEvent$outboundSchema;
  /** @deprecated use `WebhookEvent$Outbound` instead. */
  export type Outbound = WebhookEvent$Outbound;
}

export function webhookEventToJSON(webhookEvent: WebhookEvent): string {
  return JSON.stringify(WebhookEvent$outboundSchema.parse(webhookEvent));
}

export function webhookEventFromJSON(
  jsonString: string,
): SafeParseResult<WebhookEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookEvent' from JSON`,
  );
}
