/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";
import {
  TaxIDFormat,
  TaxIDFormat$inboundSchema,
  TaxIDFormat$outboundSchema,
} from "./taxidformat.js";

export type CustomerUpdateTaxId = string | TaxIDFormat;

export type CustomerUpdate = {
  email?: string | null | undefined;
  name?: string | null | undefined;
  billingAddress?: Address | null | undefined;
  taxId?: Array<string | TaxIDFormat> | null | undefined;
};

/** @internal */
export const CustomerUpdateTaxId$inboundSchema: z.ZodType<
  CustomerUpdateTaxId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), TaxIDFormat$inboundSchema]);

/** @internal */
export type CustomerUpdateTaxId$Outbound = string | string;

/** @internal */
export const CustomerUpdateTaxId$outboundSchema: z.ZodType<
  CustomerUpdateTaxId$Outbound,
  z.ZodTypeDef,
  CustomerUpdateTaxId
> = z.union([z.string(), TaxIDFormat$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerUpdateTaxId$ {
  /** @deprecated use `CustomerUpdateTaxId$inboundSchema` instead. */
  export const inboundSchema = CustomerUpdateTaxId$inboundSchema;
  /** @deprecated use `CustomerUpdateTaxId$outboundSchema` instead. */
  export const outboundSchema = CustomerUpdateTaxId$outboundSchema;
  /** @deprecated use `CustomerUpdateTaxId$Outbound` instead. */
  export type Outbound = CustomerUpdateTaxId$Outbound;
}

export function customerUpdateTaxIdToJSON(
  customerUpdateTaxId: CustomerUpdateTaxId,
): string {
  return JSON.stringify(
    CustomerUpdateTaxId$outboundSchema.parse(customerUpdateTaxId),
  );
}

export function customerUpdateTaxIdFromJSON(
  jsonString: string,
): SafeParseResult<CustomerUpdateTaxId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerUpdateTaxId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerUpdateTaxId' from JSON`,
  );
}

/** @internal */
export const CustomerUpdate$inboundSchema: z.ZodType<
  CustomerUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  billing_address: z.nullable(Address$inboundSchema).optional(),
  tax_id: z.nullable(z.array(z.union([z.string(), TaxIDFormat$inboundSchema])))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "billing_address": "billingAddress",
    "tax_id": "taxId",
  });
});

/** @internal */
export type CustomerUpdate$Outbound = {
  email?: string | null | undefined;
  name?: string | null | undefined;
  billing_address?: Address$Outbound | null | undefined;
  tax_id?: Array<string | string> | null | undefined;
};

/** @internal */
export const CustomerUpdate$outboundSchema: z.ZodType<
  CustomerUpdate$Outbound,
  z.ZodTypeDef,
  CustomerUpdate
> = z.object({
  email: z.nullable(z.string()).optional(),
  name: z.nullable(z.string()).optional(),
  billingAddress: z.nullable(Address$outboundSchema).optional(),
  taxId: z.nullable(z.array(z.union([z.string(), TaxIDFormat$outboundSchema])))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    billingAddress: "billing_address",
    taxId: "tax_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerUpdate$ {
  /** @deprecated use `CustomerUpdate$inboundSchema` instead. */
  export const inboundSchema = CustomerUpdate$inboundSchema;
  /** @deprecated use `CustomerUpdate$outboundSchema` instead. */
  export const outboundSchema = CustomerUpdate$outboundSchema;
  /** @deprecated use `CustomerUpdate$Outbound` instead. */
  export type Outbound = CustomerUpdate$Outbound;
}

export function customerUpdateToJSON(customerUpdate: CustomerUpdate): string {
  return JSON.stringify(CustomerUpdate$outboundSchema.parse(customerUpdate));
}

export function customerUpdateFromJSON(
  jsonString: string,
): SafeParseResult<CustomerUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerUpdate' from JSON`,
  );
}
