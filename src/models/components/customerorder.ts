/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CustomerOrderProduct,
  CustomerOrderProduct$inboundSchema,
  CustomerOrderProduct$Outbound,
  CustomerOrderProduct$outboundSchema,
} from "./customerorderproduct.js";
import {
  CustomerOrderSubscription,
  CustomerOrderSubscription$inboundSchema,
  CustomerOrderSubscription$Outbound,
  CustomerOrderSubscription$outboundSchema,
} from "./customerordersubscription.js";
import {
  LegacyRecurringProductPrice,
  LegacyRecurringProductPrice$inboundSchema,
  LegacyRecurringProductPrice$Outbound,
  LegacyRecurringProductPrice$outboundSchema,
} from "./legacyrecurringproductprice.js";
import {
  ProductPrice,
  ProductPrice$inboundSchema,
  ProductPrice$Outbound,
  ProductPrice$outboundSchema,
} from "./productprice.js";

export type CustomerOrderProductPrice =
  | LegacyRecurringProductPrice
  | ProductPrice;

export type CustomerOrder = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  id: string;
  amount: number;
  taxAmount: number;
  currency: string;
  customerId: string;
  productId: string;
  productPriceId: string;
  subscriptionId: string | null;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  userId: string;
  product: CustomerOrderProduct;
  productPrice: LegacyRecurringProductPrice | ProductPrice;
  subscription: CustomerOrderSubscription | null;
};

/** @internal */
export const CustomerOrderProductPrice$inboundSchema: z.ZodType<
  CustomerOrderProductPrice,
  z.ZodTypeDef,
  unknown
> = z.union([
  LegacyRecurringProductPrice$inboundSchema,
  ProductPrice$inboundSchema,
]);

/** @internal */
export type CustomerOrderProductPrice$Outbound =
  | LegacyRecurringProductPrice$Outbound
  | ProductPrice$Outbound;

/** @internal */
export const CustomerOrderProductPrice$outboundSchema: z.ZodType<
  CustomerOrderProductPrice$Outbound,
  z.ZodTypeDef,
  CustomerOrderProductPrice
> = z.union([
  LegacyRecurringProductPrice$outboundSchema,
  ProductPrice$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerOrderProductPrice$ {
  /** @deprecated use `CustomerOrderProductPrice$inboundSchema` instead. */
  export const inboundSchema = CustomerOrderProductPrice$inboundSchema;
  /** @deprecated use `CustomerOrderProductPrice$outboundSchema` instead. */
  export const outboundSchema = CustomerOrderProductPrice$outboundSchema;
  /** @deprecated use `CustomerOrderProductPrice$Outbound` instead. */
  export type Outbound = CustomerOrderProductPrice$Outbound;
}

export function customerOrderProductPriceToJSON(
  customerOrderProductPrice: CustomerOrderProductPrice,
): string {
  return JSON.stringify(
    CustomerOrderProductPrice$outboundSchema.parse(customerOrderProductPrice),
  );
}

export function customerOrderProductPriceFromJSON(
  jsonString: string,
): SafeParseResult<CustomerOrderProductPrice, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerOrderProductPrice$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerOrderProductPrice' from JSON`,
  );
}

/** @internal */
export const CustomerOrder$inboundSchema: z.ZodType<
  CustomerOrder,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  id: z.string(),
  amount: z.number().int(),
  tax_amount: z.number().int(),
  currency: z.string(),
  customer_id: z.string(),
  product_id: z.string(),
  product_price_id: z.string(),
  subscription_id: z.nullable(z.string()),
  user_id: z.string(),
  product: CustomerOrderProduct$inboundSchema,
  product_price: z.union([
    LegacyRecurringProductPrice$inboundSchema,
    ProductPrice$inboundSchema,
  ]),
  subscription: z.nullable(CustomerOrderSubscription$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "tax_amount": "taxAmount",
    "customer_id": "customerId",
    "product_id": "productId",
    "product_price_id": "productPriceId",
    "subscription_id": "subscriptionId",
    "user_id": "userId",
    "product_price": "productPrice",
  });
});

/** @internal */
export type CustomerOrder$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  amount: number;
  tax_amount: number;
  currency: string;
  customer_id: string;
  product_id: string;
  product_price_id: string;
  subscription_id: string | null;
  user_id: string;
  product: CustomerOrderProduct$Outbound;
  product_price: LegacyRecurringProductPrice$Outbound | ProductPrice$Outbound;
  subscription: CustomerOrderSubscription$Outbound | null;
};

/** @internal */
export const CustomerOrder$outboundSchema: z.ZodType<
  CustomerOrder$Outbound,
  z.ZodTypeDef,
  CustomerOrder
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  amount: z.number().int(),
  taxAmount: z.number().int(),
  currency: z.string(),
  customerId: z.string(),
  productId: z.string(),
  productPriceId: z.string(),
  subscriptionId: z.nullable(z.string()),
  userId: z.string(),
  product: CustomerOrderProduct$outboundSchema,
  productPrice: z.union([
    LegacyRecurringProductPrice$outboundSchema,
    ProductPrice$outboundSchema,
  ]),
  subscription: z.nullable(CustomerOrderSubscription$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    taxAmount: "tax_amount",
    customerId: "customer_id",
    productId: "product_id",
    productPriceId: "product_price_id",
    subscriptionId: "subscription_id",
    userId: "user_id",
    productPrice: "product_price",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerOrder$ {
  /** @deprecated use `CustomerOrder$inboundSchema` instead. */
  export const inboundSchema = CustomerOrder$inboundSchema;
  /** @deprecated use `CustomerOrder$outboundSchema` instead. */
  export const outboundSchema = CustomerOrder$outboundSchema;
  /** @deprecated use `CustomerOrder$Outbound` instead. */
  export type Outbound = CustomerOrder$Outbound;
}

export function customerOrderToJSON(customerOrder: CustomerOrder): string {
  return JSON.stringify(CustomerOrder$outboundSchema.parse(customerOrder));
}

export function customerOrderFromJSON(
  jsonString: string,
): SafeParseResult<CustomerOrder, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomerOrder$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomerOrder' from JSON`,
  );
}
