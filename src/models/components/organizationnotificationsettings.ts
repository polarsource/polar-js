/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OrganizationNotificationSettings = {
  newOrder: boolean;
  newSubscription: boolean;
};

/** @internal */
export const OrganizationNotificationSettings$inboundSchema: z.ZodType<
  OrganizationNotificationSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  new_order: z.boolean(),
  new_subscription: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "new_order": "newOrder",
    "new_subscription": "newSubscription",
  });
});

/** @internal */
export type OrganizationNotificationSettings$Outbound = {
  new_order: boolean;
  new_subscription: boolean;
};

/** @internal */
export const OrganizationNotificationSettings$outboundSchema: z.ZodType<
  OrganizationNotificationSettings$Outbound,
  z.ZodTypeDef,
  OrganizationNotificationSettings
> = z.object({
  newOrder: z.boolean(),
  newSubscription: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    newOrder: "new_order",
    newSubscription: "new_subscription",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationNotificationSettings$ {
  /** @deprecated use `OrganizationNotificationSettings$inboundSchema` instead. */
  export const inboundSchema = OrganizationNotificationSettings$inboundSchema;
  /** @deprecated use `OrganizationNotificationSettings$outboundSchema` instead. */
  export const outboundSchema = OrganizationNotificationSettings$outboundSchema;
  /** @deprecated use `OrganizationNotificationSettings$Outbound` instead. */
  export type Outbound = OrganizationNotificationSettings$Outbound;
}

export function organizationNotificationSettingsToJSON(
  organizationNotificationSettings: OrganizationNotificationSettings,
): string {
  return JSON.stringify(
    OrganizationNotificationSettings$outboundSchema.parse(
      organizationNotificationSettings,
    ),
  );
}

export function organizationNotificationSettingsFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationNotificationSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationNotificationSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationNotificationSettings' from JSON`,
  );
}
