/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Metric,
  Metric$inboundSchema,
  Metric$Outbound,
  Metric$outboundSchema,
} from "./metric.js";

export type MetricsOutput = {
  /**
   * Information about a metric.
   */
  orders: Metric;
  /**
   * Information about a metric.
   */
  revenue: Metric;
  /**
   * Information about a metric.
   */
  netRevenue: Metric;
  /**
   * Information about a metric.
   */
  cumulativeRevenue: Metric;
  /**
   * Information about a metric.
   */
  netCumulativeRevenue: Metric;
  /**
   * Information about a metric.
   */
  averageOrderValue: Metric;
  /**
   * Information about a metric.
   */
  netAverageOrderValue: Metric;
  /**
   * Information about a metric.
   */
  oneTimeProducts: Metric;
  /**
   * Information about a metric.
   */
  oneTimeProductsRevenue: Metric;
  /**
   * Information about a metric.
   */
  oneTimeProductsNetRevenue: Metric;
  /**
   * Information about a metric.
   */
  newSubscriptions: Metric;
  /**
   * Information about a metric.
   */
  newSubscriptionsRevenue: Metric;
  /**
   * Information about a metric.
   */
  newSubscriptionsNetRevenue: Metric;
  /**
   * Information about a metric.
   */
  renewedSubscriptions: Metric;
  /**
   * Information about a metric.
   */
  renewedSubscriptionsRevenue: Metric;
  /**
   * Information about a metric.
   */
  renewedSubscriptionsNetRevenue: Metric;
  /**
   * Information about a metric.
   */
  activeSubscriptions: Metric;
  /**
   * Information about a metric.
   */
  monthlyRecurringRevenue: Metric;
  /**
   * Information about a metric.
   */
  committedMonthlyRecurringRevenue: Metric;
  /**
   * Information about a metric.
   */
  checkouts: Metric;
  /**
   * Information about a metric.
   */
  succeededCheckouts: Metric;
  /**
   * Information about a metric.
   */
  checkoutsConversion: Metric;
  /**
   * Information about a metric.
   */
  canceledSubscriptions: Metric;
  /**
   * Information about a metric.
   */
  canceledSubscriptionsCustomerService: Metric;
  /**
   * Information about a metric.
   */
  canceledSubscriptionsLowQuality: Metric;
  /**
   * Information about a metric.
   */
  canceledSubscriptionsMissingFeatures: Metric;
  /**
   * Information about a metric.
   */
  canceledSubscriptionsSwitchedService: Metric;
  /**
   * Information about a metric.
   */
  canceledSubscriptionsTooComplex: Metric;
  /**
   * Information about a metric.
   */
  canceledSubscriptionsTooExpensive: Metric;
  /**
   * Information about a metric.
   */
  canceledSubscriptionsUnused: Metric;
  /**
   * Information about a metric.
   */
  canceledSubscriptionsOther: Metric;
};

/** @internal */
export const MetricsOutput$inboundSchema: z.ZodType<
  MetricsOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  orders: Metric$inboundSchema,
  revenue: Metric$inboundSchema,
  net_revenue: Metric$inboundSchema,
  cumulative_revenue: Metric$inboundSchema,
  net_cumulative_revenue: Metric$inboundSchema,
  average_order_value: Metric$inboundSchema,
  net_average_order_value: Metric$inboundSchema,
  one_time_products: Metric$inboundSchema,
  one_time_products_revenue: Metric$inboundSchema,
  one_time_products_net_revenue: Metric$inboundSchema,
  new_subscriptions: Metric$inboundSchema,
  new_subscriptions_revenue: Metric$inboundSchema,
  new_subscriptions_net_revenue: Metric$inboundSchema,
  renewed_subscriptions: Metric$inboundSchema,
  renewed_subscriptions_revenue: Metric$inboundSchema,
  renewed_subscriptions_net_revenue: Metric$inboundSchema,
  active_subscriptions: Metric$inboundSchema,
  monthly_recurring_revenue: Metric$inboundSchema,
  committed_monthly_recurring_revenue: Metric$inboundSchema,
  checkouts: Metric$inboundSchema,
  succeeded_checkouts: Metric$inboundSchema,
  checkouts_conversion: Metric$inboundSchema,
  canceled_subscriptions: Metric$inboundSchema,
  canceled_subscriptions_customer_service: Metric$inboundSchema,
  canceled_subscriptions_low_quality: Metric$inboundSchema,
  canceled_subscriptions_missing_features: Metric$inboundSchema,
  canceled_subscriptions_switched_service: Metric$inboundSchema,
  canceled_subscriptions_too_complex: Metric$inboundSchema,
  canceled_subscriptions_too_expensive: Metric$inboundSchema,
  canceled_subscriptions_unused: Metric$inboundSchema,
  canceled_subscriptions_other: Metric$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "net_revenue": "netRevenue",
    "cumulative_revenue": "cumulativeRevenue",
    "net_cumulative_revenue": "netCumulativeRevenue",
    "average_order_value": "averageOrderValue",
    "net_average_order_value": "netAverageOrderValue",
    "one_time_products": "oneTimeProducts",
    "one_time_products_revenue": "oneTimeProductsRevenue",
    "one_time_products_net_revenue": "oneTimeProductsNetRevenue",
    "new_subscriptions": "newSubscriptions",
    "new_subscriptions_revenue": "newSubscriptionsRevenue",
    "new_subscriptions_net_revenue": "newSubscriptionsNetRevenue",
    "renewed_subscriptions": "renewedSubscriptions",
    "renewed_subscriptions_revenue": "renewedSubscriptionsRevenue",
    "renewed_subscriptions_net_revenue": "renewedSubscriptionsNetRevenue",
    "active_subscriptions": "activeSubscriptions",
    "monthly_recurring_revenue": "monthlyRecurringRevenue",
    "committed_monthly_recurring_revenue": "committedMonthlyRecurringRevenue",
    "succeeded_checkouts": "succeededCheckouts",
    "checkouts_conversion": "checkoutsConversion",
    "canceled_subscriptions": "canceledSubscriptions",
    "canceled_subscriptions_customer_service":
      "canceledSubscriptionsCustomerService",
    "canceled_subscriptions_low_quality": "canceledSubscriptionsLowQuality",
    "canceled_subscriptions_missing_features":
      "canceledSubscriptionsMissingFeatures",
    "canceled_subscriptions_switched_service":
      "canceledSubscriptionsSwitchedService",
    "canceled_subscriptions_too_complex": "canceledSubscriptionsTooComplex",
    "canceled_subscriptions_too_expensive": "canceledSubscriptionsTooExpensive",
    "canceled_subscriptions_unused": "canceledSubscriptionsUnused",
    "canceled_subscriptions_other": "canceledSubscriptionsOther",
  });
});

/** @internal */
export type MetricsOutput$Outbound = {
  orders: Metric$Outbound;
  revenue: Metric$Outbound;
  net_revenue: Metric$Outbound;
  cumulative_revenue: Metric$Outbound;
  net_cumulative_revenue: Metric$Outbound;
  average_order_value: Metric$Outbound;
  net_average_order_value: Metric$Outbound;
  one_time_products: Metric$Outbound;
  one_time_products_revenue: Metric$Outbound;
  one_time_products_net_revenue: Metric$Outbound;
  new_subscriptions: Metric$Outbound;
  new_subscriptions_revenue: Metric$Outbound;
  new_subscriptions_net_revenue: Metric$Outbound;
  renewed_subscriptions: Metric$Outbound;
  renewed_subscriptions_revenue: Metric$Outbound;
  renewed_subscriptions_net_revenue: Metric$Outbound;
  active_subscriptions: Metric$Outbound;
  monthly_recurring_revenue: Metric$Outbound;
  committed_monthly_recurring_revenue: Metric$Outbound;
  checkouts: Metric$Outbound;
  succeeded_checkouts: Metric$Outbound;
  checkouts_conversion: Metric$Outbound;
  canceled_subscriptions: Metric$Outbound;
  canceled_subscriptions_customer_service: Metric$Outbound;
  canceled_subscriptions_low_quality: Metric$Outbound;
  canceled_subscriptions_missing_features: Metric$Outbound;
  canceled_subscriptions_switched_service: Metric$Outbound;
  canceled_subscriptions_too_complex: Metric$Outbound;
  canceled_subscriptions_too_expensive: Metric$Outbound;
  canceled_subscriptions_unused: Metric$Outbound;
  canceled_subscriptions_other: Metric$Outbound;
};

/** @internal */
export const MetricsOutput$outboundSchema: z.ZodType<
  MetricsOutput$Outbound,
  z.ZodTypeDef,
  MetricsOutput
> = z.object({
  orders: Metric$outboundSchema,
  revenue: Metric$outboundSchema,
  netRevenue: Metric$outboundSchema,
  cumulativeRevenue: Metric$outboundSchema,
  netCumulativeRevenue: Metric$outboundSchema,
  averageOrderValue: Metric$outboundSchema,
  netAverageOrderValue: Metric$outboundSchema,
  oneTimeProducts: Metric$outboundSchema,
  oneTimeProductsRevenue: Metric$outboundSchema,
  oneTimeProductsNetRevenue: Metric$outboundSchema,
  newSubscriptions: Metric$outboundSchema,
  newSubscriptionsRevenue: Metric$outboundSchema,
  newSubscriptionsNetRevenue: Metric$outboundSchema,
  renewedSubscriptions: Metric$outboundSchema,
  renewedSubscriptionsRevenue: Metric$outboundSchema,
  renewedSubscriptionsNetRevenue: Metric$outboundSchema,
  activeSubscriptions: Metric$outboundSchema,
  monthlyRecurringRevenue: Metric$outboundSchema,
  committedMonthlyRecurringRevenue: Metric$outboundSchema,
  checkouts: Metric$outboundSchema,
  succeededCheckouts: Metric$outboundSchema,
  checkoutsConversion: Metric$outboundSchema,
  canceledSubscriptions: Metric$outboundSchema,
  canceledSubscriptionsCustomerService: Metric$outboundSchema,
  canceledSubscriptionsLowQuality: Metric$outboundSchema,
  canceledSubscriptionsMissingFeatures: Metric$outboundSchema,
  canceledSubscriptionsSwitchedService: Metric$outboundSchema,
  canceledSubscriptionsTooComplex: Metric$outboundSchema,
  canceledSubscriptionsTooExpensive: Metric$outboundSchema,
  canceledSubscriptionsUnused: Metric$outboundSchema,
  canceledSubscriptionsOther: Metric$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    netRevenue: "net_revenue",
    cumulativeRevenue: "cumulative_revenue",
    netCumulativeRevenue: "net_cumulative_revenue",
    averageOrderValue: "average_order_value",
    netAverageOrderValue: "net_average_order_value",
    oneTimeProducts: "one_time_products",
    oneTimeProductsRevenue: "one_time_products_revenue",
    oneTimeProductsNetRevenue: "one_time_products_net_revenue",
    newSubscriptions: "new_subscriptions",
    newSubscriptionsRevenue: "new_subscriptions_revenue",
    newSubscriptionsNetRevenue: "new_subscriptions_net_revenue",
    renewedSubscriptions: "renewed_subscriptions",
    renewedSubscriptionsRevenue: "renewed_subscriptions_revenue",
    renewedSubscriptionsNetRevenue: "renewed_subscriptions_net_revenue",
    activeSubscriptions: "active_subscriptions",
    monthlyRecurringRevenue: "monthly_recurring_revenue",
    committedMonthlyRecurringRevenue: "committed_monthly_recurring_revenue",
    succeededCheckouts: "succeeded_checkouts",
    checkoutsConversion: "checkouts_conversion",
    canceledSubscriptions: "canceled_subscriptions",
    canceledSubscriptionsCustomerService:
      "canceled_subscriptions_customer_service",
    canceledSubscriptionsLowQuality: "canceled_subscriptions_low_quality",
    canceledSubscriptionsMissingFeatures:
      "canceled_subscriptions_missing_features",
    canceledSubscriptionsSwitchedService:
      "canceled_subscriptions_switched_service",
    canceledSubscriptionsTooComplex: "canceled_subscriptions_too_complex",
    canceledSubscriptionsTooExpensive: "canceled_subscriptions_too_expensive",
    canceledSubscriptionsUnused: "canceled_subscriptions_unused",
    canceledSubscriptionsOther: "canceled_subscriptions_other",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetricsOutput$ {
  /** @deprecated use `MetricsOutput$inboundSchema` instead. */
  export const inboundSchema = MetricsOutput$inboundSchema;
  /** @deprecated use `MetricsOutput$outboundSchema` instead. */
  export const outboundSchema = MetricsOutput$outboundSchema;
  /** @deprecated use `MetricsOutput$Outbound` instead. */
  export type Outbound = MetricsOutput$Outbound;
}

export function metricsOutputToJSON(metricsOutput: MetricsOutput): string {
  return JSON.stringify(MetricsOutput$outboundSchema.parse(metricsOutput));
}

export function metricsOutputFromJSON(
  jsonString: string,
): SafeParseResult<MetricsOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetricsOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetricsOutput' from JSON`,
  );
}
