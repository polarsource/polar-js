/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  CustomFieldTextProperties,
  CustomFieldTextProperties$inboundSchema,
  CustomFieldTextProperties$Outbound,
  CustomFieldTextProperties$outboundSchema,
} from "./customfieldtextproperties.js";

export const CustomFieldCreateTextType = {
  Text: "text",
} as const;
export type CustomFieldCreateTextType = ClosedEnum<
  typeof CustomFieldCreateTextType
>;

/**
 * Schema to create a custom field of type text.
 */
export type CustomFieldCreateText = {
  /**
   * Key-value object allowing you to store additional information.
   *
   * @remarks
   *
   * The key must be a string with a maximum length of **40 characters**.
   * The value must be a string with a maximum length of **500 characters**.
   * You can store up to **50 key-value pairs**.
   */
  metadata?: { [k: string]: string } | undefined;
  type?: "text" | undefined;
  /**
   * Identifier of the custom field. It'll be used as key when storing the value. Must be unique across the organization.
   */
  slug: string;
  /**
   * Name of the custom field.
   */
  name: string;
  /**
   * The ID of the organization owning the custom field. **Required unless you use an organization token.**
   */
  organizationId?: string | null | undefined;
  properties: CustomFieldTextProperties;
};

/** @internal */
export const CustomFieldCreateTextType$inboundSchema: z.ZodNativeEnum<
  typeof CustomFieldCreateTextType
> = z.nativeEnum(CustomFieldCreateTextType);

/** @internal */
export const CustomFieldCreateTextType$outboundSchema: z.ZodNativeEnum<
  typeof CustomFieldCreateTextType
> = CustomFieldCreateTextType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFieldCreateTextType$ {
  /** @deprecated use `CustomFieldCreateTextType$inboundSchema` instead. */
  export const inboundSchema = CustomFieldCreateTextType$inboundSchema;
  /** @deprecated use `CustomFieldCreateTextType$outboundSchema` instead. */
  export const outboundSchema = CustomFieldCreateTextType$outboundSchema;
}

/** @internal */
export const CustomFieldCreateText$inboundSchema: z.ZodType<
  CustomFieldCreateText,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.record(z.string()).optional(),
  type: z.literal("text").optional(),
  slug: z.string(),
  name: z.string(),
  organization_id: z.nullable(z.string()).optional(),
  properties: CustomFieldTextProperties$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "organization_id": "organizationId",
  });
});

/** @internal */
export type CustomFieldCreateText$Outbound = {
  metadata?: { [k: string]: string } | undefined;
  type: "text";
  slug: string;
  name: string;
  organization_id?: string | null | undefined;
  properties: CustomFieldTextProperties$Outbound;
};

/** @internal */
export const CustomFieldCreateText$outboundSchema: z.ZodType<
  CustomFieldCreateText$Outbound,
  z.ZodTypeDef,
  CustomFieldCreateText
> = z.object({
  metadata: z.record(z.string()).optional(),
  type: z.literal("text").default("text"),
  slug: z.string(),
  name: z.string(),
  organizationId: z.nullable(z.string()).optional(),
  properties: CustomFieldTextProperties$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomFieldCreateText$ {
  /** @deprecated use `CustomFieldCreateText$inboundSchema` instead. */
  export const inboundSchema = CustomFieldCreateText$inboundSchema;
  /** @deprecated use `CustomFieldCreateText$outboundSchema` instead. */
  export const outboundSchema = CustomFieldCreateText$outboundSchema;
  /** @deprecated use `CustomFieldCreateText$Outbound` instead. */
  export type Outbound = CustomFieldCreateText$Outbound;
}
