/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscriptionUpdateDiscount = {
  /**
   * Update the subscription to apply a new discount. If set to `null`, the discount will be removed. The change will be applied on the next billing cycle.
   */
  discountId: string | null;
};

/** @internal */
export const SubscriptionUpdateDiscount$inboundSchema: z.ZodType<
  SubscriptionUpdateDiscount,
  z.ZodTypeDef,
  unknown
> = z.object({
  discount_id: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    "discount_id": "discountId",
  });
});

/** @internal */
export type SubscriptionUpdateDiscount$Outbound = {
  discount_id: string | null;
};

/** @internal */
export const SubscriptionUpdateDiscount$outboundSchema: z.ZodType<
  SubscriptionUpdateDiscount$Outbound,
  z.ZodTypeDef,
  SubscriptionUpdateDiscount
> = z.object({
  discountId: z.nullable(z.string()),
}).transform((v) => {
  return remap$(v, {
    discountId: "discount_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateDiscount$ {
  /** @deprecated use `SubscriptionUpdateDiscount$inboundSchema` instead. */
  export const inboundSchema = SubscriptionUpdateDiscount$inboundSchema;
  /** @deprecated use `SubscriptionUpdateDiscount$outboundSchema` instead. */
  export const outboundSchema = SubscriptionUpdateDiscount$outboundSchema;
  /** @deprecated use `SubscriptionUpdateDiscount$Outbound` instead. */
  export type Outbound = SubscriptionUpdateDiscount$Outbound;
}

export function subscriptionUpdateDiscountToJSON(
  subscriptionUpdateDiscount: SubscriptionUpdateDiscount,
): string {
  return JSON.stringify(
    SubscriptionUpdateDiscount$outboundSchema.parse(subscriptionUpdateDiscount),
  );
}

export function subscriptionUpdateDiscountFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionUpdateDiscount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionUpdateDiscount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionUpdateDiscount' from JSON`,
  );
}
