/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type OrderPaidMetadata = {
  orderId: string;
  amount: number;
  currency: string;
  backfilled?: boolean | undefined;
};

/** @internal */
export const OrderPaidMetadata$inboundSchema: z.ZodType<
  OrderPaidMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  order_id: z.string(),
  amount: z.number().int(),
  currency: z.string(),
  backfilled: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "order_id": "orderId",
  });
});

/** @internal */
export type OrderPaidMetadata$Outbound = {
  order_id: string;
  amount: number;
  currency: string;
  backfilled?: boolean | undefined;
};

/** @internal */
export const OrderPaidMetadata$outboundSchema: z.ZodType<
  OrderPaidMetadata$Outbound,
  z.ZodTypeDef,
  OrderPaidMetadata
> = z.object({
  orderId: z.string(),
  amount: z.number().int(),
  currency: z.string(),
  backfilled: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    orderId: "order_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderPaidMetadata$ {
  /** @deprecated use `OrderPaidMetadata$inboundSchema` instead. */
  export const inboundSchema = OrderPaidMetadata$inboundSchema;
  /** @deprecated use `OrderPaidMetadata$outboundSchema` instead. */
  export const outboundSchema = OrderPaidMetadata$outboundSchema;
  /** @deprecated use `OrderPaidMetadata$Outbound` instead. */
  export type Outbound = OrderPaidMetadata$Outbound;
}

export function orderPaidMetadataToJSON(
  orderPaidMetadata: OrderPaidMetadata,
): string {
  return JSON.stringify(
    OrderPaidMetadata$outboundSchema.parse(orderPaidMetadata),
  );
}

export function orderPaidMetadataFromJSON(
  jsonString: string,
): SafeParseResult<OrderPaidMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrderPaidMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrderPaidMetadata' from JSON`,
  );
}
