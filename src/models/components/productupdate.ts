/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AttachedCustomFieldCreate,
  AttachedCustomFieldCreate$inboundSchema,
  AttachedCustomFieldCreate$Outbound,
  AttachedCustomFieldCreate$outboundSchema,
} from "./attachedcustomfieldcreate.js";
import {
  ExistingProductPrice,
  ExistingProductPrice$inboundSchema,
  ExistingProductPrice$Outbound,
  ExistingProductPrice$outboundSchema,
} from "./existingproductprice.js";
import {
  ProductPriceCustomCreate,
  ProductPriceCustomCreate$inboundSchema,
  ProductPriceCustomCreate$Outbound,
  ProductPriceCustomCreate$outboundSchema,
} from "./productpricecustomcreate.js";
import {
  ProductPriceFixedCreate,
  ProductPriceFixedCreate$inboundSchema,
  ProductPriceFixedCreate$Outbound,
  ProductPriceFixedCreate$outboundSchema,
} from "./productpricefixedcreate.js";
import {
  ProductPriceFreeCreate,
  ProductPriceFreeCreate$inboundSchema,
  ProductPriceFreeCreate$Outbound,
  ProductPriceFreeCreate$outboundSchema,
} from "./productpricefreecreate.js";
import {
  ProductPriceMeteredUnitCreate,
  ProductPriceMeteredUnitCreate$inboundSchema,
  ProductPriceMeteredUnitCreate$Outbound,
  ProductPriceMeteredUnitCreate$outboundSchema,
} from "./productpricemeteredunitcreate.js";
import {
  ProductPriceSeatBasedCreate,
  ProductPriceSeatBasedCreate$inboundSchema,
  ProductPriceSeatBasedCreate$Outbound,
  ProductPriceSeatBasedCreate$outboundSchema,
} from "./productpriceseatbasedcreate.js";
import {
  SubscriptionRecurringInterval,
  SubscriptionRecurringInterval$inboundSchema,
  SubscriptionRecurringInterval$outboundSchema,
} from "./subscriptionrecurringinterval.js";
import {
  TrialInterval,
  TrialInterval$inboundSchema,
  TrialInterval$outboundSchema,
} from "./trialinterval.js";

export type ProductUpdateMetadata = string | number | number | boolean;

export type Two =
  | (ProductPriceMeteredUnitCreate & { amountType: "metered_unit" })
  | (ProductPriceFixedCreate & { amountType: "fixed" })
  | (ProductPriceSeatBasedCreate & { amountType: "seat_based" })
  | (ProductPriceCustomCreate & { amountType: "custom" })
  | (ProductPriceFreeCreate & { amountType: "free" });

export type ProductUpdatePrices =
  | ExistingProductPrice
  | (ProductPriceMeteredUnitCreate & { amountType: "metered_unit" })
  | (ProductPriceFixedCreate & { amountType: "fixed" })
  | (ProductPriceSeatBasedCreate & { amountType: "seat_based" })
  | (ProductPriceCustomCreate & { amountType: "custom" })
  | (ProductPriceFreeCreate & { amountType: "free" });

/**
 * Schema to update a product.
 */
export type ProductUpdate = {
  /**
   * Key-value object allowing you to store additional information.
   *
   * @remarks
   *
   * The key must be a string with a maximum length of **40 characters**.
   * The value must be either:
   *
   * * A string with a maximum length of **500 characters**
   * * An integer
   * * A floating-point number
   * * A boolean
   *
   * You can store up to **50 key-value pairs**.
   */
  metadata?: { [k: string]: string | number | number | boolean } | undefined;
  /**
   * The interval unit for the trial period.
   */
  trialInterval?: TrialInterval | null | undefined;
  /**
   * The number of interval units for the trial period.
   */
  trialIntervalCount?: number | null | undefined;
  name?: string | null | undefined;
  /**
   * The description of the product.
   */
  description?: string | null | undefined;
  /**
   * The recurring interval of the product. If `None`, the product is a one-time purchase. **Can only be set on legacy recurring products. Once set, it can't be changed.**
   */
  recurringInterval?: SubscriptionRecurringInterval | null | undefined;
  /**
   * Whether the product is archived. If `true`, the product won't be available for purchase anymore. Existing customers will still have access to their benefits, and subscriptions will continue normally.
   */
  isArchived?: boolean | null | undefined;
  /**
   * List of available prices for this product. If you want to keep existing prices, include them in the list as an `ExistingProductPrice` object.
   */
  prices?:
    | Array<
      | ExistingProductPrice
      | (ProductPriceMeteredUnitCreate & { amountType: "metered_unit" })
      | (ProductPriceFixedCreate & { amountType: "fixed" })
      | (ProductPriceSeatBasedCreate & { amountType: "seat_based" })
      | (ProductPriceCustomCreate & { amountType: "custom" })
      | (ProductPriceFreeCreate & { amountType: "free" })
    >
    | null
    | undefined;
  /**
   * List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded.
   */
  medias?: Array<string> | null | undefined;
  attachedCustomFields?: Array<AttachedCustomFieldCreate> | null | undefined;
};

/** @internal */
export const ProductUpdateMetadata$inboundSchema: z.ZodType<
  ProductUpdateMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);

/** @internal */
export type ProductUpdateMetadata$Outbound = string | number | number | boolean;

/** @internal */
export const ProductUpdateMetadata$outboundSchema: z.ZodType<
  ProductUpdateMetadata$Outbound,
  z.ZodTypeDef,
  ProductUpdateMetadata
> = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductUpdateMetadata$ {
  /** @deprecated use `ProductUpdateMetadata$inboundSchema` instead. */
  export const inboundSchema = ProductUpdateMetadata$inboundSchema;
  /** @deprecated use `ProductUpdateMetadata$outboundSchema` instead. */
  export const outboundSchema = ProductUpdateMetadata$outboundSchema;
  /** @deprecated use `ProductUpdateMetadata$Outbound` instead. */
  export type Outbound = ProductUpdateMetadata$Outbound;
}

export function productUpdateMetadataToJSON(
  productUpdateMetadata: ProductUpdateMetadata,
): string {
  return JSON.stringify(
    ProductUpdateMetadata$outboundSchema.parse(productUpdateMetadata),
  );
}

export function productUpdateMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ProductUpdateMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductUpdateMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductUpdateMetadata' from JSON`,
  );
}

/** @internal */
export const Two$inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z.union(
  [
    ProductPriceMeteredUnitCreate$inboundSchema.and(
      z.object({ amount_type: z.literal("metered_unit") }).transform((v) => ({
        amountType: v.amount_type,
      })),
    ),
    ProductPriceFixedCreate$inboundSchema.and(
      z.object({ amount_type: z.literal("fixed") }).transform((v) => ({
        amountType: v.amount_type,
      })),
    ),
    ProductPriceSeatBasedCreate$inboundSchema.and(
      z.object({ amount_type: z.literal("seat_based") }).transform((v) => ({
        amountType: v.amount_type,
      })),
    ),
    ProductPriceCustomCreate$inboundSchema.and(
      z.object({ amount_type: z.literal("custom") }).transform((v) => ({
        amountType: v.amount_type,
      })),
    ),
    ProductPriceFreeCreate$inboundSchema.and(
      z.object({ amount_type: z.literal("free") }).transform((v) => ({
        amountType: v.amount_type,
      })),
    ),
  ],
);

/** @internal */
export type Two$Outbound =
  | (ProductPriceMeteredUnitCreate$Outbound & { amount_type: "metered_unit" })
  | (ProductPriceFixedCreate$Outbound & { amount_type: "fixed" })
  | (ProductPriceSeatBasedCreate$Outbound & { amount_type: "seat_based" })
  | (ProductPriceCustomCreate$Outbound & { amount_type: "custom" })
  | (ProductPriceFreeCreate$Outbound & { amount_type: "free" });

/** @internal */
export const Two$outboundSchema: z.ZodType<Two$Outbound, z.ZodTypeDef, Two> = z
  .union([
    ProductPriceMeteredUnitCreate$outboundSchema.and(
      z.object({ amountType: z.literal("metered_unit") }).transform((v) => ({
        amount_type: v.amountType,
      })),
    ),
    ProductPriceFixedCreate$outboundSchema.and(
      z.object({ amountType: z.literal("fixed") }).transform((v) => ({
        amount_type: v.amountType,
      })),
    ),
    ProductPriceSeatBasedCreate$outboundSchema.and(
      z.object({ amountType: z.literal("seat_based") }).transform((v) => ({
        amount_type: v.amountType,
      })),
    ),
    ProductPriceCustomCreate$outboundSchema.and(
      z.object({ amountType: z.literal("custom") }).transform((v) => ({
        amount_type: v.amountType,
      })),
    ),
    ProductPriceFreeCreate$outboundSchema.and(
      z.object({ amountType: z.literal("free") }).transform((v) => ({
        amount_type: v.amountType,
      })),
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two$ {
  /** @deprecated use `Two$inboundSchema` instead. */
  export const inboundSchema = Two$inboundSchema;
  /** @deprecated use `Two$outboundSchema` instead. */
  export const outboundSchema = Two$outboundSchema;
  /** @deprecated use `Two$Outbound` instead. */
  export type Outbound = Two$Outbound;
}

export function twoToJSON(two: Two): string {
  return JSON.stringify(Two$outboundSchema.parse(two));
}

export function twoFromJSON(
  jsonString: string,
): SafeParseResult<Two, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Two$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Two' from JSON`,
  );
}

/** @internal */
export const ProductUpdatePrices$inboundSchema: z.ZodType<
  ProductUpdatePrices,
  z.ZodTypeDef,
  unknown
> = z.union([
  ExistingProductPrice$inboundSchema,
  z.union([
    ProductPriceMeteredUnitCreate$inboundSchema.and(
      z.object({ amount_type: z.literal("metered_unit") }).transform((v) => ({
        amountType: v.amount_type,
      })),
    ),
    ProductPriceFixedCreate$inboundSchema.and(
      z.object({ amount_type: z.literal("fixed") }).transform((v) => ({
        amountType: v.amount_type,
      })),
    ),
    ProductPriceSeatBasedCreate$inboundSchema.and(
      z.object({ amount_type: z.literal("seat_based") }).transform((v) => ({
        amountType: v.amount_type,
      })),
    ),
    ProductPriceCustomCreate$inboundSchema.and(
      z.object({ amount_type: z.literal("custom") }).transform((v) => ({
        amountType: v.amount_type,
      })),
    ),
    ProductPriceFreeCreate$inboundSchema.and(
      z.object({ amount_type: z.literal("free") }).transform((v) => ({
        amountType: v.amount_type,
      })),
    ),
  ]),
]);

/** @internal */
export type ProductUpdatePrices$Outbound =
  | ExistingProductPrice$Outbound
  | (ProductPriceMeteredUnitCreate$Outbound & { amount_type: "metered_unit" })
  | (ProductPriceFixedCreate$Outbound & { amount_type: "fixed" })
  | (ProductPriceSeatBasedCreate$Outbound & { amount_type: "seat_based" })
  | (ProductPriceCustomCreate$Outbound & { amount_type: "custom" })
  | (ProductPriceFreeCreate$Outbound & { amount_type: "free" });

/** @internal */
export const ProductUpdatePrices$outboundSchema: z.ZodType<
  ProductUpdatePrices$Outbound,
  z.ZodTypeDef,
  ProductUpdatePrices
> = z.union([
  ExistingProductPrice$outboundSchema,
  z.union([
    ProductPriceMeteredUnitCreate$outboundSchema.and(
      z.object({ amountType: z.literal("metered_unit") }).transform((v) => ({
        amount_type: v.amountType,
      })),
    ),
    ProductPriceFixedCreate$outboundSchema.and(
      z.object({ amountType: z.literal("fixed") }).transform((v) => ({
        amount_type: v.amountType,
      })),
    ),
    ProductPriceSeatBasedCreate$outboundSchema.and(
      z.object({ amountType: z.literal("seat_based") }).transform((v) => ({
        amount_type: v.amountType,
      })),
    ),
    ProductPriceCustomCreate$outboundSchema.and(
      z.object({ amountType: z.literal("custom") }).transform((v) => ({
        amount_type: v.amountType,
      })),
    ),
    ProductPriceFreeCreate$outboundSchema.and(
      z.object({ amountType: z.literal("free") }).transform((v) => ({
        amount_type: v.amountType,
      })),
    ),
  ]),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductUpdatePrices$ {
  /** @deprecated use `ProductUpdatePrices$inboundSchema` instead. */
  export const inboundSchema = ProductUpdatePrices$inboundSchema;
  /** @deprecated use `ProductUpdatePrices$outboundSchema` instead. */
  export const outboundSchema = ProductUpdatePrices$outboundSchema;
  /** @deprecated use `ProductUpdatePrices$Outbound` instead. */
  export type Outbound = ProductUpdatePrices$Outbound;
}

export function productUpdatePricesToJSON(
  productUpdatePrices: ProductUpdatePrices,
): string {
  return JSON.stringify(
    ProductUpdatePrices$outboundSchema.parse(productUpdatePrices),
  );
}

export function productUpdatePricesFromJSON(
  jsonString: string,
): SafeParseResult<ProductUpdatePrices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductUpdatePrices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductUpdatePrices' from JSON`,
  );
}

/** @internal */
export const ProductUpdate$inboundSchema: z.ZodType<
  ProductUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.record(
    z.union([z.string(), z.number().int(), z.number(), z.boolean()]),
  ).optional(),
  trial_interval: z.nullable(TrialInterval$inboundSchema).optional(),
  trial_interval_count: z.nullable(z.number().int()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  recurring_interval: z.nullable(SubscriptionRecurringInterval$inboundSchema)
    .optional(),
  is_archived: z.nullable(z.boolean()).optional(),
  prices: z.nullable(
    z.array(
      z.union([
        ExistingProductPrice$inboundSchema,
        z.union([
          ProductPriceMeteredUnitCreate$inboundSchema.and(
            z.object({ amount_type: z.literal("metered_unit") }).transform((
              v,
            ) => ({ amountType: v.amount_type })),
          ),
          ProductPriceFixedCreate$inboundSchema.and(
            z.object({ amount_type: z.literal("fixed") }).transform((v) => ({
              amountType: v.amount_type,
            })),
          ),
          ProductPriceSeatBasedCreate$inboundSchema.and(
            z.object({ amount_type: z.literal("seat_based") }).transform((
              v,
            ) => ({ amountType: v.amount_type })),
          ),
          ProductPriceCustomCreate$inboundSchema.and(
            z.object({ amount_type: z.literal("custom") }).transform((v) => ({
              amountType: v.amount_type,
            })),
          ),
          ProductPriceFreeCreate$inboundSchema.and(
            z.object({ amount_type: z.literal("free") }).transform((v) => ({
              amountType: v.amount_type,
            })),
          ),
        ]),
      ]),
    ),
  ).optional(),
  medias: z.nullable(z.array(z.string())).optional(),
  attached_custom_fields: z.nullable(
    z.array(AttachedCustomFieldCreate$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "trial_interval": "trialInterval",
    "trial_interval_count": "trialIntervalCount",
    "recurring_interval": "recurringInterval",
    "is_archived": "isArchived",
    "attached_custom_fields": "attachedCustomFields",
  });
});

/** @internal */
export type ProductUpdate$Outbound = {
  metadata?: { [k: string]: string | number | number | boolean } | undefined;
  trial_interval?: string | null | undefined;
  trial_interval_count?: number | null | undefined;
  name?: string | null | undefined;
  description?: string | null | undefined;
  recurring_interval?: string | null | undefined;
  is_archived?: boolean | null | undefined;
  prices?:
    | Array<
      | ExistingProductPrice$Outbound
      | (ProductPriceMeteredUnitCreate$Outbound & {
        amount_type: "metered_unit";
      })
      | (ProductPriceFixedCreate$Outbound & { amount_type: "fixed" })
      | (ProductPriceSeatBasedCreate$Outbound & { amount_type: "seat_based" })
      | (ProductPriceCustomCreate$Outbound & { amount_type: "custom" })
      | (ProductPriceFreeCreate$Outbound & { amount_type: "free" })
    >
    | null
    | undefined;
  medias?: Array<string> | null | undefined;
  attached_custom_fields?:
    | Array<AttachedCustomFieldCreate$Outbound>
    | null
    | undefined;
};

/** @internal */
export const ProductUpdate$outboundSchema: z.ZodType<
  ProductUpdate$Outbound,
  z.ZodTypeDef,
  ProductUpdate
> = z.object({
  metadata: z.record(
    z.union([z.string(), z.number().int(), z.number(), z.boolean()]),
  ).optional(),
  trialInterval: z.nullable(TrialInterval$outboundSchema).optional(),
  trialIntervalCount: z.nullable(z.number().int()).optional(),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  recurringInterval: z.nullable(SubscriptionRecurringInterval$outboundSchema)
    .optional(),
  isArchived: z.nullable(z.boolean()).optional(),
  prices: z.nullable(
    z.array(
      z.union([
        ExistingProductPrice$outboundSchema,
        z.union([
          ProductPriceMeteredUnitCreate$outboundSchema.and(
            z.object({ amountType: z.literal("metered_unit") }).transform((
              v,
            ) => ({ amount_type: v.amountType })),
          ),
          ProductPriceFixedCreate$outboundSchema.and(
            z.object({ amountType: z.literal("fixed") }).transform((v) => ({
              amount_type: v.amountType,
            })),
          ),
          ProductPriceSeatBasedCreate$outboundSchema.and(
            z.object({ amountType: z.literal("seat_based") }).transform((
              v,
            ) => ({ amount_type: v.amountType })),
          ),
          ProductPriceCustomCreate$outboundSchema.and(
            z.object({ amountType: z.literal("custom") }).transform((v) => ({
              amount_type: v.amountType,
            })),
          ),
          ProductPriceFreeCreate$outboundSchema.and(
            z.object({ amountType: z.literal("free") }).transform((v) => ({
              amount_type: v.amountType,
            })),
          ),
        ]),
      ]),
    ),
  ).optional(),
  medias: z.nullable(z.array(z.string())).optional(),
  attachedCustomFields: z.nullable(
    z.array(AttachedCustomFieldCreate$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    trialInterval: "trial_interval",
    trialIntervalCount: "trial_interval_count",
    recurringInterval: "recurring_interval",
    isArchived: "is_archived",
    attachedCustomFields: "attached_custom_fields",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductUpdate$ {
  /** @deprecated use `ProductUpdate$inboundSchema` instead. */
  export const inboundSchema = ProductUpdate$inboundSchema;
  /** @deprecated use `ProductUpdate$outboundSchema` instead. */
  export const outboundSchema = ProductUpdate$outboundSchema;
  /** @deprecated use `ProductUpdate$Outbound` instead. */
  export type Outbound = ProductUpdate$Outbound;
}

export function productUpdateToJSON(productUpdate: ProductUpdate): string {
  return JSON.stringify(ProductUpdate$outboundSchema.parse(productUpdate));
}

export function productUpdateFromJSON(
  jsonString: string,
): SafeParseResult<ProductUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductUpdate' from JSON`,
  );
}
