/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  ExistingProductPrice,
  ExistingProductPrice$inboundSchema,
  ExistingProductPrice$Outbound,
  ExistingProductPrice$outboundSchema,
} from "./existingproductprice.js";
import {
  ProductPriceOneTimeCreate,
  ProductPriceOneTimeCreate$inboundSchema,
  ProductPriceOneTimeCreate$Outbound,
  ProductPriceOneTimeCreate$outboundSchema,
} from "./productpriceonetimecreate.js";
import {
  ProductPriceRecurringCreate,
  ProductPriceRecurringCreate$inboundSchema,
  ProductPriceRecurringCreate$Outbound,
  ProductPriceRecurringCreate$outboundSchema,
} from "./productpricerecurringcreate.js";

export type Prices =
  | ExistingProductPrice
  | ProductPriceOneTimeCreate
  | ProductPriceRecurringCreate;

/**
 * Schema to update a product.
 */
export type ProductUpdate = {
  name?: string | null | undefined;
  /**
   * The description of the product.
   */
  description?: string | null | undefined;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  isHighlighted?: boolean | null | undefined;
  /**
   * Whether the product is archived. If `true`, the product won't be available for purchase anymore. Existing customers will still have access to their benefits, and subscriptions will continue normally.
   */
  isArchived?: boolean | null | undefined;
  /**
   * List of available prices for this product. If you want to keep existing prices, include them in the list as an `ExistingProductPrice` object.
   */
  prices?:
    | Array<
      | ExistingProductPrice
      | ProductPriceOneTimeCreate
      | ProductPriceRecurringCreate
    >
    | null
    | undefined;
  /**
   * List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded.
   */
  medias?: Array<string> | null | undefined;
};

/** @internal */
export const Prices$inboundSchema: z.ZodType<Prices, z.ZodTypeDef, unknown> = z
  .union([
    ExistingProductPrice$inboundSchema,
    ProductPriceOneTimeCreate$inboundSchema,
    ProductPriceRecurringCreate$inboundSchema,
  ]);

/** @internal */
export type Prices$Outbound =
  | ExistingProductPrice$Outbound
  | ProductPriceOneTimeCreate$Outbound
  | ProductPriceRecurringCreate$Outbound;

/** @internal */
export const Prices$outboundSchema: z.ZodType<
  Prices$Outbound,
  z.ZodTypeDef,
  Prices
> = z.union([
  ExistingProductPrice$outboundSchema,
  ProductPriceOneTimeCreate$outboundSchema,
  ProductPriceRecurringCreate$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Prices$ {
  /** @deprecated use `Prices$inboundSchema` instead. */
  export const inboundSchema = Prices$inboundSchema;
  /** @deprecated use `Prices$outboundSchema` instead. */
  export const outboundSchema = Prices$outboundSchema;
  /** @deprecated use `Prices$Outbound` instead. */
  export type Outbound = Prices$Outbound;
}

/** @internal */
export const ProductUpdate$inboundSchema: z.ZodType<
  ProductUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  is_highlighted: z.nullable(z.boolean()).optional(),
  is_archived: z.nullable(z.boolean()).optional(),
  prices: z.nullable(
    z.array(
      z.union([
        ExistingProductPrice$inboundSchema,
        ProductPriceOneTimeCreate$inboundSchema,
        ProductPriceRecurringCreate$inboundSchema,
      ]),
    ),
  ).optional(),
  medias: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "is_highlighted": "isHighlighted",
    "is_archived": "isArchived",
  });
});

/** @internal */
export type ProductUpdate$Outbound = {
  name?: string | null | undefined;
  description?: string | null | undefined;
  is_highlighted?: boolean | null | undefined;
  is_archived?: boolean | null | undefined;
  prices?:
    | Array<
      | ExistingProductPrice$Outbound
      | ProductPriceOneTimeCreate$Outbound
      | ProductPriceRecurringCreate$Outbound
    >
    | null
    | undefined;
  medias?: Array<string> | null | undefined;
};

/** @internal */
export const ProductUpdate$outboundSchema: z.ZodType<
  ProductUpdate$Outbound,
  z.ZodTypeDef,
  ProductUpdate
> = z.object({
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  isHighlighted: z.nullable(z.boolean()).optional(),
  isArchived: z.nullable(z.boolean()).optional(),
  prices: z.nullable(
    z.array(
      z.union([
        ExistingProductPrice$outboundSchema,
        ProductPriceOneTimeCreate$outboundSchema,
        ProductPriceRecurringCreate$outboundSchema,
      ]),
    ),
  ).optional(),
  medias: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    isHighlighted: "is_highlighted",
    isArchived: "is_archived",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductUpdate$ {
  /** @deprecated use `ProductUpdate$inboundSchema` instead. */
  export const inboundSchema = ProductUpdate$inboundSchema;
  /** @deprecated use `ProductUpdate$outboundSchema` instead. */
  export const outboundSchema = ProductUpdate$outboundSchema;
  /** @deprecated use `ProductUpdate$Outbound` instead. */
  export type Outbound = ProductUpdate$Outbound;
}
