/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  ExternalOrganization,
  ExternalOrganization$inboundSchema,
  ExternalOrganization$Outbound,
  ExternalOrganization$outboundSchema,
} from "./externalorganization.js";
import {
  RepositoryProfileSettings,
  RepositoryProfileSettings$inboundSchema,
  RepositoryProfileSettings$Outbound,
  RepositoryProfileSettings$outboundSchema,
} from "./repositoryprofilesettings.js";

export type RepositoryOutput = {
  id: string;
  platform?: "github" | undefined;
  isPrivate: boolean;
  name: string;
  description: string | null;
  stars: number | null;
  license: string | null;
  homepage: string | null;
  /**
   * Settings for the repository profile
   */
  profileSettings: RepositoryProfileSettings | null;
  organization: ExternalOrganization;
};

/** @internal */
export const RepositoryOutput$inboundSchema: z.ZodType<
  RepositoryOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  platform: z.literal("github").optional(),
  is_private: z.boolean(),
  name: z.string(),
  description: z.nullable(z.string()),
  stars: z.nullable(z.number().int()),
  license: z.nullable(z.string()),
  homepage: z.nullable(z.string()),
  profile_settings: z.nullable(RepositoryProfileSettings$inboundSchema),
  organization: ExternalOrganization$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "is_private": "isPrivate",
    "profile_settings": "profileSettings",
  });
});

/** @internal */
export type RepositoryOutput$Outbound = {
  id: string;
  platform: "github";
  is_private: boolean;
  name: string;
  description: string | null;
  stars: number | null;
  license: string | null;
  homepage: string | null;
  profile_settings: RepositoryProfileSettings$Outbound | null;
  organization: ExternalOrganization$Outbound;
};

/** @internal */
export const RepositoryOutput$outboundSchema: z.ZodType<
  RepositoryOutput$Outbound,
  z.ZodTypeDef,
  RepositoryOutput
> = z.object({
  id: z.string(),
  platform: z.literal("github").default("github"),
  isPrivate: z.boolean(),
  name: z.string(),
  description: z.nullable(z.string()),
  stars: z.nullable(z.number().int()),
  license: z.nullable(z.string()),
  homepage: z.nullable(z.string()),
  profileSettings: z.nullable(RepositoryProfileSettings$outboundSchema),
  organization: ExternalOrganization$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    isPrivate: "is_private",
    profileSettings: "profile_settings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RepositoryOutput$ {
  /** @deprecated use `RepositoryOutput$inboundSchema` instead. */
  export const inboundSchema = RepositoryOutput$inboundSchema;
  /** @deprecated use `RepositoryOutput$outboundSchema` instead. */
  export const outboundSchema = RepositoryOutput$outboundSchema;
  /** @deprecated use `RepositoryOutput$Outbound` instead. */
  export type Outbound = RepositoryOutput$Outbound;
}
