/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CheckoutLinkProductCreateMetadata = string | number | boolean;

/**
 * Payment processor to use. Currently only Stripe is supported.
 */
export const CheckoutLinkProductCreatePaymentProcessor = {
  Stripe: "stripe",
} as const;
/**
 * Payment processor to use. Currently only Stripe is supported.
 */
export type CheckoutLinkProductCreatePaymentProcessor = ClosedEnum<
  typeof CheckoutLinkProductCreatePaymentProcessor
>;

export type CheckoutLinkProductCreate = {
  /**
   * Key-value object allowing you to store additional information.
   *
   * @remarks
   *
   * The key must be a string with a maximum length of **40 characters**.
   * The value must be either:
   *
   * * A string with a maximum length of **500 characters**
   * * An integer
   * * A boolean
   *
   * You can store up to **50 key-value pairs**.
   */
  metadata?: { [k: string]: string | number | boolean } | undefined;
  /**
   * Payment processor to use. Currently only Stripe is supported.
   */
  paymentProcessor?: "stripe" | undefined;
  /**
   * Optional label to distinguish links internally
   */
  label?: string | null | undefined;
  /**
   * Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
   */
  allowDiscountCodes?: boolean | undefined;
  /**
   * ID of the discount to apply to the checkout. If the discount is not applicable anymore when opening the checkout link, it'll be ignored.
   */
  discountId?: string | null | undefined;
  /**
   * URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id.
   */
  successUrl?: string | null | undefined;
  /**
   * ID of the product to checkout. First available price will be selected.
   */
  productId: string;
};

/** @internal */
export const CheckoutLinkProductCreateMetadata$inboundSchema: z.ZodType<
  CheckoutLinkProductCreateMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number().int(), z.boolean()]);

/** @internal */
export type CheckoutLinkProductCreateMetadata$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const CheckoutLinkProductCreateMetadata$outboundSchema: z.ZodType<
  CheckoutLinkProductCreateMetadata$Outbound,
  z.ZodTypeDef,
  CheckoutLinkProductCreateMetadata
> = z.union([z.string(), z.number().int(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutLinkProductCreateMetadata$ {
  /** @deprecated use `CheckoutLinkProductCreateMetadata$inboundSchema` instead. */
  export const inboundSchema = CheckoutLinkProductCreateMetadata$inboundSchema;
  /** @deprecated use `CheckoutLinkProductCreateMetadata$outboundSchema` instead. */
  export const outboundSchema =
    CheckoutLinkProductCreateMetadata$outboundSchema;
  /** @deprecated use `CheckoutLinkProductCreateMetadata$Outbound` instead. */
  export type Outbound = CheckoutLinkProductCreateMetadata$Outbound;
}

export function checkoutLinkProductCreateMetadataToJSON(
  checkoutLinkProductCreateMetadata: CheckoutLinkProductCreateMetadata,
): string {
  return JSON.stringify(
    CheckoutLinkProductCreateMetadata$outboundSchema.parse(
      checkoutLinkProductCreateMetadata,
    ),
  );
}

export function checkoutLinkProductCreateMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutLinkProductCreateMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckoutLinkProductCreateMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutLinkProductCreateMetadata' from JSON`,
  );
}

/** @internal */
export const CheckoutLinkProductCreatePaymentProcessor$inboundSchema:
  z.ZodNativeEnum<typeof CheckoutLinkProductCreatePaymentProcessor> = z
    .nativeEnum(CheckoutLinkProductCreatePaymentProcessor);

/** @internal */
export const CheckoutLinkProductCreatePaymentProcessor$outboundSchema:
  z.ZodNativeEnum<typeof CheckoutLinkProductCreatePaymentProcessor> =
    CheckoutLinkProductCreatePaymentProcessor$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutLinkProductCreatePaymentProcessor$ {
  /** @deprecated use `CheckoutLinkProductCreatePaymentProcessor$inboundSchema` instead. */
  export const inboundSchema =
    CheckoutLinkProductCreatePaymentProcessor$inboundSchema;
  /** @deprecated use `CheckoutLinkProductCreatePaymentProcessor$outboundSchema` instead. */
  export const outboundSchema =
    CheckoutLinkProductCreatePaymentProcessor$outboundSchema;
}

/** @internal */
export const CheckoutLinkProductCreate$inboundSchema: z.ZodType<
  CheckoutLinkProductCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
    .optional(),
  payment_processor: z.literal("stripe").optional(),
  label: z.nullable(z.string()).optional(),
  allow_discount_codes: z.boolean().default(true),
  discount_id: z.nullable(z.string()).optional(),
  success_url: z.nullable(z.string()).optional(),
  product_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "payment_processor": "paymentProcessor",
    "allow_discount_codes": "allowDiscountCodes",
    "discount_id": "discountId",
    "success_url": "successUrl",
    "product_id": "productId",
  });
});

/** @internal */
export type CheckoutLinkProductCreate$Outbound = {
  metadata?: { [k: string]: string | number | boolean } | undefined;
  payment_processor: "stripe";
  label?: string | null | undefined;
  allow_discount_codes: boolean;
  discount_id?: string | null | undefined;
  success_url?: string | null | undefined;
  product_id: string;
};

/** @internal */
export const CheckoutLinkProductCreate$outboundSchema: z.ZodType<
  CheckoutLinkProductCreate$Outbound,
  z.ZodTypeDef,
  CheckoutLinkProductCreate
> = z.object({
  metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
    .optional(),
  paymentProcessor: z.literal("stripe").default("stripe"),
  label: z.nullable(z.string()).optional(),
  allowDiscountCodes: z.boolean().default(true),
  discountId: z.nullable(z.string()).optional(),
  successUrl: z.nullable(z.string()).optional(),
  productId: z.string(),
}).transform((v) => {
  return remap$(v, {
    paymentProcessor: "payment_processor",
    allowDiscountCodes: "allow_discount_codes",
    discountId: "discount_id",
    successUrl: "success_url",
    productId: "product_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutLinkProductCreate$ {
  /** @deprecated use `CheckoutLinkProductCreate$inboundSchema` instead. */
  export const inboundSchema = CheckoutLinkProductCreate$inboundSchema;
  /** @deprecated use `CheckoutLinkProductCreate$outboundSchema` instead. */
  export const outboundSchema = CheckoutLinkProductCreate$outboundSchema;
  /** @deprecated use `CheckoutLinkProductCreate$Outbound` instead. */
  export type Outbound = CheckoutLinkProductCreate$Outbound;
}

export function checkoutLinkProductCreateToJSON(
  checkoutLinkProductCreate: CheckoutLinkProductCreate,
): string {
  return JSON.stringify(
    CheckoutLinkProductCreate$outboundSchema.parse(checkoutLinkProductCreate),
  );
}

export function checkoutLinkProductCreateFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutLinkProductCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckoutLinkProductCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutLinkProductCreate' from JSON`,
  );
}
