/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BenefitCycledEvent,
  BenefitCycledEvent$inboundSchema,
  BenefitCycledEvent$Outbound,
  BenefitCycledEvent$outboundSchema,
} from "./benefitcycledevent.js";
import {
  BenefitGrantedEvent,
  BenefitGrantedEvent$inboundSchema,
  BenefitGrantedEvent$Outbound,
  BenefitGrantedEvent$outboundSchema,
} from "./benefitgrantedevent.js";
import {
  BenefitRevokedEvent,
  BenefitRevokedEvent$inboundSchema,
  BenefitRevokedEvent$Outbound,
  BenefitRevokedEvent$outboundSchema,
} from "./benefitrevokedevent.js";
import {
  BenefitUpdatedEvent,
  BenefitUpdatedEvent$inboundSchema,
  BenefitUpdatedEvent$Outbound,
  BenefitUpdatedEvent$outboundSchema,
} from "./benefitupdatedevent.js";
import {
  MeterCreditEvent,
  MeterCreditEvent$inboundSchema,
  MeterCreditEvent$Outbound,
  MeterCreditEvent$outboundSchema,
} from "./metercreditevent.js";
import {
  MeterResetEvent,
  MeterResetEvent$inboundSchema,
  MeterResetEvent$Outbound,
  MeterResetEvent$outboundSchema,
} from "./meterresetevent.js";

export type SystemEvent =
  | (BenefitCycledEvent & { name: "benefit.cycled" })
  | (BenefitGrantedEvent & { name: "benefit.granted" })
  | (BenefitRevokedEvent & { name: "benefit.revoked" })
  | (BenefitUpdatedEvent & { name: "benefit.updated" })
  | (MeterCreditEvent & { name: "meter.credited" })
  | (MeterResetEvent & { name: "meter.reset" });

/** @internal */
export const SystemEvent$inboundSchema: z.ZodType<
  SystemEvent,
  z.ZodTypeDef,
  unknown
> = z.union([
  BenefitCycledEvent$inboundSchema.and(
    z.object({ name: z.literal("benefit.cycled") }).transform((v) => ({
      name: v.name,
    })),
  ),
  BenefitGrantedEvent$inboundSchema.and(
    z.object({ name: z.literal("benefit.granted") }).transform((v) => ({
      name: v.name,
    })),
  ),
  BenefitRevokedEvent$inboundSchema.and(
    z.object({ name: z.literal("benefit.revoked") }).transform((v) => ({
      name: v.name,
    })),
  ),
  BenefitUpdatedEvent$inboundSchema.and(
    z.object({ name: z.literal("benefit.updated") }).transform((v) => ({
      name: v.name,
    })),
  ),
  MeterCreditEvent$inboundSchema.and(
    z.object({ name: z.literal("meter.credited") }).transform((v) => ({
      name: v.name,
    })),
  ),
  MeterResetEvent$inboundSchema.and(
    z.object({ name: z.literal("meter.reset") }).transform((v) => ({
      name: v.name,
    })),
  ),
]);

/** @internal */
export type SystemEvent$Outbound =
  | (BenefitCycledEvent$Outbound & { name: "benefit.cycled" })
  | (BenefitGrantedEvent$Outbound & { name: "benefit.granted" })
  | (BenefitRevokedEvent$Outbound & { name: "benefit.revoked" })
  | (BenefitUpdatedEvent$Outbound & { name: "benefit.updated" })
  | (MeterCreditEvent$Outbound & { name: "meter.credited" })
  | (MeterResetEvent$Outbound & { name: "meter.reset" });

/** @internal */
export const SystemEvent$outboundSchema: z.ZodType<
  SystemEvent$Outbound,
  z.ZodTypeDef,
  SystemEvent
> = z.union([
  BenefitCycledEvent$outboundSchema.and(
    z.object({ name: z.literal("benefit.cycled") }).transform((v) => ({
      name: v.name,
    })),
  ),
  BenefitGrantedEvent$outboundSchema.and(
    z.object({ name: z.literal("benefit.granted") }).transform((v) => ({
      name: v.name,
    })),
  ),
  BenefitRevokedEvent$outboundSchema.and(
    z.object({ name: z.literal("benefit.revoked") }).transform((v) => ({
      name: v.name,
    })),
  ),
  BenefitUpdatedEvent$outboundSchema.and(
    z.object({ name: z.literal("benefit.updated") }).transform((v) => ({
      name: v.name,
    })),
  ),
  MeterCreditEvent$outboundSchema.and(
    z.object({ name: z.literal("meter.credited") }).transform((v) => ({
      name: v.name,
    })),
  ),
  MeterResetEvent$outboundSchema.and(
    z.object({ name: z.literal("meter.reset") }).transform((v) => ({
      name: v.name,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SystemEvent$ {
  /** @deprecated use `SystemEvent$inboundSchema` instead. */
  export const inboundSchema = SystemEvent$inboundSchema;
  /** @deprecated use `SystemEvent$outboundSchema` instead. */
  export const outboundSchema = SystemEvent$outboundSchema;
  /** @deprecated use `SystemEvent$Outbound` instead. */
  export type Outbound = SystemEvent$Outbound;
}

export function systemEventToJSON(systemEvent: SystemEvent): string {
  return JSON.stringify(SystemEvent$outboundSchema.parse(systemEvent));
}

export function systemEventFromJSON(
  jsonString: string,
): SafeParseResult<SystemEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SystemEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SystemEvent' from JSON`,
  );
}
