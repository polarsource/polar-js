/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CurrencyAmount = {
  /**
   * Three letter currency code (eg: USD)
   */
  currency: string;
  /**
   * Amount in the currencies smallest unit (cents if currency is USD)
   */
  amount: number;
};

/** @internal */
export const CurrencyAmount$inboundSchema: z.ZodType<
  CurrencyAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  amount: z.number().int(),
});

/** @internal */
export type CurrencyAmount$Outbound = {
  currency: string;
  amount: number;
};

/** @internal */
export const CurrencyAmount$outboundSchema: z.ZodType<
  CurrencyAmount$Outbound,
  z.ZodTypeDef,
  CurrencyAmount
> = z.object({
  currency: z.string(),
  amount: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrencyAmount$ {
  /** @deprecated use `CurrencyAmount$inboundSchema` instead. */
  export const inboundSchema = CurrencyAmount$inboundSchema;
  /** @deprecated use `CurrencyAmount$outboundSchema` instead. */
  export const outboundSchema = CurrencyAmount$outboundSchema;
  /** @deprecated use `CurrencyAmount$Outbound` instead. */
  export type Outbound = CurrencyAmount$Outbound;
}

export function currencyAmountToJSON(currencyAmount: CurrencyAmount): string {
  return JSON.stringify(CurrencyAmount$outboundSchema.parse(currencyAmount));
}

export function currencyAmountFromJSON(
  jsonString: string,
): SafeParseResult<CurrencyAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CurrencyAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CurrencyAmount' from JSON`,
  );
}
