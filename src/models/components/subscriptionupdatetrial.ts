/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SubscriptionUpdateTrial = {
  /**
   * Set or extend the trial period of the subscription. If set to `now`, the trial will end immediately.
   */
  trialEnd: Date;
};

/** @internal */
export const SubscriptionUpdateTrial$inboundSchema: z.ZodType<
  SubscriptionUpdateTrial,
  z.ZodTypeDef,
  unknown
> = z.object({
  trial_end: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "trial_end": "trialEnd",
  });
});

/** @internal */
export type SubscriptionUpdateTrial$Outbound = {
  trial_end: string;
};

/** @internal */
export const SubscriptionUpdateTrial$outboundSchema: z.ZodType<
  SubscriptionUpdateTrial$Outbound,
  z.ZodTypeDef,
  SubscriptionUpdateTrial
> = z.object({
  trialEnd: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    trialEnd: "trial_end",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionUpdateTrial$ {
  /** @deprecated use `SubscriptionUpdateTrial$inboundSchema` instead. */
  export const inboundSchema = SubscriptionUpdateTrial$inboundSchema;
  /** @deprecated use `SubscriptionUpdateTrial$outboundSchema` instead. */
  export const outboundSchema = SubscriptionUpdateTrial$outboundSchema;
  /** @deprecated use `SubscriptionUpdateTrial$Outbound` instead. */
  export type Outbound = SubscriptionUpdateTrial$Outbound;
}

export function subscriptionUpdateTrialToJSON(
  subscriptionUpdateTrial: SubscriptionUpdateTrial,
): string {
  return JSON.stringify(
    SubscriptionUpdateTrial$outboundSchema.parse(subscriptionUpdateTrial),
  );
}

export function subscriptionUpdateTrialFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionUpdateTrial, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionUpdateTrial$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionUpdateTrial' from JSON`,
  );
}
