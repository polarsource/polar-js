/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";
import {
  CheckoutStatus,
  CheckoutStatus$inboundSchema,
  CheckoutStatus$outboundSchema,
} from "./checkoutstatus.js";

export type PaymentProcessorMetadata = {};

/**
 * Checkout session data retrieved using an access token.
 */
export type PolarCheckoutSchemasCheckout = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The ID of the object.
   */
  id: string;
  paymentProcessor?: "stripe" | undefined;
  status: CheckoutStatus;
  /**
   * Client secret used to update and complete the checkout session from the client.
   */
  clientSecret: string;
  /**
   * URL where the customer can access the checkout session.
   */
  url: string;
  /**
   * Expiration date and time of the checkout session.
   */
  expiresAt: Date;
  /**
   * URL where the customer will be redirected after a successful payment.
   */
  successUrl: string;
  amount: number | null;
  /**
   * Computed tax amount to pay in cents.
   */
  taxAmount: number | null;
  /**
   * Currency code of the checkout session.
   */
  currency: string | null;
  /**
   * Total amount to pay in cents.
   */
  totalAmount: number | null;
  /**
   * ID of the product to checkout.
   */
  productId: string;
  /**
   * ID of the product price to checkout.
   */
  productPriceId: string;
  /**
   * Whether the checkout requires payment. Useful to detect free products.
   */
  isPaymentRequired: boolean;
  customerId: string | null;
  customerName: string | null;
  customerEmail: string | null;
  customerIpAddress: string | null;
  customerBillingAddress: Address | null;
  customerTaxId: string | null;
  paymentProcessorMetadata: PaymentProcessorMetadata;
  metadata: { [k: string]: string };
};

/** @internal */
export const PaymentProcessorMetadata$inboundSchema: z.ZodType<
  PaymentProcessorMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PaymentProcessorMetadata$Outbound = {};

/** @internal */
export const PaymentProcessorMetadata$outboundSchema: z.ZodType<
  PaymentProcessorMetadata$Outbound,
  z.ZodTypeDef,
  PaymentProcessorMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentProcessorMetadata$ {
  /** @deprecated use `PaymentProcessorMetadata$inboundSchema` instead. */
  export const inboundSchema = PaymentProcessorMetadata$inboundSchema;
  /** @deprecated use `PaymentProcessorMetadata$outboundSchema` instead. */
  export const outboundSchema = PaymentProcessorMetadata$outboundSchema;
  /** @deprecated use `PaymentProcessorMetadata$Outbound` instead. */
  export type Outbound = PaymentProcessorMetadata$Outbound;
}

/** @internal */
export const PolarCheckoutSchemasCheckout$inboundSchema: z.ZodType<
  PolarCheckoutSchemasCheckout,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  id: z.string(),
  payment_processor: z.literal("stripe").optional(),
  status: CheckoutStatus$inboundSchema,
  client_secret: z.string(),
  url: z.string(),
  expires_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  success_url: z.string(),
  amount: z.nullable(z.number().int()),
  tax_amount: z.nullable(z.number().int()),
  currency: z.nullable(z.string()),
  total_amount: z.nullable(z.number().int()),
  product_id: z.string(),
  product_price_id: z.string(),
  is_payment_required: z.boolean(),
  customer_id: z.nullable(z.string()),
  customer_name: z.nullable(z.string()),
  customer_email: z.nullable(z.string()),
  customer_ip_address: z.nullable(z.string()),
  customer_billing_address: z.nullable(Address$inboundSchema),
  customer_tax_id: z.nullable(z.string()),
  payment_processor_metadata: z.lazy(() =>
    PaymentProcessorMetadata$inboundSchema
  ),
  metadata: z.record(z.string()),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "payment_processor": "paymentProcessor",
    "client_secret": "clientSecret",
    "expires_at": "expiresAt",
    "success_url": "successUrl",
    "tax_amount": "taxAmount",
    "total_amount": "totalAmount",
    "product_id": "productId",
    "product_price_id": "productPriceId",
    "is_payment_required": "isPaymentRequired",
    "customer_id": "customerId",
    "customer_name": "customerName",
    "customer_email": "customerEmail",
    "customer_ip_address": "customerIpAddress",
    "customer_billing_address": "customerBillingAddress",
    "customer_tax_id": "customerTaxId",
    "payment_processor_metadata": "paymentProcessorMetadata",
  });
});

/** @internal */
export type PolarCheckoutSchemasCheckout$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  payment_processor: "stripe";
  status: string;
  client_secret: string;
  url: string;
  expires_at: string;
  success_url: string;
  amount: number | null;
  tax_amount: number | null;
  currency: string | null;
  total_amount: number | null;
  product_id: string;
  product_price_id: string;
  is_payment_required: boolean;
  customer_id: string | null;
  customer_name: string | null;
  customer_email: string | null;
  customer_ip_address: string | null;
  customer_billing_address: Address$Outbound | null;
  customer_tax_id: string | null;
  payment_processor_metadata: PaymentProcessorMetadata$Outbound;
  metadata: { [k: string]: string };
};

/** @internal */
export const PolarCheckoutSchemasCheckout$outboundSchema: z.ZodType<
  PolarCheckoutSchemasCheckout$Outbound,
  z.ZodTypeDef,
  PolarCheckoutSchemasCheckout
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  paymentProcessor: z.literal("stripe").default("stripe"),
  status: CheckoutStatus$outboundSchema,
  clientSecret: z.string(),
  url: z.string(),
  expiresAt: z.date().transform(v => v.toISOString()),
  successUrl: z.string(),
  amount: z.nullable(z.number().int()),
  taxAmount: z.nullable(z.number().int()),
  currency: z.nullable(z.string()),
  totalAmount: z.nullable(z.number().int()),
  productId: z.string(),
  productPriceId: z.string(),
  isPaymentRequired: z.boolean(),
  customerId: z.nullable(z.string()),
  customerName: z.nullable(z.string()),
  customerEmail: z.nullable(z.string()),
  customerIpAddress: z.nullable(z.string()),
  customerBillingAddress: z.nullable(Address$outboundSchema),
  customerTaxId: z.nullable(z.string()),
  paymentProcessorMetadata: z.lazy(() =>
    PaymentProcessorMetadata$outboundSchema
  ),
  metadata: z.record(z.string()),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    paymentProcessor: "payment_processor",
    clientSecret: "client_secret",
    expiresAt: "expires_at",
    successUrl: "success_url",
    taxAmount: "tax_amount",
    totalAmount: "total_amount",
    productId: "product_id",
    productPriceId: "product_price_id",
    isPaymentRequired: "is_payment_required",
    customerId: "customer_id",
    customerName: "customer_name",
    customerEmail: "customer_email",
    customerIpAddress: "customer_ip_address",
    customerBillingAddress: "customer_billing_address",
    customerTaxId: "customer_tax_id",
    paymentProcessorMetadata: "payment_processor_metadata",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PolarCheckoutSchemasCheckout$ {
  /** @deprecated use `PolarCheckoutSchemasCheckout$inboundSchema` instead. */
  export const inboundSchema = PolarCheckoutSchemasCheckout$inboundSchema;
  /** @deprecated use `PolarCheckoutSchemasCheckout$outboundSchema` instead. */
  export const outboundSchema = PolarCheckoutSchemasCheckout$outboundSchema;
  /** @deprecated use `PolarCheckoutSchemasCheckout$Outbound` instead. */
  export type Outbound = PolarCheckoutSchemasCheckout$Outbound;
}
