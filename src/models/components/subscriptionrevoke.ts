/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CustomerCancellationReason,
  CustomerCancellationReason$inboundSchema,
  CustomerCancellationReason$outboundSchema,
} from "./customercancellationreason.js";

export type SubscriptionRevoke = {
  /**
   * Customer reason for cancellation.
   *
   * @remarks
   *
   * Helpful to monitor reasons behind churn for future improvements.
   *
   * Only set this in case your own service is requesting the reason from the
   * customer. Or you know based on direct conversations, i.e support, with
   * the customer.
   *
   * * `too_expensive`: Too expensive for the customer.
   * * `missing_features`: Customer is missing certain features.
   * * `switched_service`: Customer switched to another service.
   * * `unused`: Customer is not using it enough.
   * * `customer_service`: Customer is not satisfied with the customer service.
   * * `low_quality`: Customer is unhappy with the quality.
   * * `too_complex`: Customer considers the service too complicated.
   * * `other`: Other reason(s).
   */
  customerCancellationReason?: CustomerCancellationReason | null | undefined;
  /**
   * Customer feedback and why they decided to cancel.
   *
   * @remarks
   *
   * **IMPORTANT:**
   * Do not use this to store internal notes! It's intended to be input
   * from the customer and is therefore also available in their Polar
   * purchases library.
   *
   * Only set this in case your own service is requesting the reason from the
   * customer. Or you copy a message directly from a customer
   * conversation, i.e support.
   */
  customerCancellationComment?: string | null | undefined;
  /**
   * Cancel and revoke an active subscription immediately
   */
  revoke: true;
};

/** @internal */
export const SubscriptionRevoke$inboundSchema: z.ZodType<
  SubscriptionRevoke,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_cancellation_reason: z.nullable(
    CustomerCancellationReason$inboundSchema,
  ).optional(),
  customer_cancellation_comment: z.nullable(z.string()).optional(),
  revoke: z.literal(true),
}).transform((v) => {
  return remap$(v, {
    "customer_cancellation_reason": "customerCancellationReason",
    "customer_cancellation_comment": "customerCancellationComment",
  });
});

/** @internal */
export type SubscriptionRevoke$Outbound = {
  customer_cancellation_reason?: string | null | undefined;
  customer_cancellation_comment?: string | null | undefined;
  revoke: true;
};

/** @internal */
export const SubscriptionRevoke$outboundSchema: z.ZodType<
  SubscriptionRevoke$Outbound,
  z.ZodTypeDef,
  SubscriptionRevoke
> = z.object({
  customerCancellationReason: z.nullable(
    CustomerCancellationReason$outboundSchema,
  ).optional(),
  customerCancellationComment: z.nullable(z.string()).optional(),
  revoke: z.literal(true),
}).transform((v) => {
  return remap$(v, {
    customerCancellationReason: "customer_cancellation_reason",
    customerCancellationComment: "customer_cancellation_comment",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionRevoke$ {
  /** @deprecated use `SubscriptionRevoke$inboundSchema` instead. */
  export const inboundSchema = SubscriptionRevoke$inboundSchema;
  /** @deprecated use `SubscriptionRevoke$outboundSchema` instead. */
  export const outboundSchema = SubscriptionRevoke$outboundSchema;
  /** @deprecated use `SubscriptionRevoke$Outbound` instead. */
  export type Outbound = SubscriptionRevoke$Outbound;
}

export function subscriptionRevokeToJSON(
  subscriptionRevoke: SubscriptionRevoke,
): string {
  return JSON.stringify(
    SubscriptionRevoke$outboundSchema.parse(subscriptionRevoke),
  );
}

export function subscriptionRevokeFromJSON(
  jsonString: string,
): SafeParseResult<SubscriptionRevoke, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubscriptionRevoke$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubscriptionRevoke' from JSON`,
  );
}
