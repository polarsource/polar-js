/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AttachedCustomFieldCreate,
  AttachedCustomFieldCreate$inboundSchema,
  AttachedCustomFieldCreate$Outbound,
  AttachedCustomFieldCreate$outboundSchema,
} from "./attachedcustomfieldcreate.js";
import {
  ProductPriceCustomCreate,
  ProductPriceCustomCreate$inboundSchema,
  ProductPriceCustomCreate$Outbound,
  ProductPriceCustomCreate$outboundSchema,
} from "./productpricecustomcreate.js";
import {
  ProductPriceFixedCreate,
  ProductPriceFixedCreate$inboundSchema,
  ProductPriceFixedCreate$Outbound,
  ProductPriceFixedCreate$outboundSchema,
} from "./productpricefixedcreate.js";
import {
  ProductPriceFreeCreate,
  ProductPriceFreeCreate$inboundSchema,
  ProductPriceFreeCreate$Outbound,
  ProductPriceFreeCreate$outboundSchema,
} from "./productpricefreecreate.js";
import {
  ProductPriceMeteredUnitCreate,
  ProductPriceMeteredUnitCreate$inboundSchema,
  ProductPriceMeteredUnitCreate$Outbound,
  ProductPriceMeteredUnitCreate$outboundSchema,
} from "./productpricemeteredunitcreate.js";

export type ProductCreateOneTimeMetadata = string | number | number | boolean;

export type ProductCreateOneTimePrices =
  | ProductPriceMeteredUnitCreate
  | ProductPriceFixedCreate
  | ProductPriceCustomCreate
  | ProductPriceFreeCreate;

export type ProductCreateOneTime = {
  /**
   * Key-value object allowing you to store additional information.
   *
   * @remarks
   *
   * The key must be a string with a maximum length of **40 characters**.
   * The value must be either:
   *
   * * A string with a maximum length of **500 characters**
   * * An integer
   * * A floating-point number
   * * A boolean
   *
   * You can store up to **50 key-value pairs**.
   */
  metadata?: { [k: string]: string | number | number | boolean } | undefined;
  /**
   * The name of the product.
   */
  name: string;
  /**
   * The description of the product.
   */
  description?: string | null | undefined;
  /**
   * List of available prices for this product. It should contain at most one static price (fixed, custom or free), and any number of metered prices. Metered prices are not supported on one-time purchase products.
   */
  prices: Array<
    | ProductPriceMeteredUnitCreate
    | ProductPriceFixedCreate
    | ProductPriceCustomCreate
    | ProductPriceFreeCreate
  >;
  /**
   * List of file IDs. Each one must be on the same organization as the product, of type `product_media` and correctly uploaded.
   */
  medias?: Array<string> | null | undefined;
  /**
   * List of custom fields to attach.
   */
  attachedCustomFields?: Array<AttachedCustomFieldCreate> | undefined;
  /**
   * The ID of the organization owning the product. **Required unless you use an organization token.**
   */
  organizationId?: string | null | undefined;
  /**
   * States that the product is a one-time purchase.
   */
  recurringInterval?: any | null | undefined;
};

/** @internal */
export const ProductCreateOneTimeMetadata$inboundSchema: z.ZodType<
  ProductCreateOneTimeMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);

/** @internal */
export type ProductCreateOneTimeMetadata$Outbound =
  | string
  | number
  | number
  | boolean;

/** @internal */
export const ProductCreateOneTimeMetadata$outboundSchema: z.ZodType<
  ProductCreateOneTimeMetadata$Outbound,
  z.ZodTypeDef,
  ProductCreateOneTimeMetadata
> = z.union([z.string(), z.number().int(), z.number(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductCreateOneTimeMetadata$ {
  /** @deprecated use `ProductCreateOneTimeMetadata$inboundSchema` instead. */
  export const inboundSchema = ProductCreateOneTimeMetadata$inboundSchema;
  /** @deprecated use `ProductCreateOneTimeMetadata$outboundSchema` instead. */
  export const outboundSchema = ProductCreateOneTimeMetadata$outboundSchema;
  /** @deprecated use `ProductCreateOneTimeMetadata$Outbound` instead. */
  export type Outbound = ProductCreateOneTimeMetadata$Outbound;
}

export function productCreateOneTimeMetadataToJSON(
  productCreateOneTimeMetadata: ProductCreateOneTimeMetadata,
): string {
  return JSON.stringify(
    ProductCreateOneTimeMetadata$outboundSchema.parse(
      productCreateOneTimeMetadata,
    ),
  );
}

export function productCreateOneTimeMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ProductCreateOneTimeMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductCreateOneTimeMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductCreateOneTimeMetadata' from JSON`,
  );
}

/** @internal */
export const ProductCreateOneTimePrices$inboundSchema: z.ZodType<
  ProductCreateOneTimePrices,
  z.ZodTypeDef,
  unknown
> = z.union([
  ProductPriceMeteredUnitCreate$inboundSchema,
  ProductPriceFixedCreate$inboundSchema,
  ProductPriceCustomCreate$inboundSchema,
  ProductPriceFreeCreate$inboundSchema,
]);

/** @internal */
export type ProductCreateOneTimePrices$Outbound =
  | ProductPriceMeteredUnitCreate$Outbound
  | ProductPriceFixedCreate$Outbound
  | ProductPriceCustomCreate$Outbound
  | ProductPriceFreeCreate$Outbound;

/** @internal */
export const ProductCreateOneTimePrices$outboundSchema: z.ZodType<
  ProductCreateOneTimePrices$Outbound,
  z.ZodTypeDef,
  ProductCreateOneTimePrices
> = z.union([
  ProductPriceMeteredUnitCreate$outboundSchema,
  ProductPriceFixedCreate$outboundSchema,
  ProductPriceCustomCreate$outboundSchema,
  ProductPriceFreeCreate$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductCreateOneTimePrices$ {
  /** @deprecated use `ProductCreateOneTimePrices$inboundSchema` instead. */
  export const inboundSchema = ProductCreateOneTimePrices$inboundSchema;
  /** @deprecated use `ProductCreateOneTimePrices$outboundSchema` instead. */
  export const outboundSchema = ProductCreateOneTimePrices$outboundSchema;
  /** @deprecated use `ProductCreateOneTimePrices$Outbound` instead. */
  export type Outbound = ProductCreateOneTimePrices$Outbound;
}

export function productCreateOneTimePricesToJSON(
  productCreateOneTimePrices: ProductCreateOneTimePrices,
): string {
  return JSON.stringify(
    ProductCreateOneTimePrices$outboundSchema.parse(productCreateOneTimePrices),
  );
}

export function productCreateOneTimePricesFromJSON(
  jsonString: string,
): SafeParseResult<ProductCreateOneTimePrices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductCreateOneTimePrices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductCreateOneTimePrices' from JSON`,
  );
}

/** @internal */
export const ProductCreateOneTime$inboundSchema: z.ZodType<
  ProductCreateOneTime,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.record(
    z.union([z.string(), z.number().int(), z.number(), z.boolean()]),
  ).optional(),
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  prices: z.array(
    z.union([
      ProductPriceMeteredUnitCreate$inboundSchema,
      ProductPriceFixedCreate$inboundSchema,
      ProductPriceCustomCreate$inboundSchema,
      ProductPriceFreeCreate$inboundSchema,
    ]),
  ),
  medias: z.nullable(z.array(z.string())).optional(),
  attached_custom_fields: z.array(AttachedCustomFieldCreate$inboundSchema)
    .optional(),
  organization_id: z.nullable(z.string()).optional(),
  recurring_interval: z.nullable(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "attached_custom_fields": "attachedCustomFields",
    "organization_id": "organizationId",
    "recurring_interval": "recurringInterval",
  });
});

/** @internal */
export type ProductCreateOneTime$Outbound = {
  metadata?: { [k: string]: string | number | number | boolean } | undefined;
  name: string;
  description?: string | null | undefined;
  prices: Array<
    | ProductPriceMeteredUnitCreate$Outbound
    | ProductPriceFixedCreate$Outbound
    | ProductPriceCustomCreate$Outbound
    | ProductPriceFreeCreate$Outbound
  >;
  medias?: Array<string> | null | undefined;
  attached_custom_fields?:
    | Array<AttachedCustomFieldCreate$Outbound>
    | undefined;
  organization_id?: string | null | undefined;
  recurring_interval?: any | null | undefined;
};

/** @internal */
export const ProductCreateOneTime$outboundSchema: z.ZodType<
  ProductCreateOneTime$Outbound,
  z.ZodTypeDef,
  ProductCreateOneTime
> = z.object({
  metadata: z.record(
    z.union([z.string(), z.number().int(), z.number(), z.boolean()]),
  ).optional(),
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  prices: z.array(
    z.union([
      ProductPriceMeteredUnitCreate$outboundSchema,
      ProductPriceFixedCreate$outboundSchema,
      ProductPriceCustomCreate$outboundSchema,
      ProductPriceFreeCreate$outboundSchema,
    ]),
  ),
  medias: z.nullable(z.array(z.string())).optional(),
  attachedCustomFields: z.array(AttachedCustomFieldCreate$outboundSchema)
    .optional(),
  organizationId: z.nullable(z.string()).optional(),
  recurringInterval: z.nullable(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    attachedCustomFields: "attached_custom_fields",
    organizationId: "organization_id",
    recurringInterval: "recurring_interval",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductCreateOneTime$ {
  /** @deprecated use `ProductCreateOneTime$inboundSchema` instead. */
  export const inboundSchema = ProductCreateOneTime$inboundSchema;
  /** @deprecated use `ProductCreateOneTime$outboundSchema` instead. */
  export const outboundSchema = ProductCreateOneTime$outboundSchema;
  /** @deprecated use `ProductCreateOneTime$Outbound` instead. */
  export type Outbound = ProductCreateOneTime$Outbound;
}

export function productCreateOneTimeToJSON(
  productCreateOneTime: ProductCreateOneTime,
): string {
  return JSON.stringify(
    ProductCreateOneTime$outboundSchema.parse(productCreateOneTime),
  );
}

export function productCreateOneTimeFromJSON(
  jsonString: string,
): SafeParseResult<ProductCreateOneTime, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProductCreateOneTime$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProductCreateOneTime' from JSON`,
  );
}
