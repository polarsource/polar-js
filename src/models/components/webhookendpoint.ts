/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  WebhookEventType,
  WebhookEventType$inboundSchema,
  WebhookEventType$outboundSchema,
} from "./webhookeventtype.js";
import {
  WebhookFormat,
  WebhookFormat$inboundSchema,
  WebhookFormat$outboundSchema,
} from "./webhookformat.js";

/**
 * A webhook endpoint.
 */
export type WebhookEndpoint = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The ID of the object.
   */
  id: string;
  /**
   * The URL where the webhook events will be sent.
   */
  url: string;
  format: WebhookFormat;
  /**
   * The secret used to sign the webhook events.
   */
  secret: string;
  /**
   * The organization ID associated with the webhook endpoint.
   */
  organizationId: string;
  /**
   * The events that will trigger the webhook.
   */
  events: Array<WebhookEventType>;
};

/** @internal */
export const WebhookEndpoint$inboundSchema: z.ZodType<
  WebhookEndpoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  id: z.string(),
  url: z.string(),
  format: WebhookFormat$inboundSchema,
  secret: z.string(),
  organization_id: z.string(),
  events: z.array(WebhookEventType$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "organization_id": "organizationId",
  });
});

/** @internal */
export type WebhookEndpoint$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  url: string;
  format: string;
  secret: string;
  organization_id: string;
  events: Array<string>;
};

/** @internal */
export const WebhookEndpoint$outboundSchema: z.ZodType<
  WebhookEndpoint$Outbound,
  z.ZodTypeDef,
  WebhookEndpoint
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  url: z.string(),
  format: WebhookFormat$outboundSchema,
  secret: z.string(),
  organizationId: z.string(),
  events: z.array(WebhookEventType$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookEndpoint$ {
  /** @deprecated use `WebhookEndpoint$inboundSchema` instead. */
  export const inboundSchema = WebhookEndpoint$inboundSchema;
  /** @deprecated use `WebhookEndpoint$outboundSchema` instead. */
  export const outboundSchema = WebhookEndpoint$outboundSchema;
  /** @deprecated use `WebhookEndpoint$Outbound` instead. */
  export type Outbound = WebhookEndpoint$Outbound;
}

export function webhookEndpointToJSON(
  webhookEndpoint: WebhookEndpoint,
): string {
  return JSON.stringify(WebhookEndpoint$outboundSchema.parse(webhookEndpoint));
}

export function webhookEndpointFromJSON(
  jsonString: string,
): SafeParseResult<WebhookEndpoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookEndpoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookEndpoint' from JSON`,
  );
}
