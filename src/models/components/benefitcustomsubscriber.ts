/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  BenefitCustomSubscriberProperties,
  BenefitCustomSubscriberProperties$inboundSchema,
  BenefitCustomSubscriberProperties$Outbound,
  BenefitCustomSubscriberProperties$outboundSchema,
} from "./benefitcustomsubscriberproperties.js";
import {
  BenefitGrantSubscriber,
  BenefitGrantSubscriber$inboundSchema,
  BenefitGrantSubscriber$Outbound,
  BenefitGrantSubscriber$outboundSchema,
} from "./benefitgrantsubscriber.js";

export const BenefitCustomSubscriberType = {
  Custom: "custom",
} as const;
export type BenefitCustomSubscriberType = ClosedEnum<
  typeof BenefitCustomSubscriberType
>;

export type BenefitCustomSubscriber = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The ID of the benefit.
   */
  id: string;
  type?: "custom" | undefined;
  /**
   * The description of the benefit.
   */
  description: string;
  /**
   * Whether the benefit is selectable when creating a product.
   */
  selectable: boolean;
  /**
   * Whether the benefit is deletable.
   */
  deletable: boolean;
  /**
   * The ID of the organization owning the benefit.
   */
  organizationId: string;
  grants: Array<BenefitGrantSubscriber>;
  /**
   * Properties available to subscribers for a benefit of type `custom`.
   */
  properties: BenefitCustomSubscriberProperties;
};

/** @internal */
export const BenefitCustomSubscriberType$inboundSchema: z.ZodNativeEnum<
  typeof BenefitCustomSubscriberType
> = z.nativeEnum(BenefitCustomSubscriberType);

/** @internal */
export const BenefitCustomSubscriberType$outboundSchema: z.ZodNativeEnum<
  typeof BenefitCustomSubscriberType
> = BenefitCustomSubscriberType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitCustomSubscriberType$ {
  /** @deprecated use `BenefitCustomSubscriberType$inboundSchema` instead. */
  export const inboundSchema = BenefitCustomSubscriberType$inboundSchema;
  /** @deprecated use `BenefitCustomSubscriberType$outboundSchema` instead. */
  export const outboundSchema = BenefitCustomSubscriberType$outboundSchema;
}

/** @internal */
export const BenefitCustomSubscriber$inboundSchema: z.ZodType<
  BenefitCustomSubscriber,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  id: z.string(),
  type: z.literal("custom").optional(),
  description: z.string(),
  selectable: z.boolean(),
  deletable: z.boolean(),
  organization_id: z.string(),
  grants: z.array(BenefitGrantSubscriber$inboundSchema),
  properties: BenefitCustomSubscriberProperties$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "organization_id": "organizationId",
  });
});

/** @internal */
export type BenefitCustomSubscriber$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  type: "custom";
  description: string;
  selectable: boolean;
  deletable: boolean;
  organization_id: string;
  grants: Array<BenefitGrantSubscriber$Outbound>;
  properties: BenefitCustomSubscriberProperties$Outbound;
};

/** @internal */
export const BenefitCustomSubscriber$outboundSchema: z.ZodType<
  BenefitCustomSubscriber$Outbound,
  z.ZodTypeDef,
  BenefitCustomSubscriber
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  type: z.literal("custom").default("custom"),
  description: z.string(),
  selectable: z.boolean(),
  deletable: z.boolean(),
  organizationId: z.string(),
  grants: z.array(BenefitGrantSubscriber$outboundSchema),
  properties: BenefitCustomSubscriberProperties$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    organizationId: "organization_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitCustomSubscriber$ {
  /** @deprecated use `BenefitCustomSubscriber$inboundSchema` instead. */
  export const inboundSchema = BenefitCustomSubscriber$inboundSchema;
  /** @deprecated use `BenefitCustomSubscriber$outboundSchema` instead. */
  export const outboundSchema = BenefitCustomSubscriber$outboundSchema;
  /** @deprecated use `BenefitCustomSubscriber$Outbound` instead. */
  export type Outbound = BenefitCustomSubscriber$Outbound;
}
