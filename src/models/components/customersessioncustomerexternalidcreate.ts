/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Schema for creating a customer session using an external customer ID.
 */
export type CustomerSessionCustomerExternalIDCreate = {
  /**
   * External ID of the customer to create a session for.
   */
  externalCustomerId: string;
};

/** @internal */
export const CustomerSessionCustomerExternalIDCreate$inboundSchema: z.ZodType<
  CustomerSessionCustomerExternalIDCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_customer_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "external_customer_id": "externalCustomerId",
  });
});

/** @internal */
export type CustomerSessionCustomerExternalIDCreate$Outbound = {
  external_customer_id: string;
};

/** @internal */
export const CustomerSessionCustomerExternalIDCreate$outboundSchema: z.ZodType<
  CustomerSessionCustomerExternalIDCreate$Outbound,
  z.ZodTypeDef,
  CustomerSessionCustomerExternalIDCreate
> = z.object({
  externalCustomerId: z.string(),
}).transform((v) => {
  return remap$(v, {
    externalCustomerId: "external_customer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomerSessionCustomerExternalIDCreate$ {
  /** @deprecated use `CustomerSessionCustomerExternalIDCreate$inboundSchema` instead. */
  export const inboundSchema =
    CustomerSessionCustomerExternalIDCreate$inboundSchema;
  /** @deprecated use `CustomerSessionCustomerExternalIDCreate$outboundSchema` instead. */
  export const outboundSchema =
    CustomerSessionCustomerExternalIDCreate$outboundSchema;
  /** @deprecated use `CustomerSessionCustomerExternalIDCreate$Outbound` instead. */
  export type Outbound = CustomerSessionCustomerExternalIDCreate$Outbound;
}

export function customerSessionCustomerExternalIDCreateToJSON(
  customerSessionCustomerExternalIDCreate:
    CustomerSessionCustomerExternalIDCreate,
): string {
  return JSON.stringify(
    CustomerSessionCustomerExternalIDCreate$outboundSchema.parse(
      customerSessionCustomerExternalIDCreate,
    ),
  );
}

export function customerSessionCustomerExternalIDCreateFromJSON(
  jsonString: string,
): SafeParseResult<
  CustomerSessionCustomerExternalIDCreate,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CustomerSessionCustomerExternalIDCreate$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CustomerSessionCustomerExternalIDCreate' from JSON`,
  );
}
