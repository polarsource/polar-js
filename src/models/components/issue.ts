/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Assignee,
  Assignee$inboundSchema,
  Assignee$Outbound,
  Assignee$outboundSchema,
} from "./assignee.js";
import {
  Author,
  Author$inboundSchema,
  Author$Outbound,
  Author$outboundSchema,
} from "./author.js";
import {
  Funding,
  Funding$inboundSchema,
  Funding$Outbound,
  Funding$outboundSchema,
} from "./funding.js";
import {
  Label,
  Label$inboundSchema,
  Label$Outbound,
  Label$outboundSchema,
} from "./label.js";
import {
  Platforms,
  Platforms$inboundSchema,
  Platforms$outboundSchema,
} from "./platforms.js";
import {
  Reactions,
  Reactions$inboundSchema,
  Reactions$Outbound,
  Reactions$outboundSchema,
} from "./reactions.js";
import {
  Repository,
  Repository$inboundSchema,
  Repository$Outbound,
  Repository$outboundSchema,
} from "./repository.js";
import { State, State$inboundSchema, State$outboundSchema } from "./state.js";

export type Issue = {
  id: string;
  platform: Platforms;
  /**
   * GitHub #number
   */
  number: number;
  /**
   * GitHub issue title
   */
  title: string;
  /**
   * GitHub issue body
   */
  body?: string | null | undefined;
  /**
   * Number of GitHub comments made on the issue
   */
  comments?: number | null | undefined;
  labels?: Array<Label> | undefined;
  /**
   * GitHub author
   */
  author?: Author | null | undefined;
  /**
   * GitHub assignees
   */
  assignees?: Array<Assignee> | null | undefined;
  /**
   * GitHub reactions
   */
  reactions?: Reactions | null | undefined;
  state: State;
  issueClosedAt?: Date | null | undefined;
  issueModifiedAt?: Date | null | undefined;
  issueCreatedAt: Date;
  /**
   * If a maintainer needs to mark this issue as solved
   */
  needsConfirmationSolved: boolean;
  /**
   * If this issue has been marked as confirmed solved through Polar
   */
  confirmedSolvedAt?: Date | null | undefined;
  funding: Funding;
  repository: Repository;
  /**
   * Share of rewrads that will be rewarded to contributors of this issue. A number between 0 and 100 (inclusive).
   */
  upfrontSplitToContributors?: number | null | undefined;
  /**
   * If this issue currently has the Polar badge SVG embedded
   */
  pledgeBadgeCurrentlyEmbedded: boolean;
  /**
   * Optional custom badge SVG promotional content
   */
  badgeCustomContent?: string | null | undefined;
};

/** @internal */
export const Issue$inboundSchema: z.ZodType<Issue, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    platform: Platforms$inboundSchema,
    number: z.number().int(),
    title: z.string(),
    body: z.nullable(z.string()).optional(),
    comments: z.nullable(z.number().int()).optional(),
    labels: z.array(Label$inboundSchema).optional(),
    author: z.nullable(Author$inboundSchema).optional(),
    assignees: z.nullable(z.array(Assignee$inboundSchema)).optional(),
    reactions: z.nullable(Reactions$inboundSchema).optional(),
    state: State$inboundSchema,
    issue_closed_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    issue_modified_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    issue_created_at: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    needs_confirmation_solved: z.boolean(),
    confirmed_solved_at: z.nullable(
      z.string().datetime({ offset: true }).transform(v => new Date(v)),
    ).optional(),
    funding: Funding$inboundSchema,
    repository: Repository$inboundSchema,
    upfront_split_to_contributors: z.nullable(z.number().int()).optional(),
    pledge_badge_currently_embedded: z.boolean(),
    badge_custom_content: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "issue_closed_at": "issueClosedAt",
      "issue_modified_at": "issueModifiedAt",
      "issue_created_at": "issueCreatedAt",
      "needs_confirmation_solved": "needsConfirmationSolved",
      "confirmed_solved_at": "confirmedSolvedAt",
      "upfront_split_to_contributors": "upfrontSplitToContributors",
      "pledge_badge_currently_embedded": "pledgeBadgeCurrentlyEmbedded",
      "badge_custom_content": "badgeCustomContent",
    });
  });

/** @internal */
export type Issue$Outbound = {
  id: string;
  platform: string;
  number: number;
  title: string;
  body?: string | null | undefined;
  comments?: number | null | undefined;
  labels?: Array<Label$Outbound> | undefined;
  author?: Author$Outbound | null | undefined;
  assignees?: Array<Assignee$Outbound> | null | undefined;
  reactions?: Reactions$Outbound | null | undefined;
  state: string;
  issue_closed_at?: string | null | undefined;
  issue_modified_at?: string | null | undefined;
  issue_created_at: string;
  needs_confirmation_solved: boolean;
  confirmed_solved_at?: string | null | undefined;
  funding: Funding$Outbound;
  repository: Repository$Outbound;
  upfront_split_to_contributors?: number | null | undefined;
  pledge_badge_currently_embedded: boolean;
  badge_custom_content?: string | null | undefined;
};

/** @internal */
export const Issue$outboundSchema: z.ZodType<
  Issue$Outbound,
  z.ZodTypeDef,
  Issue
> = z.object({
  id: z.string(),
  platform: Platforms$outboundSchema,
  number: z.number().int(),
  title: z.string(),
  body: z.nullable(z.string()).optional(),
  comments: z.nullable(z.number().int()).optional(),
  labels: z.array(Label$outboundSchema).optional(),
  author: z.nullable(Author$outboundSchema).optional(),
  assignees: z.nullable(z.array(Assignee$outboundSchema)).optional(),
  reactions: z.nullable(Reactions$outboundSchema).optional(),
  state: State$outboundSchema,
  issueClosedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  issueModifiedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  issueCreatedAt: z.date().transform(v => v.toISOString()),
  needsConfirmationSolved: z.boolean(),
  confirmedSolvedAt: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  funding: Funding$outboundSchema,
  repository: Repository$outboundSchema,
  upfrontSplitToContributors: z.nullable(z.number().int()).optional(),
  pledgeBadgeCurrentlyEmbedded: z.boolean(),
  badgeCustomContent: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    issueClosedAt: "issue_closed_at",
    issueModifiedAt: "issue_modified_at",
    issueCreatedAt: "issue_created_at",
    needsConfirmationSolved: "needs_confirmation_solved",
    confirmedSolvedAt: "confirmed_solved_at",
    upfrontSplitToContributors: "upfront_split_to_contributors",
    pledgeBadgeCurrentlyEmbedded: "pledge_badge_currently_embedded",
    badgeCustomContent: "badge_custom_content",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Issue$ {
  /** @deprecated use `Issue$inboundSchema` instead. */
  export const inboundSchema = Issue$inboundSchema;
  /** @deprecated use `Issue$outboundSchema` instead. */
  export const outboundSchema = Issue$outboundSchema;
  /** @deprecated use `Issue$Outbound` instead. */
  export type Outbound = Issue$Outbound;
}

export function issueToJSON(issue: Issue): string {
  return JSON.stringify(Issue$outboundSchema.parse(issue));
}

export function issueFromJSON(
  jsonString: string,
): SafeParseResult<Issue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Issue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Issue' from JSON`,
  );
}
