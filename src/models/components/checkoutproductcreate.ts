/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Address,
  Address$inboundSchema,
  Address$Outbound,
  Address$outboundSchema,
} from "./address.js";

export type CheckoutProductCreateMetadata = string | number | boolean;

export type CheckoutProductCreateCustomFieldData =
  | string
  | number
  | boolean
  | Date;

export type CheckoutProductCreateCustomerMetadata = string | number | boolean;

/**
 * Create a new checkout session from a product.
 *
 * @remarks
 *
 * **Deprecated**: Use `CheckoutProductsCreate` instead.
 *
 * Metadata set on the checkout will be copied
 * to the resulting order and/or subscription.
 */
export type CheckoutProductCreate = {
  /**
   * Key-value object allowing you to store additional information.
   *
   * @remarks
   *
   * The key must be a string with a maximum length of **40 characters**.
   * The value must be either:
   *
   * * A string with a maximum length of **500 characters**
   * * An integer
   * * A boolean
   *
   * You can store up to **50 key-value pairs**.
   */
  metadata?: { [k: string]: string | number | boolean } | undefined;
  /**
   * Key-value object storing custom field values.
   */
  customFieldData?:
    | { [k: string]: string | number | boolean | Date | null }
    | undefined;
  /**
   * ID of the discount to apply to the checkout.
   */
  discountId?: string | null | undefined;
  /**
   * Whether to allow the customer to apply discount codes. If you apply a discount through `discount_id`, it'll still be applied, but the customer won't be able to change it.
   */
  allowDiscountCodes?: boolean | undefined;
  amount?: number | null | undefined;
  /**
   * ID of an existing customer in the organization. The customer data will be pre-filled in the checkout form. The resulting order will be linked to this customer.
   */
  customerId?: string | null | undefined;
  /**
   * ID of the customer in your system. If a matching customer exists on Polar, the resulting order will be linked to this customer. Otherwise, a new customer will be created with this external ID set.
   */
  customerExternalId?: string | null | undefined;
  customerName?: string | null | undefined;
  customerEmail?: string | null | undefined;
  customerIpAddress?: string | null | undefined;
  customerBillingAddress?: Address | null | undefined;
  customerTaxId?: string | null | undefined;
  /**
   * Key-value object allowing you to store additional information that'll be copied to the created customer.
   *
   * @remarks
   *
   * The key must be a string with a maximum length of **40 characters**.
   * The value must be either:
   *
   * * A string with a maximum length of **500 characters**
   * * An integer
   * * A boolean
   *
   * You can store up to **50 key-value pairs**.
   */
  customerMetadata?: { [k: string]: string | number | boolean } | undefined;
  /**
   * ID of a subscription to upgrade. It must be on a free pricing. If checkout is successful, metadata set on this checkout will be copied to the subscription, and existing keys will be overwritten.
   */
  subscriptionId?: string | null | undefined;
  /**
   * URL where the customer will be redirected after a successful payment.You can add the `checkout_id={CHECKOUT_ID}` query parameter to retrieve the checkout session id.
   */
  successUrl?: string | null | undefined;
  /**
   * If you plan to embed the checkout session, set this to the Origin of the embedding page. It'll allow the Polar iframe to communicate with the parent page.
   */
  embedOrigin?: string | null | undefined;
  /**
   * ID of the product to checkout. First available price will be selected.
   */
  productId: string;
};

/** @internal */
export const CheckoutProductCreateMetadata$inboundSchema: z.ZodType<
  CheckoutProductCreateMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number().int(), z.boolean()]);

/** @internal */
export type CheckoutProductCreateMetadata$Outbound = string | number | boolean;

/** @internal */
export const CheckoutProductCreateMetadata$outboundSchema: z.ZodType<
  CheckoutProductCreateMetadata$Outbound,
  z.ZodTypeDef,
  CheckoutProductCreateMetadata
> = z.union([z.string(), z.number().int(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutProductCreateMetadata$ {
  /** @deprecated use `CheckoutProductCreateMetadata$inboundSchema` instead. */
  export const inboundSchema = CheckoutProductCreateMetadata$inboundSchema;
  /** @deprecated use `CheckoutProductCreateMetadata$outboundSchema` instead. */
  export const outboundSchema = CheckoutProductCreateMetadata$outboundSchema;
  /** @deprecated use `CheckoutProductCreateMetadata$Outbound` instead. */
  export type Outbound = CheckoutProductCreateMetadata$Outbound;
}

export function checkoutProductCreateMetadataToJSON(
  checkoutProductCreateMetadata: CheckoutProductCreateMetadata,
): string {
  return JSON.stringify(
    CheckoutProductCreateMetadata$outboundSchema.parse(
      checkoutProductCreateMetadata,
    ),
  );
}

export function checkoutProductCreateMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutProductCreateMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckoutProductCreateMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutProductCreateMetadata' from JSON`,
  );
}

/** @internal */
export const CheckoutProductCreateCustomFieldData$inboundSchema: z.ZodType<
  CheckoutProductCreateCustomFieldData,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number().int(),
  z.boolean(),
  z.string().datetime({ offset: true }).transform(v => new Date(v)),
]);

/** @internal */
export type CheckoutProductCreateCustomFieldData$Outbound =
  | string
  | number
  | boolean
  | string;

/** @internal */
export const CheckoutProductCreateCustomFieldData$outboundSchema: z.ZodType<
  CheckoutProductCreateCustomFieldData$Outbound,
  z.ZodTypeDef,
  CheckoutProductCreateCustomFieldData
> = z.union([
  z.string(),
  z.number().int(),
  z.boolean(),
  z.date().transform(v => v.toISOString()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutProductCreateCustomFieldData$ {
  /** @deprecated use `CheckoutProductCreateCustomFieldData$inboundSchema` instead. */
  export const inboundSchema =
    CheckoutProductCreateCustomFieldData$inboundSchema;
  /** @deprecated use `CheckoutProductCreateCustomFieldData$outboundSchema` instead. */
  export const outboundSchema =
    CheckoutProductCreateCustomFieldData$outboundSchema;
  /** @deprecated use `CheckoutProductCreateCustomFieldData$Outbound` instead. */
  export type Outbound = CheckoutProductCreateCustomFieldData$Outbound;
}

export function checkoutProductCreateCustomFieldDataToJSON(
  checkoutProductCreateCustomFieldData: CheckoutProductCreateCustomFieldData,
): string {
  return JSON.stringify(
    CheckoutProductCreateCustomFieldData$outboundSchema.parse(
      checkoutProductCreateCustomFieldData,
    ),
  );
}

export function checkoutProductCreateCustomFieldDataFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutProductCreateCustomFieldData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CheckoutProductCreateCustomFieldData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutProductCreateCustomFieldData' from JSON`,
  );
}

/** @internal */
export const CheckoutProductCreateCustomerMetadata$inboundSchema: z.ZodType<
  CheckoutProductCreateCustomerMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number().int(), z.boolean()]);

/** @internal */
export type CheckoutProductCreateCustomerMetadata$Outbound =
  | string
  | number
  | boolean;

/** @internal */
export const CheckoutProductCreateCustomerMetadata$outboundSchema: z.ZodType<
  CheckoutProductCreateCustomerMetadata$Outbound,
  z.ZodTypeDef,
  CheckoutProductCreateCustomerMetadata
> = z.union([z.string(), z.number().int(), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutProductCreateCustomerMetadata$ {
  /** @deprecated use `CheckoutProductCreateCustomerMetadata$inboundSchema` instead. */
  export const inboundSchema =
    CheckoutProductCreateCustomerMetadata$inboundSchema;
  /** @deprecated use `CheckoutProductCreateCustomerMetadata$outboundSchema` instead. */
  export const outboundSchema =
    CheckoutProductCreateCustomerMetadata$outboundSchema;
  /** @deprecated use `CheckoutProductCreateCustomerMetadata$Outbound` instead. */
  export type Outbound = CheckoutProductCreateCustomerMetadata$Outbound;
}

export function checkoutProductCreateCustomerMetadataToJSON(
  checkoutProductCreateCustomerMetadata: CheckoutProductCreateCustomerMetadata,
): string {
  return JSON.stringify(
    CheckoutProductCreateCustomerMetadata$outboundSchema.parse(
      checkoutProductCreateCustomerMetadata,
    ),
  );
}

export function checkoutProductCreateCustomerMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutProductCreateCustomerMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CheckoutProductCreateCustomerMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutProductCreateCustomerMetadata' from JSON`,
  );
}

/** @internal */
export const CheckoutProductCreate$inboundSchema: z.ZodType<
  CheckoutProductCreate,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
    .optional(),
  custom_field_data: z.record(
    z.nullable(
      z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.string().datetime({ offset: true }).transform(v => new Date(v)),
      ]),
    ),
  ).optional(),
  discount_id: z.nullable(z.string()).optional(),
  allow_discount_codes: z.boolean().default(true),
  amount: z.nullable(z.number().int()).optional(),
  customer_id: z.nullable(z.string()).optional(),
  customer_external_id: z.nullable(z.string()).optional(),
  customer_name: z.nullable(z.string()).optional(),
  customer_email: z.nullable(z.string()).optional(),
  customer_ip_address: z.nullable(z.string()).optional(),
  customer_billing_address: z.nullable(Address$inboundSchema).optional(),
  customer_tax_id: z.nullable(z.string()).optional(),
  customer_metadata: z.record(
    z.union([z.string(), z.number().int(), z.boolean()]),
  ).optional(),
  subscription_id: z.nullable(z.string()).optional(),
  success_url: z.nullable(z.string()).optional(),
  embed_origin: z.nullable(z.string()).optional(),
  product_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "custom_field_data": "customFieldData",
    "discount_id": "discountId",
    "allow_discount_codes": "allowDiscountCodes",
    "customer_id": "customerId",
    "customer_external_id": "customerExternalId",
    "customer_name": "customerName",
    "customer_email": "customerEmail",
    "customer_ip_address": "customerIpAddress",
    "customer_billing_address": "customerBillingAddress",
    "customer_tax_id": "customerTaxId",
    "customer_metadata": "customerMetadata",
    "subscription_id": "subscriptionId",
    "success_url": "successUrl",
    "embed_origin": "embedOrigin",
    "product_id": "productId",
  });
});

/** @internal */
export type CheckoutProductCreate$Outbound = {
  metadata?: { [k: string]: string | number | boolean } | undefined;
  custom_field_data?:
    | { [k: string]: string | number | boolean | string | null }
    | undefined;
  discount_id?: string | null | undefined;
  allow_discount_codes: boolean;
  amount?: number | null | undefined;
  customer_id?: string | null | undefined;
  customer_external_id?: string | null | undefined;
  customer_name?: string | null | undefined;
  customer_email?: string | null | undefined;
  customer_ip_address?: string | null | undefined;
  customer_billing_address?: Address$Outbound | null | undefined;
  customer_tax_id?: string | null | undefined;
  customer_metadata?: { [k: string]: string | number | boolean } | undefined;
  subscription_id?: string | null | undefined;
  success_url?: string | null | undefined;
  embed_origin?: string | null | undefined;
  product_id: string;
};

/** @internal */
export const CheckoutProductCreate$outboundSchema: z.ZodType<
  CheckoutProductCreate$Outbound,
  z.ZodTypeDef,
  CheckoutProductCreate
> = z.object({
  metadata: z.record(z.union([z.string(), z.number().int(), z.boolean()]))
    .optional(),
  customFieldData: z.record(
    z.nullable(
      z.union([
        z.string(),
        z.number().int(),
        z.boolean(),
        z.date().transform(v => v.toISOString()),
      ]),
    ),
  ).optional(),
  discountId: z.nullable(z.string()).optional(),
  allowDiscountCodes: z.boolean().default(true),
  amount: z.nullable(z.number().int()).optional(),
  customerId: z.nullable(z.string()).optional(),
  customerExternalId: z.nullable(z.string()).optional(),
  customerName: z.nullable(z.string()).optional(),
  customerEmail: z.nullable(z.string()).optional(),
  customerIpAddress: z.nullable(z.string()).optional(),
  customerBillingAddress: z.nullable(Address$outboundSchema).optional(),
  customerTaxId: z.nullable(z.string()).optional(),
  customerMetadata: z.record(
    z.union([z.string(), z.number().int(), z.boolean()]),
  ).optional(),
  subscriptionId: z.nullable(z.string()).optional(),
  successUrl: z.nullable(z.string()).optional(),
  embedOrigin: z.nullable(z.string()).optional(),
  productId: z.string(),
}).transform((v) => {
  return remap$(v, {
    customFieldData: "custom_field_data",
    discountId: "discount_id",
    allowDiscountCodes: "allow_discount_codes",
    customerId: "customer_id",
    customerExternalId: "customer_external_id",
    customerName: "customer_name",
    customerEmail: "customer_email",
    customerIpAddress: "customer_ip_address",
    customerBillingAddress: "customer_billing_address",
    customerTaxId: "customer_tax_id",
    customerMetadata: "customer_metadata",
    subscriptionId: "subscription_id",
    successUrl: "success_url",
    embedOrigin: "embed_origin",
    productId: "product_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CheckoutProductCreate$ {
  /** @deprecated use `CheckoutProductCreate$inboundSchema` instead. */
  export const inboundSchema = CheckoutProductCreate$inboundSchema;
  /** @deprecated use `CheckoutProductCreate$outboundSchema` instead. */
  export const outboundSchema = CheckoutProductCreate$outboundSchema;
  /** @deprecated use `CheckoutProductCreate$Outbound` instead. */
  export type Outbound = CheckoutProductCreate$Outbound;
}

export function checkoutProductCreateToJSON(
  checkoutProductCreate: CheckoutProductCreate,
): string {
  return JSON.stringify(
    CheckoutProductCreate$outboundSchema.parse(checkoutProductCreate),
  );
}

export function checkoutProductCreateFromJSON(
  jsonString: string,
): SafeParseResult<CheckoutProductCreate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CheckoutProductCreate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CheckoutProductCreate' from JSON`,
  );
}
