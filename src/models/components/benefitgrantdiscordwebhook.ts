/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BenefitDiscord,
  BenefitDiscord$inboundSchema,
  BenefitDiscord$Outbound,
  BenefitDiscord$outboundSchema,
} from "./benefitdiscord.js";
import {
  BenefitGrantDiscordProperties,
  BenefitGrantDiscordProperties$inboundSchema,
  BenefitGrantDiscordProperties$Outbound,
  BenefitGrantDiscordProperties$outboundSchema,
} from "./benefitgrantdiscordproperties.js";
import {
  BenefitGrantError,
  BenefitGrantError$inboundSchema,
  BenefitGrantError$Outbound,
  BenefitGrantError$outboundSchema,
} from "./benefitgranterror.js";
import {
  Customer,
  Customer$inboundSchema,
  Customer$Outbound,
  Customer$outboundSchema,
} from "./customer.js";

export type BenefitGrantDiscordWebhook = {
  /**
   * Creation timestamp of the object.
   */
  createdAt: Date;
  /**
   * Last modification timestamp of the object.
   */
  modifiedAt: Date | null;
  /**
   * The ID of the grant.
   */
  id: string;
  /**
   * The timestamp when the benefit was granted. If `None`, the benefit is not granted.
   */
  grantedAt?: Date | null | undefined;
  /**
   * Whether the benefit is granted.
   */
  isGranted: boolean;
  /**
   * The timestamp when the benefit was revoked. If `None`, the benefit is not revoked.
   */
  revokedAt?: Date | null | undefined;
  /**
   * Whether the benefit is revoked.
   */
  isRevoked: boolean;
  /**
   * The ID of the subscription that granted this benefit.
   */
  subscriptionId: string | null;
  /**
   * The ID of the order that granted this benefit.
   */
  orderId: string | null;
  /**
   * The ID of the customer concerned by this grant.
   */
  customerId: string;
  /**
   * The ID of the benefit concerned by this grant.
   */
  benefitId: string;
  /**
   * The error information if the benefit grant failed with an unrecoverable error.
   */
  error?: BenefitGrantError | null | undefined;
  /**
   * A customer in an organization.
   */
  customer: Customer;
  /**
   * A benefit of type `discord`.
   *
   * @remarks
   *
   * Use it to automatically invite your backers to a Discord server.
   */
  benefit: BenefitDiscord;
  properties: BenefitGrantDiscordProperties;
  previousProperties?: BenefitGrantDiscordProperties | null | undefined;
};

/** @internal */
export const BenefitGrantDiscordWebhook$inboundSchema: z.ZodType<
  BenefitGrantDiscordWebhook,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  modified_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  id: z.string(),
  granted_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  is_granted: z.boolean(),
  revoked_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  is_revoked: z.boolean(),
  subscription_id: z.nullable(z.string()),
  order_id: z.nullable(z.string()),
  customer_id: z.string(),
  benefit_id: z.string(),
  error: z.nullable(BenefitGrantError$inboundSchema).optional(),
  customer: Customer$inboundSchema,
  benefit: BenefitDiscord$inboundSchema,
  properties: BenefitGrantDiscordProperties$inboundSchema,
  previous_properties: z.nullable(BenefitGrantDiscordProperties$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "modified_at": "modifiedAt",
    "granted_at": "grantedAt",
    "is_granted": "isGranted",
    "revoked_at": "revokedAt",
    "is_revoked": "isRevoked",
    "subscription_id": "subscriptionId",
    "order_id": "orderId",
    "customer_id": "customerId",
    "benefit_id": "benefitId",
    "previous_properties": "previousProperties",
  });
});

/** @internal */
export type BenefitGrantDiscordWebhook$Outbound = {
  created_at: string;
  modified_at: string | null;
  id: string;
  granted_at?: string | null | undefined;
  is_granted: boolean;
  revoked_at?: string | null | undefined;
  is_revoked: boolean;
  subscription_id: string | null;
  order_id: string | null;
  customer_id: string;
  benefit_id: string;
  error?: BenefitGrantError$Outbound | null | undefined;
  customer: Customer$Outbound;
  benefit: BenefitDiscord$Outbound;
  properties: BenefitGrantDiscordProperties$Outbound;
  previous_properties?:
    | BenefitGrantDiscordProperties$Outbound
    | null
    | undefined;
};

/** @internal */
export const BenefitGrantDiscordWebhook$outboundSchema: z.ZodType<
  BenefitGrantDiscordWebhook$Outbound,
  z.ZodTypeDef,
  BenefitGrantDiscordWebhook
> = z.object({
  createdAt: z.date().transform(v => v.toISOString()),
  modifiedAt: z.nullable(z.date().transform(v => v.toISOString())),
  id: z.string(),
  grantedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  isGranted: z.boolean(),
  revokedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  isRevoked: z.boolean(),
  subscriptionId: z.nullable(z.string()),
  orderId: z.nullable(z.string()),
  customerId: z.string(),
  benefitId: z.string(),
  error: z.nullable(BenefitGrantError$outboundSchema).optional(),
  customer: Customer$outboundSchema,
  benefit: BenefitDiscord$outboundSchema,
  properties: BenefitGrantDiscordProperties$outboundSchema,
  previousProperties: z.nullable(BenefitGrantDiscordProperties$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    modifiedAt: "modified_at",
    grantedAt: "granted_at",
    isGranted: "is_granted",
    revokedAt: "revoked_at",
    isRevoked: "is_revoked",
    subscriptionId: "subscription_id",
    orderId: "order_id",
    customerId: "customer_id",
    benefitId: "benefit_id",
    previousProperties: "previous_properties",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitGrantDiscordWebhook$ {
  /** @deprecated use `BenefitGrantDiscordWebhook$inboundSchema` instead. */
  export const inboundSchema = BenefitGrantDiscordWebhook$inboundSchema;
  /** @deprecated use `BenefitGrantDiscordWebhook$outboundSchema` instead. */
  export const outboundSchema = BenefitGrantDiscordWebhook$outboundSchema;
  /** @deprecated use `BenefitGrantDiscordWebhook$Outbound` instead. */
  export type Outbound = BenefitGrantDiscordWebhook$Outbound;
}

export function benefitGrantDiscordWebhookToJSON(
  benefitGrantDiscordWebhook: BenefitGrantDiscordWebhook,
): string {
  return JSON.stringify(
    BenefitGrantDiscordWebhook$outboundSchema.parse(benefitGrantDiscordWebhook),
  );
}

export function benefitGrantDiscordWebhookFromJSON(
  jsonString: string,
): SafeParseResult<BenefitGrantDiscordWebhook, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BenefitGrantDiscordWebhook$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BenefitGrantDiscordWebhook' from JSON`,
  );
}
