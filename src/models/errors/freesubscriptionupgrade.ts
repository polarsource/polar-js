/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

export const FreeSubscriptionUpgradeType = {
  FreeSubscriptionUpgrade: "FreeSubscriptionUpgrade",
} as const;
export type FreeSubscriptionUpgradeType = ClosedEnum<
  typeof FreeSubscriptionUpgradeType
>;

export type FreeSubscriptionUpgradeData = {
  type: "FreeSubscriptionUpgrade";
  detail: string;
};

export class FreeSubscriptionUpgrade extends Error {
  type: "FreeSubscriptionUpgrade";
  detail: string;

  /** The original data that was passed to this error instance. */
  data$: FreeSubscriptionUpgradeData;

  constructor(err: FreeSubscriptionUpgradeData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.type = err.type;
    this.detail = err.detail;

    this.name = "FreeSubscriptionUpgrade";
  }
}

/** @internal */
export const FreeSubscriptionUpgradeType$inboundSchema: z.ZodNativeEnum<
  typeof FreeSubscriptionUpgradeType
> = z.nativeEnum(FreeSubscriptionUpgradeType);

/** @internal */
export const FreeSubscriptionUpgradeType$outboundSchema: z.ZodNativeEnum<
  typeof FreeSubscriptionUpgradeType
> = FreeSubscriptionUpgradeType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FreeSubscriptionUpgradeType$ {
  /** @deprecated use `FreeSubscriptionUpgradeType$inboundSchema` instead. */
  export const inboundSchema = FreeSubscriptionUpgradeType$inboundSchema;
  /** @deprecated use `FreeSubscriptionUpgradeType$outboundSchema` instead. */
  export const outboundSchema = FreeSubscriptionUpgradeType$outboundSchema;
}

/** @internal */
export const FreeSubscriptionUpgrade$inboundSchema: z.ZodType<
  FreeSubscriptionUpgrade,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("FreeSubscriptionUpgrade"),
  detail: z.string(),
})
  .transform((v) => {
    return new FreeSubscriptionUpgrade(v);
  });

/** @internal */
export type FreeSubscriptionUpgrade$Outbound = {
  type: "FreeSubscriptionUpgrade";
  detail: string;
};

/** @internal */
export const FreeSubscriptionUpgrade$outboundSchema: z.ZodType<
  FreeSubscriptionUpgrade$Outbound,
  z.ZodTypeDef,
  FreeSubscriptionUpgrade
> = z.instanceof(FreeSubscriptionUpgrade)
  .transform(v => v.data$)
  .pipe(z.object({
    type: z.literal("FreeSubscriptionUpgrade").default(
      "FreeSubscriptionUpgrade",
    ),
    detail: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FreeSubscriptionUpgrade$ {
  /** @deprecated use `FreeSubscriptionUpgrade$inboundSchema` instead. */
  export const inboundSchema = FreeSubscriptionUpgrade$inboundSchema;
  /** @deprecated use `FreeSubscriptionUpgrade$outboundSchema` instead. */
  export const outboundSchema = FreeSubscriptionUpgrade$outboundSchema;
  /** @deprecated use `FreeSubscriptionUpgrade$Outbound` instead. */
  export type Outbound = FreeSubscriptionUpgrade$Outbound;
}
