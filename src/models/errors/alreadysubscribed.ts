/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

export const AlreadySubscribedType = {
  AlreadySubscribed: "AlreadySubscribed",
} as const;
export type AlreadySubscribedType = ClosedEnum<typeof AlreadySubscribedType>;

export type AlreadySubscribedData = {
  type: "AlreadySubscribed";
  detail: string;
};

export class AlreadySubscribed extends Error {
  type: "AlreadySubscribed";
  detail: string;

  /** The original data that was passed to this error instance. */
  data$: AlreadySubscribedData;

  constructor(err: AlreadySubscribedData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.type = err.type;
    this.detail = err.detail;

    this.name = "AlreadySubscribed";
  }
}

/** @internal */
export const AlreadySubscribedType$inboundSchema: z.ZodNativeEnum<
  typeof AlreadySubscribedType
> = z.nativeEnum(AlreadySubscribedType);

/** @internal */
export const AlreadySubscribedType$outboundSchema: z.ZodNativeEnum<
  typeof AlreadySubscribedType
> = AlreadySubscribedType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AlreadySubscribedType$ {
  /** @deprecated use `AlreadySubscribedType$inboundSchema` instead. */
  export const inboundSchema = AlreadySubscribedType$inboundSchema;
  /** @deprecated use `AlreadySubscribedType$outboundSchema` instead. */
  export const outboundSchema = AlreadySubscribedType$outboundSchema;
}

/** @internal */
export const AlreadySubscribed$inboundSchema: z.ZodType<
  AlreadySubscribed,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("AlreadySubscribed"),
  detail: z.string(),
})
  .transform((v) => {
    return new AlreadySubscribed(v);
  });

/** @internal */
export type AlreadySubscribed$Outbound = {
  type: "AlreadySubscribed";
  detail: string;
};

/** @internal */
export const AlreadySubscribed$outboundSchema: z.ZodType<
  AlreadySubscribed$Outbound,
  z.ZodTypeDef,
  AlreadySubscribed
> = z.instanceof(AlreadySubscribed)
  .transform(v => v.data$)
  .pipe(z.object({
    type: z.literal("AlreadySubscribed").default("AlreadySubscribed"),
    detail: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AlreadySubscribed$ {
  /** @deprecated use `AlreadySubscribed$inboundSchema` instead. */
  export const inboundSchema = AlreadySubscribed$inboundSchema;
  /** @deprecated use `AlreadySubscribed$outboundSchema` instead. */
  export const outboundSchema = AlreadySubscribed$outboundSchema;
  /** @deprecated use `AlreadySubscribed$Outbound` instead. */
  export type Outbound = AlreadySubscribed$Outbound;
}
