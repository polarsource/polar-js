/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { PolarError } from "./polarerror.js";

export type NotPaidOrderData = {
  error: "NotPaidOrder";
  detail: string;
};

export class NotPaidOrder extends PolarError {
  error: "NotPaidOrder";
  detail: string;

  /** The original data that was passed to this error instance. */
  data$: NotPaidOrderData;

  constructor(
    err: NotPaidOrderData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    this.detail = err.detail;

    this.name = "NotPaidOrder";
  }
}

/** @internal */
export const NotPaidOrder$inboundSchema: z.ZodType<
  NotPaidOrder,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("NotPaidOrder"),
  detail: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new NotPaidOrder(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type NotPaidOrder$Outbound = {
  error: "NotPaidOrder";
  detail: string;
};

/** @internal */
export const NotPaidOrder$outboundSchema: z.ZodType<
  NotPaidOrder$Outbound,
  z.ZodTypeDef,
  NotPaidOrder
> = z.instanceof(NotPaidOrder)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("NotPaidOrder"),
    detail: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotPaidOrder$ {
  /** @deprecated use `NotPaidOrder$inboundSchema` instead. */
  export const inboundSchema = NotPaidOrder$inboundSchema;
  /** @deprecated use `NotPaidOrder$outboundSchema` instead. */
  export const outboundSchema = NotPaidOrder$outboundSchema;
  /** @deprecated use `NotPaidOrder$Outbound` instead. */
  export type Outbound = NotPaidOrder$Outbound;
}
