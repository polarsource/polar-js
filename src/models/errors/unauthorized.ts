/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

export const UnauthorizedError = {
  Unauthorized: "Unauthorized",
} as const;
export type UnauthorizedError = ClosedEnum<typeof UnauthorizedError>;

export type UnauthorizedData = {
  error: "Unauthorized";
  detail: string;
};

export class Unauthorized extends Error {
  error: "Unauthorized";
  detail: string;

  /** The original data that was passed to this error instance. */
  data$: UnauthorizedData;

  constructor(err: UnauthorizedData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.error = err.error;
    this.detail = err.detail;

    this.name = "Unauthorized";
  }
}

/** @internal */
export const UnauthorizedError$inboundSchema: z.ZodNativeEnum<
  typeof UnauthorizedError
> = z.nativeEnum(UnauthorizedError);

/** @internal */
export const UnauthorizedError$outboundSchema: z.ZodNativeEnum<
  typeof UnauthorizedError
> = UnauthorizedError$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedError$ {
  /** @deprecated use `UnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = UnauthorizedError$inboundSchema;
  /** @deprecated use `UnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = UnauthorizedError$outboundSchema;
}

/** @internal */
export const Unauthorized$inboundSchema: z.ZodType<
  Unauthorized,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.literal("Unauthorized"),
  detail: z.string(),
})
  .transform((v) => {
    return new Unauthorized(v);
  });

/** @internal */
export type Unauthorized$Outbound = {
  error: "Unauthorized";
  detail: string;
};

/** @internal */
export const Unauthorized$outboundSchema: z.ZodType<
  Unauthorized$Outbound,
  z.ZodTypeDef,
  Unauthorized
> = z.instanceof(Unauthorized)
  .transform(v => v.data$)
  .pipe(z.object({
    error: z.literal("Unauthorized").default("Unauthorized"),
    detail: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Unauthorized$ {
  /** @deprecated use `Unauthorized$inboundSchema` instead. */
  export const inboundSchema = Unauthorized$inboundSchema;
  /** @deprecated use `Unauthorized$outboundSchema` instead. */
  export const outboundSchema = Unauthorized$outboundSchema;
  /** @deprecated use `Unauthorized$Outbound` instead. */
  export type Outbound = Unauthorized$Outbound;
}
