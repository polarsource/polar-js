/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

export const FileNotFoundType = {
  FileNotFound: "FileNotFound",
} as const;
export type FileNotFoundType = ClosedEnum<typeof FileNotFoundType>;

export type FileNotFoundData = {
  type: "FileNotFound";
  detail: string;
};

export class FileNotFound extends Error {
  type: "FileNotFound";
  detail: string;

  /** The original data that was passed to this error instance. */
  data$: FileNotFoundData;

  constructor(err: FileNotFoundData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.type = err.type;
    this.detail = err.detail;

    this.name = "FileNotFound";
  }
}

/** @internal */
export const FileNotFoundType$inboundSchema: z.ZodNativeEnum<
  typeof FileNotFoundType
> = z.nativeEnum(FileNotFoundType);

/** @internal */
export const FileNotFoundType$outboundSchema: z.ZodNativeEnum<
  typeof FileNotFoundType
> = FileNotFoundType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileNotFoundType$ {
  /** @deprecated use `FileNotFoundType$inboundSchema` instead. */
  export const inboundSchema = FileNotFoundType$inboundSchema;
  /** @deprecated use `FileNotFoundType$outboundSchema` instead. */
  export const outboundSchema = FileNotFoundType$outboundSchema;
}

/** @internal */
export const FileNotFound$inboundSchema: z.ZodType<
  FileNotFound,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("FileNotFound"),
  detail: z.string(),
})
  .transform((v) => {
    return new FileNotFound(v);
  });

/** @internal */
export type FileNotFound$Outbound = {
  type: "FileNotFound";
  detail: string;
};

/** @internal */
export const FileNotFound$outboundSchema: z.ZodType<
  FileNotFound$Outbound,
  z.ZodTypeDef,
  FileNotFound
> = z.instanceof(FileNotFound)
  .transform(v => v.data$)
  .pipe(z.object({
    type: z.literal("FileNotFound").default("FileNotFound"),
    detail: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileNotFound$ {
  /** @deprecated use `FileNotFound$inboundSchema` instead. */
  export const inboundSchema = FileNotFound$inboundSchema;
  /** @deprecated use `FileNotFound$outboundSchema` instead. */
  export const outboundSchema = FileNotFound$outboundSchema;
  /** @deprecated use `FileNotFound$Outbound` instead. */
  export type Outbound = FileNotFound$Outbound;
}
