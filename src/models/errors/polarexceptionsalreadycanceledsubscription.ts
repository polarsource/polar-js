/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { PolarError } from "./polarerror.js";

export type PolarExceptionsAlreadyCanceledSubscriptionData = {
  error: "AlreadyCanceledSubscription";
  detail: string;
};

export class PolarExceptionsAlreadyCanceledSubscription extends PolarError {
  error: "AlreadyCanceledSubscription";
  detail: string;

  /** The original data that was passed to this error instance. */
  data$: PolarExceptionsAlreadyCanceledSubscriptionData;

  constructor(
    err: PolarExceptionsAlreadyCanceledSubscriptionData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.error = err.error;
    this.detail = err.detail;

    this.name = "PolarExceptionsAlreadyCanceledSubscription";
  }
}

/** @internal */
export const PolarExceptionsAlreadyCanceledSubscription$inboundSchema:
  z.ZodType<PolarExceptionsAlreadyCanceledSubscription, z.ZodTypeDef, unknown> =
    z.object({
      error: z.literal("AlreadyCanceledSubscription"),
      detail: z.string(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new PolarExceptionsAlreadyCanceledSubscription(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type PolarExceptionsAlreadyCanceledSubscription$Outbound = {
  error: "AlreadyCanceledSubscription";
  detail: string;
};

/** @internal */
export const PolarExceptionsAlreadyCanceledSubscription$outboundSchema:
  z.ZodType<
    PolarExceptionsAlreadyCanceledSubscription$Outbound,
    z.ZodTypeDef,
    PolarExceptionsAlreadyCanceledSubscription
  > = z.instanceof(PolarExceptionsAlreadyCanceledSubscription)
    .transform(v => v.data$)
    .pipe(z.object({
      error: z.literal("AlreadyCanceledSubscription"),
      detail: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PolarExceptionsAlreadyCanceledSubscription$ {
  /** @deprecated use `PolarExceptionsAlreadyCanceledSubscription$inboundSchema` instead. */
  export const inboundSchema =
    PolarExceptionsAlreadyCanceledSubscription$inboundSchema;
  /** @deprecated use `PolarExceptionsAlreadyCanceledSubscription$outboundSchema` instead. */
  export const outboundSchema =
    PolarExceptionsAlreadyCanceledSubscription$outboundSchema;
  /** @deprecated use `PolarExceptionsAlreadyCanceledSubscription$Outbound` instead. */
  export type Outbound = PolarExceptionsAlreadyCanceledSubscription$Outbound;
}
