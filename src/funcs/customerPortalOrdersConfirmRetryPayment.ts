/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { PolarCore } from "../core.js";
import { encodeJSON, encodeSimple } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { resolveSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  CustomerOrderPaymentConfirmation,
  CustomerOrderPaymentConfirmation$inboundSchema,
} from "../models/components/customerorderpaymentconfirmation.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import {
  OrderNotEligibleForRetry,
  OrderNotEligibleForRetry$inboundSchema,
} from "../models/errors/ordernoteligibleforretry.js";
import {
  PaymentAlreadyInProgress,
  PaymentAlreadyInProgress$inboundSchema,
} from "../models/errors/paymentalreadyinprogress.js";
import { PolarError } from "../models/errors/polarerror.js";
import {
  ResourceNotFound,
  ResourceNotFound$inboundSchema,
} from "../models/errors/resourcenotfound.js";
import { ResponseValidationError } from "../models/errors/responsevalidationerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import {
  CustomerPortalOrdersConfirmRetryPaymentRequest,
  CustomerPortalOrdersConfirmRetryPaymentRequest$outboundSchema,
  CustomerPortalOrdersConfirmRetryPaymentSecurity,
} from "../models/operations/customerportalordersconfirmretrypayment.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Confirm Retry Payment
 *
 * @remarks
 * Confirm a retry payment using a Stripe confirmation token.
 *
 * **Scopes**: `customer_portal:write`
 */
export function customerPortalOrdersConfirmRetryPayment(
  client: PolarCore,
  security: CustomerPortalOrdersConfirmRetryPaymentSecurity,
  request: CustomerPortalOrdersConfirmRetryPaymentRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    CustomerOrderPaymentConfirmation,
    | ResourceNotFound
    | PaymentAlreadyInProgress
    | OrderNotEligibleForRetry
    | PolarError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    security,
    request,
    options,
  ));
}

async function $do(
  client: PolarCore,
  security: CustomerPortalOrdersConfirmRetryPaymentSecurity,
  request: CustomerPortalOrdersConfirmRetryPaymentRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      CustomerOrderPaymentConfirmation,
      | ResourceNotFound
      | PaymentAlreadyInProgress
      | OrderNotEligibleForRetry
      | PolarError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      CustomerPortalOrdersConfirmRetryPaymentRequest$outboundSchema.parse(
        value,
      ),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = encodeJSON("body", payload.CustomerOrderConfirmPayment, {
    explode: true,
  });

  const pathParams = {
    id: encodeSimple("id", payload.id, {
      explode: false,
      charEncoding: "percent",
    }),
  };

  const path = pathToFunc("/v1/customer-portal/orders/{id}/confirm-payment")(
    pathParams,
  );

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: "application/json",
  }));

  const requestSecurity = resolveSecurity(
    [
      {
        fieldName: "Authorization",
        type: "http:bearer",
        value: security?.customerSession,
      },
    ],
  );

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "customer_portal:orders:confirm_retry_payment",
    oAuth2Scopes: null,

    resolvedSecurity: requestSecurity,

    securitySource: security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["404", "409", "422", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    CustomerOrderPaymentConfirmation,
    | ResourceNotFound
    | PaymentAlreadyInProgress
    | OrderNotEligibleForRetry
    | PolarError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, CustomerOrderPaymentConfirmation$inboundSchema),
    M.jsonErr(404, ResourceNotFound$inboundSchema),
    M.jsonErr(409, PaymentAlreadyInProgress$inboundSchema),
    M.jsonErr(422, OrderNotEligibleForRetry$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
