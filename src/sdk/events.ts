/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { eventsGet } from "../funcs/eventsGet.js";
import { eventsIngest } from "../funcs/eventsIngest.js";
import { eventsList } from "../funcs/eventsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { Event } from "../models/components/event.js";
import { EventsIngest } from "../models/components/eventsingest.js";
import { EventsIngestResponse } from "../models/components/eventsingestresponse.js";
import { EventsGetRequest } from "../models/operations/eventsget.js";
import {
  EventsListRequest,
  EventsListResponse,
} from "../models/operations/eventslist.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Events extends ClientSDK {
  /**
   * List Events
   *
   * @remarks
   * List events.
   *
   * **Scopes**: `events:read` `events:write`
   */
  async list(
    request: EventsListRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<EventsListResponse, { page: number }>> {
    return unwrapResultIterator(eventsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Event
   *
   * @remarks
   * Get an event by ID.
   *
   * **Scopes**: `events:read` `events:write`
   */
  async get(
    request: EventsGetRequest,
    options?: RequestOptions,
  ): Promise<Event> {
    return unwrapAsync(eventsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Ingest Events
   *
   * @remarks
   * Ingest batch of events.
   *
   * **Scopes**: `events:write`
   */
  async ingest(
    request: EventsIngest,
    options?: RequestOptions,
  ): Promise<EventsIngestResponse> {
    return unwrapAsync(eventsIngest(
      this,
      request,
      options,
    ));
  }
}
