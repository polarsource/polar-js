/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { checkoutLinksCreate } from "../funcs/checkoutLinksCreate.js";
import { checkoutLinksDelete } from "../funcs/checkoutLinksDelete.js";
import { checkoutLinksGet } from "../funcs/checkoutLinksGet.js";
import { checkoutLinksList } from "../funcs/checkoutLinksList.js";
import { checkoutLinksUpdate } from "../funcs/checkoutLinksUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class CheckoutLinks extends ClientSDK {
  /**
   * List Checkout Links
   *
   * @remarks
   * List checkout links.
   */
  async list(
    request: operations.CheckoutLinksListRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.CheckoutLinksListResponse, { page: number }>
  > {
    return unwrapResultIterator(checkoutLinksList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Checkout Link
   *
   * @remarks
   * Create a checkout link.
   */
  async create(
    request: components.CheckoutLinkCreate,
    options?: RequestOptions,
  ): Promise<components.CheckoutLink> {
    return unwrapAsync(checkoutLinksCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Checkout Link
   *
   * @remarks
   * Get a checkout link by ID.
   */
  async get(
    request: operations.CheckoutLinksGetRequest,
    options?: RequestOptions,
  ): Promise<components.CheckoutLink> {
    return unwrapAsync(checkoutLinksGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Checkout Link
   *
   * @remarks
   * Update a checkout link.
   */
  async update(
    request: operations.CheckoutLinksUpdateRequest,
    options?: RequestOptions,
  ): Promise<components.CheckoutLink> {
    return unwrapAsync(checkoutLinksUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Checkout Link
   *
   * @remarks
   * Delete a checkout link.
   */
  async delete(
    request: operations.CheckoutLinksDeleteRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(checkoutLinksDelete(
      this,
      request,
      options,
    ));
  }
}
