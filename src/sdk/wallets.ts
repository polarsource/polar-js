/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { walletsGet } from "../funcs/walletsGet.js";
import { walletsList } from "../funcs/walletsList.js";
import { walletsTopUp } from "../funcs/walletsTopUp.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { Wallet } from "../models/components/wallet.js";
import { WalletsGetRequest } from "../models/operations/walletsget.js";
import {
  WalletsListRequest,
  WalletsListResponse,
} from "../models/operations/walletslist.js";
import { WalletsTopUpRequest } from "../models/operations/walletstopup.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Wallets extends ClientSDK {
  /**
   * List Wallets
   *
   * @remarks
   * List wallets.
   *
   * **Scopes**: `wallets:read`
   */
  async list(
    request: WalletsListRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<WalletsListResponse, { page: number }>> {
    return unwrapResultIterator(walletsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Wallet
   *
   * @remarks
   * Get a wallet by ID.
   *
   * **Scopes**: `wallets:read`
   */
  async get(
    request: WalletsGetRequest,
    options?: RequestOptions,
  ): Promise<Wallet> {
    return unwrapAsync(walletsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Top-Up Wallet
   *
   * @remarks
   * Top-up a wallet by adding funds to its balance.
   *
   * The customer should have a valid payment method on file.
   *
   * **Scopes**: `wallets:write`
   */
  async topUp(
    request: WalletsTopUpRequest,
    options?: RequestOptions,
  ): Promise<Wallet | undefined> {
    return unwrapAsync(walletsTopUp(
      this,
      request,
      options,
    ));
  }
}
