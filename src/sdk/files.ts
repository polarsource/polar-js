/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { filesCreate } from "../funcs/filesCreate.js";
import { filesDelete } from "../funcs/filesDelete.js";
import { filesList } from "../funcs/filesList.js";
import { filesUpdate } from "../funcs/filesUpdate.js";
import { filesUploaded } from "../funcs/filesUploaded.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Files extends ClientSDK {
  /**
   * List Files
   *
   * @remarks
   * List files.
   */
  async list(
    request: operations.FilesListRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<operations.FilesListResponse, { page: number }>> {
    return unwrapResultIterator(filesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create File
   *
   * @remarks
   * Create a file.
   */
  async create(
    request: components.FileCreate,
    options?: RequestOptions,
  ): Promise<components.FileUpload> {
    return unwrapAsync(filesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Complete File Upload
   *
   * @remarks
   * Complete a file upload.
   */
  async uploaded(
    request: operations.FilesUploadedRequest,
    options?: RequestOptions,
  ): Promise<operations.FilesUploadedResponseFilesUploaded> {
    return unwrapAsync(filesUploaded(
      this,
      request,
      options,
    ));
  }

  /**
   * Update File
   *
   * @remarks
   * Update a file.
   */
  async update(
    request: operations.FilesUpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.FilesUpdateResponseFilesUpdate> {
    return unwrapAsync(filesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete File
   *
   * @remarks
   * Delete a file.
   */
  async delete(
    request: operations.FilesDeleteRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(filesDelete(
      this,
      request,
      options,
    ));
  }
}
