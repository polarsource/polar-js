/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { organizationsCreate } from "../funcs/organizationsCreate.js";
import { organizationsGet } from "../funcs/organizationsGet.js";
import { organizationsList } from "../funcs/organizationsList.js";
import { organizationsUpdate } from "../funcs/organizationsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Organizations extends ClientSDK {
  /**
   * List Organizations
   *
   * @remarks
   * List organizations.
   */
  async list(
    request: operations.OrganizationsListRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.OrganizationsListResponse, { page: number }>
  > {
    return unwrapResultIterator(organizationsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Organization
   *
   * @remarks
   * Create an organization.
   */
  async create(
    request: components.OrganizationCreate,
    options?: RequestOptions,
  ): Promise<components.Organization> {
    return unwrapAsync(organizationsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Organization
   *
   * @remarks
   * Get an organization by ID.
   */
  async get(
    request: operations.OrganizationsGetRequest,
    options?: RequestOptions,
  ): Promise<components.Organization> {
    return unwrapAsync(organizationsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Organization
   *
   * @remarks
   * Update an organization.
   */
  async update(
    request: operations.OrganizationsUpdateRequest,
    options?: RequestOptions,
  ): Promise<components.Organization> {
    return unwrapAsync(organizationsUpdate(
      this,
      request,
      options,
    ));
  }
}
