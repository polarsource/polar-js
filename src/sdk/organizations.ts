/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { organizationsCreate } from "../funcs/organizationsCreate.js";
import { organizationsGet } from "../funcs/organizationsGet.js";
import { organizationsList } from "../funcs/organizationsList.js";
import { organizationsUpdate } from "../funcs/organizationsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { Organization } from "../models/components/organization.js";
import { OrganizationCreate } from "../models/components/organizationcreate.js";
import { OrganizationsGetRequest } from "../models/operations/organizationsget.js";
import {
  OrganizationsListRequest,
  OrganizationsListResponse,
} from "../models/operations/organizationslist.js";
import { OrganizationsUpdateRequest } from "../models/operations/organizationsupdate.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Organizations extends ClientSDK {
  /**
   * List Organizations
   *
   * @remarks
   * List organizations.
   *
   * **Scopes**: `organizations:read` `organizations:write`
   */
  async list(
    request: OrganizationsListRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<OrganizationsListResponse, { page: number }>> {
    return unwrapResultIterator(organizationsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Organization
   *
   * @remarks
   * Create an organization.
   *
   * **Scopes**: `organizations:write`
   */
  async create(
    request: OrganizationCreate,
    options?: RequestOptions,
  ): Promise<Organization> {
    return unwrapAsync(organizationsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Organization
   *
   * @remarks
   * Get an organization by ID.
   *
   * **Scopes**: `organizations:read` `organizations:write`
   */
  async get(
    request: OrganizationsGetRequest,
    options?: RequestOptions,
  ): Promise<Organization> {
    return unwrapAsync(organizationsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Organization
   *
   * @remarks
   * Update an organization.
   *
   * **Scopes**: `organizations:write`
   */
  async update(
    request: OrganizationsUpdateRequest,
    options?: RequestOptions,
  ): Promise<Organization> {
    return unwrapAsync(organizationsUpdate(
      this,
      request,
      options,
    ));
  }
}
