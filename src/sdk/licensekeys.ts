/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { licenseKeysActivate } from "../funcs/licenseKeysActivate.js";
import { licenseKeysDeactivate } from "../funcs/licenseKeysDeactivate.js";
import { licenseKeysGet } from "../funcs/licenseKeysGet.js";
import { licenseKeysGetActivation } from "../funcs/licenseKeysGetActivation.js";
import { licenseKeysList } from "../funcs/licenseKeysList.js";
import { licenseKeysUpdate } from "../funcs/licenseKeysUpdate.js";
import { licenseKeysValidate } from "../funcs/licenseKeysValidate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { LicenseKeyActivate } from "../models/components/licensekeyactivate.js";
import { LicenseKeyActivationRead } from "../models/components/licensekeyactivationread.js";
import { LicenseKeyDeactivate } from "../models/components/licensekeydeactivate.js";
import { LicenseKeyRead } from "../models/components/licensekeyread.js";
import { LicenseKeyValidate } from "../models/components/licensekeyvalidate.js";
import { LicenseKeyWithActivations } from "../models/components/licensekeywithactivations.js";
import { ValidatedLicenseKey } from "../models/components/validatedlicensekey.js";
import { LicenseKeysGetRequest } from "../models/operations/licensekeysget.js";
import { LicenseKeysGetActivationRequest } from "../models/operations/licensekeysgetactivation.js";
import {
  LicenseKeysListRequest,
  LicenseKeysListResponse,
} from "../models/operations/licensekeyslist.js";
import { LicenseKeysUpdateRequest } from "../models/operations/licensekeysupdate.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class LicenseKeys extends ClientSDK {
  /**
   * List License Keys
   *
   * @remarks
   * Get license keys connected to the given organization & filters.
   *
   * **Scopes**: `license_keys:read` `license_keys:write`
   */
  async list(
    request: LicenseKeysListRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<LicenseKeysListResponse, { page: number }>> {
    return unwrapResultIterator(licenseKeysList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get License Key
   *
   * @remarks
   * Get a license key.
   *
   * **Scopes**: `license_keys:read` `license_keys:write`
   */
  async get(
    request: LicenseKeysGetRequest,
    options?: RequestOptions,
  ): Promise<LicenseKeyWithActivations> {
    return unwrapAsync(licenseKeysGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update License Key
   *
   * @remarks
   * Update a license key.
   *
   * **Scopes**: `license_keys:write`
   */
  async update(
    request: LicenseKeysUpdateRequest,
    options?: RequestOptions,
  ): Promise<LicenseKeyRead> {
    return unwrapAsync(licenseKeysUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Activation
   *
   * @remarks
   * Get a license key activation.
   *
   * **Scopes**: `license_keys:read` `license_keys:write`
   */
  async getActivation(
    request: LicenseKeysGetActivationRequest,
    options?: RequestOptions,
  ): Promise<LicenseKeyActivationRead> {
    return unwrapAsync(licenseKeysGetActivation(
      this,
      request,
      options,
    ));
  }

  /**
   * Validate License Key
   *
   * @remarks
   * Validate a license key.
   *
   * **Scopes**: `license_keys:write`
   */
  async validate(
    request: LicenseKeyValidate,
    options?: RequestOptions,
  ): Promise<ValidatedLicenseKey> {
    return unwrapAsync(licenseKeysValidate(
      this,
      request,
      options,
    ));
  }

  /**
   * Activate License Key
   *
   * @remarks
   * Activate a license key instance.
   *
   * **Scopes**: `license_keys:write`
   */
  async activate(
    request: LicenseKeyActivate,
    options?: RequestOptions,
  ): Promise<LicenseKeyActivationRead> {
    return unwrapAsync(licenseKeysActivate(
      this,
      request,
      options,
    ));
  }

  /**
   * Deactivate License Key
   *
   * @remarks
   * Deactivate a license key instance.
   *
   * **Scopes**: `license_keys:write`
   */
  async deactivate(
    request: LicenseKeyDeactivate,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(licenseKeysDeactivate(
      this,
      request,
      options,
    ));
  }
}
