/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { customerPortalOrdersConfirmRetryPayment } from "../funcs/customerPortalOrdersConfirmRetryPayment.js";
import { customerPortalOrdersGenerateInvoice } from "../funcs/customerPortalOrdersGenerateInvoice.js";
import { customerPortalOrdersGet } from "../funcs/customerPortalOrdersGet.js";
import { customerPortalOrdersGetPaymentStatus } from "../funcs/customerPortalOrdersGetPaymentStatus.js";
import { customerPortalOrdersInvoice } from "../funcs/customerPortalOrdersInvoice.js";
import { customerPortalOrdersList } from "../funcs/customerPortalOrdersList.js";
import { customerPortalOrdersUpdate } from "../funcs/customerPortalOrdersUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { CustomerOrder } from "../models/components/customerorder.js";
import { CustomerOrderInvoice } from "../models/components/customerorderinvoice.js";
import { CustomerOrderPaymentConfirmation } from "../models/components/customerorderpaymentconfirmation.js";
import { CustomerOrderPaymentStatus } from "../models/components/customerorderpaymentstatus.js";
import {
  CustomerPortalOrdersConfirmRetryPaymentRequest,
  CustomerPortalOrdersConfirmRetryPaymentSecurity,
} from "../models/operations/customerportalordersconfirmretrypayment.js";
import {
  CustomerPortalOrdersGenerateInvoiceRequest,
  CustomerPortalOrdersGenerateInvoiceSecurity,
} from "../models/operations/customerportalordersgenerateinvoice.js";
import {
  CustomerPortalOrdersGetRequest,
  CustomerPortalOrdersGetSecurity,
} from "../models/operations/customerportalordersget.js";
import {
  CustomerPortalOrdersGetPaymentStatusRequest,
  CustomerPortalOrdersGetPaymentStatusSecurity,
} from "../models/operations/customerportalordersgetpaymentstatus.js";
import {
  CustomerPortalOrdersInvoiceRequest,
  CustomerPortalOrdersInvoiceSecurity,
} from "../models/operations/customerportalordersinvoice.js";
import {
  CustomerPortalOrdersListRequest,
  CustomerPortalOrdersListResponse,
  CustomerPortalOrdersListSecurity,
} from "../models/operations/customerportalorderslist.js";
import {
  CustomerPortalOrdersUpdateRequest,
  CustomerPortalOrdersUpdateSecurity,
} from "../models/operations/customerportalordersupdate.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class PolarOrders extends ClientSDK {
  /**
   * List Orders
   *
   * @remarks
   * List orders of the authenticated customer.
   *
   * **Scopes**: `customer_portal:read` `customer_portal:write`
   */
  async list(
    security: CustomerPortalOrdersListSecurity,
    request: CustomerPortalOrdersListRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<CustomerPortalOrdersListResponse, { page: number }>> {
    return unwrapResultIterator(customerPortalOrdersList(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Get Order
   *
   * @remarks
   * Get an order by ID for the authenticated customer.
   *
   * **Scopes**: `customer_portal:read` `customer_portal:write`
   */
  async get(
    security: CustomerPortalOrdersGetSecurity,
    request: CustomerPortalOrdersGetRequest,
    options?: RequestOptions,
  ): Promise<CustomerOrder> {
    return unwrapAsync(customerPortalOrdersGet(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Update Order
   *
   * @remarks
   * Update an order for the authenticated customer.
   *
   * **Scopes**: `customer_portal:write`
   */
  async update(
    security: CustomerPortalOrdersUpdateSecurity,
    request: CustomerPortalOrdersUpdateRequest,
    options?: RequestOptions,
  ): Promise<CustomerOrder> {
    return unwrapAsync(customerPortalOrdersUpdate(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Generate Order Invoice
   *
   * @remarks
   * Trigger generation of an order's invoice.
   *
   * **Scopes**: `customer_portal:read` `customer_portal:write`
   */
  async generateInvoice(
    security: CustomerPortalOrdersGenerateInvoiceSecurity,
    request: CustomerPortalOrdersGenerateInvoiceRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(customerPortalOrdersGenerateInvoice(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Get Order Invoice
   *
   * @remarks
   * Get an order's invoice data.
   *
   * **Scopes**: `customer_portal:read` `customer_portal:write`
   */
  async invoice(
    security: CustomerPortalOrdersInvoiceSecurity,
    request: CustomerPortalOrdersInvoiceRequest,
    options?: RequestOptions,
  ): Promise<CustomerOrderInvoice> {
    return unwrapAsync(customerPortalOrdersInvoice(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Get Order Payment Status
   *
   * @remarks
   * Get the current payment status for an order.
   *
   * **Scopes**: `customer_portal:read` `customer_portal:write`
   */
  async getPaymentStatus(
    security: CustomerPortalOrdersGetPaymentStatusSecurity,
    request: CustomerPortalOrdersGetPaymentStatusRequest,
    options?: RequestOptions,
  ): Promise<CustomerOrderPaymentStatus> {
    return unwrapAsync(customerPortalOrdersGetPaymentStatus(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Confirm Retry Payment
   *
   * @remarks
   * Confirm a retry payment using a Stripe confirmation token.
   *
   * **Scopes**: `customer_portal:write`
   */
  async confirmRetryPayment(
    security: CustomerPortalOrdersConfirmRetryPaymentSecurity,
    request: CustomerPortalOrdersConfirmRetryPaymentRequest,
    options?: RequestOptions,
  ): Promise<CustomerOrderPaymentConfirmation> {
    return unwrapAsync(customerPortalOrdersConfirmRetryPayment(
      this,
      security,
      request,
      options,
    ));
  }
}
