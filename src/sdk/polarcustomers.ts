/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { customerPortalCustomersAddPaymentMethod } from "../funcs/customerPortalCustomersAddPaymentMethod.js";
import { customerPortalCustomersDeletePaymentMethod } from "../funcs/customerPortalCustomersDeletePaymentMethod.js";
import { customerPortalCustomersGet } from "../funcs/customerPortalCustomersGet.js";
import { customerPortalCustomersListPaymentMethods } from "../funcs/customerPortalCustomersListPaymentMethods.js";
import { customerPortalCustomersUpdate } from "../funcs/customerPortalCustomersUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { CustomerPaymentMethod } from "../models/components/customerpaymentmethod.js";
import { CustomerPaymentMethodCreate } from "../models/components/customerpaymentmethodcreate.js";
import { CustomerPortalCustomer } from "../models/components/customerportalcustomer.js";
import { CustomerPortalCustomerUpdate } from "../models/components/customerportalcustomerupdate.js";
import { CustomerPortalCustomersAddPaymentMethodSecurity } from "../models/operations/customerportalcustomersaddpaymentmethod.js";
import {
  CustomerPortalCustomersDeletePaymentMethodRequest,
  CustomerPortalCustomersDeletePaymentMethodSecurity,
} from "../models/operations/customerportalcustomersdeletepaymentmethod.js";
import { CustomerPortalCustomersGetSecurity } from "../models/operations/customerportalcustomersget.js";
import {
  CustomerPortalCustomersListPaymentMethodsRequest,
  CustomerPortalCustomersListPaymentMethodsResponse,
  CustomerPortalCustomersListPaymentMethodsSecurity,
} from "../models/operations/customerportalcustomerslistpaymentmethods.js";
import { CustomerPortalCustomersUpdateSecurity } from "../models/operations/customerportalcustomersupdate.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class PolarCustomers extends ClientSDK {
  /**
   * Get Customer
   *
   * @remarks
   * Get authenticated customer.
   *
   * **Scopes**: `customer_portal:read` `customer_portal:write`
   */
  async get(
    security: CustomerPortalCustomersGetSecurity,
    options?: RequestOptions,
  ): Promise<CustomerPortalCustomer> {
    return unwrapAsync(customerPortalCustomersGet(
      this,
      security,
      options,
    ));
  }

  /**
   * Update Customer
   *
   * @remarks
   * Update authenticated customer.
   *
   * **Scopes**: `customer_portal:write`
   */
  async update(
    security: CustomerPortalCustomersUpdateSecurity,
    request: CustomerPortalCustomerUpdate,
    options?: RequestOptions,
  ): Promise<CustomerPortalCustomer> {
    return unwrapAsync(customerPortalCustomersUpdate(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * List Customer Payment Methods
   *
   * @remarks
   * Get saved payment methods of the authenticated customer.
   *
   * **Scopes**: `customer_portal:read` `customer_portal:write`
   */
  async listPaymentMethods(
    security: CustomerPortalCustomersListPaymentMethodsSecurity,
    request: CustomerPortalCustomersListPaymentMethodsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      CustomerPortalCustomersListPaymentMethodsResponse,
      { page: number }
    >
  > {
    return unwrapResultIterator(customerPortalCustomersListPaymentMethods(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Add Customer Payment Method
   *
   * @remarks
   * Add a payment method to the authenticated customer.
   *
   * **Scopes**: `customer_portal:read` `customer_portal:write`
   */
  async addPaymentMethod(
    security: CustomerPortalCustomersAddPaymentMethodSecurity,
    request: CustomerPaymentMethodCreate,
    options?: RequestOptions,
  ): Promise<CustomerPaymentMethod> {
    return unwrapAsync(customerPortalCustomersAddPaymentMethod(
      this,
      security,
      request,
      options,
    ));
  }

  /**
   * Delete Customer Payment Method
   *
   * @remarks
   * Delete a payment method from the authenticated customer.
   *
   * **Scopes**: `customer_portal:read` `customer_portal:write`
   */
  async deletePaymentMethod(
    security: CustomerPortalCustomersDeletePaymentMethodSecurity,
    request: CustomerPortalCustomersDeletePaymentMethodRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(customerPortalCustomersDeletePaymentMethod(
      this,
      security,
      request,
      options,
    ));
  }
}
