/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { usersSubscriptionsCancel } from "../funcs/usersSubscriptionsCancel.js";
import { usersSubscriptionsGet } from "../funcs/usersSubscriptionsGet.js";
import { usersSubscriptionsList } from "../funcs/usersSubscriptionsList.js";
import { usersSubscriptionsUpdate } from "../funcs/usersSubscriptionsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class PolarSubscriptions extends ClientSDK {
  /**
   * List Subscriptions
   *
   * @remarks
   * List my subscriptions.
   */
  async list(
    request: operations.UsersSubscriptionsListRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.UsersSubscriptionsListResponse, { page: number }>
  > {
    return unwrapResultIterator(usersSubscriptionsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Subscription
   *
   * @remarks
   * Get a subscription by ID.
   */
  async get(
    request: operations.UsersSubscriptionsGetRequest,
    options?: RequestOptions,
  ): Promise<components.UserSubscription> {
    return unwrapAsync(usersSubscriptionsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Subscription
   *
   * @remarks
   * Update a subscription.
   */
  async update(
    request: operations.UsersSubscriptionsUpdateRequest,
    options?: RequestOptions,
  ): Promise<components.UserSubscription> {
    return unwrapAsync(usersSubscriptionsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel Subscription
   *
   * @remarks
   * Cancel a subscription.
   */
  async cancel(
    request: operations.UsersSubscriptionsCancelRequest,
    options?: RequestOptions,
  ): Promise<components.UserSubscription> {
    return unwrapAsync(usersSubscriptionsCancel(
      this,
      request,
      options,
    ));
  }
}
