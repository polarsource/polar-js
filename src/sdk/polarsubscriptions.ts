/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { customerPortalSubscriptionsCancel } from "../funcs/customerPortalSubscriptionsCancel.js";
import { customerPortalSubscriptionsGet } from "../funcs/customerPortalSubscriptionsGet.js";
import { customerPortalSubscriptionsList } from "../funcs/customerPortalSubscriptionsList.js";
import { customerPortalSubscriptionsUpdate } from "../funcs/customerPortalSubscriptionsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class PolarSubscriptions extends ClientSDK {
  /**
   * List Subscriptions
   *
   * @remarks
   * List subscriptions of the authenticated customer or user.
   */
  async list(
    request: operations.CustomerPortalSubscriptionsListRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.CustomerPortalSubscriptionsListResponse,
      { page: number }
    >
  > {
    return unwrapResultIterator(customerPortalSubscriptionsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Subscription
   *
   * @remarks
   * Get a subscription for the authenticated customer or user.
   */
  async get(
    request: operations.CustomerPortalSubscriptionsGetRequest,
    options?: RequestOptions,
  ): Promise<components.CustomerSubscription> {
    return unwrapAsync(customerPortalSubscriptionsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Subscription
   *
   * @remarks
   * Update a subscription of the authenticated customer or user.
   */
  async update(
    request: operations.CustomerPortalSubscriptionsUpdateRequest,
    options?: RequestOptions,
  ): Promise<components.CustomerSubscription> {
    return unwrapAsync(customerPortalSubscriptionsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel Subscription
   *
   * @remarks
   * Cancel a subscription of the authenticated customer or user.
   */
  async cancel(
    request: operations.CustomerPortalSubscriptionsCancelRequest,
    options?: RequestOptions,
  ): Promise<components.CustomerSubscription> {
    return unwrapAsync(customerPortalSubscriptionsCancel(
      this,
      request,
      options,
    ));
  }
}
