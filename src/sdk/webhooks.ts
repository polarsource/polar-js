/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhooksCreateWebhookEndpoint } from "../funcs/webhooksCreateWebhookEndpoint.js";
import { webhooksDeleteWebhookEndpoint } from "../funcs/webhooksDeleteWebhookEndpoint.js";
import { webhooksGetWebhookEndpoint } from "../funcs/webhooksGetWebhookEndpoint.js";
import { webhooksListWebhookDeliveries } from "../funcs/webhooksListWebhookDeliveries.js";
import { webhooksListWebhookEndpoints } from "../funcs/webhooksListWebhookEndpoints.js";
import { webhooksRedeliverWebhookEvent } from "../funcs/webhooksRedeliverWebhookEvent.js";
import { webhooksResetWebhookEndpointSecret } from "../funcs/webhooksResetWebhookEndpointSecret.js";
import { webhooksUpdateWebhookEndpoint } from "../funcs/webhooksUpdateWebhookEndpoint.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { WebhookEndpoint } from "../models/components/webhookendpoint.js";
import { WebhookEndpointCreate } from "../models/components/webhookendpointcreate.js";
import { WebhooksDeleteWebhookEndpointRequest } from "../models/operations/webhooksdeletewebhookendpoint.js";
import { WebhooksGetWebhookEndpointRequest } from "../models/operations/webhooksgetwebhookendpoint.js";
import {
  WebhooksListWebhookDeliveriesRequest,
  WebhooksListWebhookDeliveriesResponse,
} from "../models/operations/webhookslistwebhookdeliveries.js";
import {
  WebhooksListWebhookEndpointsRequest,
  WebhooksListWebhookEndpointsResponse,
} from "../models/operations/webhookslistwebhookendpoints.js";
import { WebhooksRedeliverWebhookEventRequest } from "../models/operations/webhooksredeliverwebhookevent.js";
import { WebhooksResetWebhookEndpointSecretRequest } from "../models/operations/webhooksresetwebhookendpointsecret.js";
import { WebhooksUpdateWebhookEndpointRequest } from "../models/operations/webhooksupdatewebhookendpoint.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Webhooks extends ClientSDK {
  /**
   * List Webhook Endpoints
   *
   * @remarks
   * List webhook endpoints.
   *
   * **Scopes**: `webhooks:read` `webhooks:write`
   */
  async listWebhookEndpoints(
    request: WebhooksListWebhookEndpointsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<WebhooksListWebhookEndpointsResponse, { page: number }>
  > {
    return unwrapResultIterator(webhooksListWebhookEndpoints(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Webhook Endpoint
   *
   * @remarks
   * Create a webhook endpoint.
   *
   * **Scopes**: `webhooks:write`
   */
  async createWebhookEndpoint(
    request: WebhookEndpointCreate,
    options?: RequestOptions,
  ): Promise<WebhookEndpoint> {
    return unwrapAsync(webhooksCreateWebhookEndpoint(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Webhook Endpoint
   *
   * @remarks
   * Get a webhook endpoint by ID.
   *
   * **Scopes**: `webhooks:read` `webhooks:write`
   */
  async getWebhookEndpoint(
    request: WebhooksGetWebhookEndpointRequest,
    options?: RequestOptions,
  ): Promise<WebhookEndpoint> {
    return unwrapAsync(webhooksGetWebhookEndpoint(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Webhook Endpoint
   *
   * @remarks
   * Update a webhook endpoint.
   *
   * **Scopes**: `webhooks:write`
   */
  async updateWebhookEndpoint(
    request: WebhooksUpdateWebhookEndpointRequest,
    options?: RequestOptions,
  ): Promise<WebhookEndpoint> {
    return unwrapAsync(webhooksUpdateWebhookEndpoint(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Webhook Endpoint
   *
   * @remarks
   * Delete a webhook endpoint.
   *
   * **Scopes**: `webhooks:write`
   */
  async deleteWebhookEndpoint(
    request: WebhooksDeleteWebhookEndpointRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(webhooksDeleteWebhookEndpoint(
      this,
      request,
      options,
    ));
  }

  /**
   * Reset Webhook Endpoint Secret
   *
   * @remarks
   * Regenerate a webhook endpoint secret.
   *
   * **Scopes**: `webhooks:write`
   */
  async resetWebhookEndpointSecret(
    request: WebhooksResetWebhookEndpointSecretRequest,
    options?: RequestOptions,
  ): Promise<WebhookEndpoint> {
    return unwrapAsync(webhooksResetWebhookEndpointSecret(
      this,
      request,
      options,
    ));
  }

  /**
   * List Webhook Deliveries
   *
   * @remarks
   * List webhook deliveries.
   *
   * Deliveries are all the attempts to deliver a webhook event to an endpoint.
   *
   * **Scopes**: `webhooks:read` `webhooks:write`
   */
  async listWebhookDeliveries(
    request: WebhooksListWebhookDeliveriesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<WebhooksListWebhookDeliveriesResponse, { page: number }>
  > {
    return unwrapResultIterator(webhooksListWebhookDeliveries(
      this,
      request,
      options,
    ));
  }

  /**
   * Redeliver Webhook Event
   *
   * @remarks
   * Schedule the re-delivery of a webhook event.
   *
   * **Scopes**: `webhooks:write`
   */
  async redeliverWebhookEvent(
    request: WebhooksRedeliverWebhookEventRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(webhooksRedeliverWebhookEvent(
      this,
      request,
      options,
    ));
  }
}
